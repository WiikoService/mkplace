# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—èimport os
import os
from config import PHOTOS_DIR
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
import logging
from typing import Union
from geopy.geocoders import Nominatim
import httpx
import json
from urllib.parse import quote

logger = logging.getLogger(__name__)


def ensure_photos_dir():
    if not os.path.exists(PHOTOS_DIR):
        os.makedirs(PHOTOS_DIR)


async def notify_admin(bot, request_id, requests_data, admin_ids):
    request = requests_data[request_id]
    location = request.get('location', None)
    if isinstance(location, dict) and 'latitude' in location and 'longitude' in location:
        latitude = location['latitude']
        longitude = location['longitude']
        location_link = f"https://yandex.ru/maps?whatshere%5Bpoint%5D={longitude}%2C{latitude}&"
        location_display = f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É: {location_link}"
    else:
        # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        location_display = request.get('location_display', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    message = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {request.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"–°—Ç–∞—Ç—É—Å: {request.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_display}\n"
        f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    )
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –°–¶", callback_data=f"assign_sc_{request_id}")],
        [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"reject_request_{request_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    for admin_id in admin_ids:
        try:
            await bot.send_message(chat_id=admin_id, text=message, reply_markup=reply_markup)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")


async def notify_delivery(bot, delivery_ids, task, detailed=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º"""
    message = ""
    keyboard = None
    
    if task.get('delivery_type') == 'sc_to_client':
        # –§–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶ –∫–ª–∏–µ–Ω—Ç—É
        message = (
            "üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶!\n\n"
            f"–ó–∞—è–≤–∫–∞: #{task.get('request_id')}\n"
            f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å –∏–∑ –°–¶:\n"
            f"üè¢ {task.get('sc_name')}\n"
            f"üìç {task.get('sc_address')}\n\n"
            f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:\n"
            f"üë§ {task.get('client_name')}\n"
            f"üìç {task.get('client_address')}\n"
            f"üì± {task.get('client_phone')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description')}"
        )
        
        keyboard = [[
            InlineKeyboardButton(
                "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –°–¶",
                callback_data=f"accept_sc_delivery_{task['request_id']}"
            )
        ]]
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        message = (
            "üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
            f"–ó–∞—è–≤–∫–∞: #{task.get('request_id')}\n"
            f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:\n"
            f"üë§ {task.get('client_name')}\n"
            f"üìç {task.get('client_address')}\n"
            f"üì± {task.get('client_phone')}\n\n"
            f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –°–¶:\n"
            f"üè¢ {task.get('sc_name')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description')}"
        )
        
        keyboard = [[
            InlineKeyboardButton(
                "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"accept_delivery_{task['request_id']}"
            )
        ]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    for delivery_id in delivery_ids:
        try:
            await bot.send_message(
                chat_id=delivery_id,
                text=message,
                reply_markup=reply_markup
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_id}: {e}")


async def notify_client(bot, client_id, message, reply_markup=None):
    try:
        await bot.send_message(chat_id=client_id, text=message, reply_markup=reply_markup)
    except Exception as e:
        print(f"Error notifying client {client_id}: {e}")


async def get_address_from_coords(latitude, longitude):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Nominatim API.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}&zoom=18&addressdetails=1&accept-language=ru"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å User-Agent)
        headers = {
            "User-Agent": "mkplace_bot/1.0"
        }
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        async with httpx.AsyncClient(timeout=3.0) as client:
            response = await client.get(url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                if "display_name" in data:
                    return data["display_name"]
                elif "address" in data:
                    # –°–æ–±–∏—Ä–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    components = []
                    for key in ["road", "house_number", "city", "town", "village"]:
                        if key in data["address"]:
                            components.append(data["address"][key])
                    return ", ".join(components) if components else "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
            return "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    except httpx.TimeoutException:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")
        return "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}")
        return "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

def format_location_for_display(location):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not location:
        return "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    
    if isinstance(location, dict):
        if location.get('type') == 'coordinates':
            address = location.get('address', '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
            return f"{address}"  # –£–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        return location.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
    return str(location)

def prepare_location_for_storage(location):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
    if isinstance(location, dict):
        return location
    return {"address": str(location), "type": "manual"}
