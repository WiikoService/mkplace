# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—èimport os
import os
from config import PHOTOS_DIR
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
import logging
from typing import Union

logger = logging.getLogger(__name__)

def ensure_photos_dir():
    if not os.path.exists(PHOTOS_DIR):
        os.makedirs(PHOTOS_DIR)

async def notify_admin(bot, request_id, requests_data, admin_ids):
    request = requests_data[request_id]
    location = request.get('location', {})
    
    if isinstance(location, dict) and 'latitude' in location and 'longitude' in location:
        latitude = location['latitude']
        longitude = location['longitude']
        location_link = f"https://yandex.ru/maps?whatshere%5Bpoint%5D={longitude}%2C{latitude}&"
    else:
        location_link = "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    message = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {request.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"–°—Ç–∞—Ç—É—Å: {request.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_link}\n"
    )
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –°–¶", callback_data=f"assign_sc_{request_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    for admin_id in admin_ids:
        try:
            await bot.send_message(chat_id=admin_id, text=message, reply_markup=reply_markup)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

            
async def notify_delivery(
    bot, 
    delivery_ids: Union[list, str], 
    task_data: dict,
    detailed: bool = False
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    """
    message = f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
    message += f"–ó–∞—è–≤–∫–∞: #{task_data['request_id']}\n"
    message += f"–°–¶: {task_data['sc_name']}\n"
    
    if detailed:
        message += f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {task_data.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        message += f"–ö–ª–∏–µ–Ω—Ç: {task_data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {task_data.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {task_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"

    keyboard = [[
        InlineKeyboardButton(
            "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É", 
            callback_data=f"accept_delivery_{task_data['request_id']}"
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if isinstance(delivery_ids, str):
        delivery_ids = [delivery_ids]

    for delivery_id in delivery_ids:
        try:
            await bot.send_message(
                chat_id=delivery_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_id}: {e}")

async def notify_client(bot, client_id, message, reply_markup=None):
    try:
        await bot.send_message(chat_id=client_id, text=message, reply_markup=reply_markup)
    except Exception as e:
        print(f"Error notifying client {client_id}: {e}")