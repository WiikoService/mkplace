"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ handle_deliver_to_client –¥–ª—è —Ñ–∞–π–ª–∞ handlers/delivery_sc_handler.py
"""

async def handle_deliver_to_client(self, update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É'"""
    query = update.callback_query
    await query.answer()
    try:
        request_id = query.data.split('_')[-1]
        context.user_data['current_request'] = request_id
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        requests_data = load_requests()
        delivery_tasks = load_delivery_tasks()
        users_data = load_users()
        if request_id not in requests_data:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END 
        request = requests_data[request_id]
        client_id = request.get('user_id')
        client_data = users_data.get(str(client_id), {})
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–ª–∏–µ–Ω—Ç—É –æ–ø–ª–∞—Ç–∏—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É
        payment_required = False
        final_price = Decimal(request.get('final_price', '0'))
        repair_price = Decimal(request.get('repair_price', '0'))
        delivery_cost = Decimal(request.get('delivery_cost', '0'))
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (30% –æ—Ç repair_price + 20)
        if final_price > 0 and repair_price > 0:
            expected_payment = (repair_price * Decimal('0.3')) + Decimal('20')
            if final_price >= expected_payment:
                payment_required = True
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        requests_data[request_id]['status'] = ORDER_STATUS_SC_TO_CLIENT
        save_requests(requests_data)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        task_updated = False
        for task_id, task in delivery_tasks.items():
            if task.get('request_id') == request_id:
                task['status'] = ORDER_STATUS_SC_TO_CLIENT
                task_updated = True
                break
        if not task_updated:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
        save_delivery_tasks(delivery_tasks)
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
        photos = requests_data[request_id].get('sc_pickup_photos', [])
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        if client_id:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                await context.bot.send_message(
                    chat_id=int(client_id),
                    text=f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–±—ã–ª —Å –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ –≤–∞–º.\n"
                        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {requests_data[request_id].get('location_display', '—É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∑–∞—è–≤–∫–µ')}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
                for photo_path in photos:
                    if os.path.exists(photo_path):
                        with open(photo_path, 'rb') as photo_file:
                            await context.bot.send_photo(
                                chat_id=int(client_id),
                                photo=photo_file,
                                caption=f"–§–æ—Ç–æ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"
                            )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ {update.effective_user.first_name} –ø—Ä–∏–±—ã–ª –∫ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞\n"
            f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {ORDER_STATUS_SC_TO_CLIENT}"
        )
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=int(admin_id),
                    text=admin_message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_code = ''.join(random.choices('0123456789', k=4))
        context.user_data['client_confirmation_code'] = confirmation_code
        requests_data[request_id]['confirmation_code'] = confirmation_code
        save_requests(requests_data)
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
        if DEBUG:
            await query.edit_message_text(
                f"üî¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {confirmation_code}\n\n"
                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            if client_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            
            return ENTER_CONFIRMATION_CODE
        
        # –í –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–ª–∏–µ–Ω—Ç—É
        else:
            if client_id and client_data.get('phone'):
                try:
                    phone = client_data['phone'].replace('+', '')
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ –Ω–æ–º–µ—Ä: {phone}")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SMS-–∫–ª–∏–µ–Ω—Ç
                    sms_client = SMSBY(SMS_TOKEN, 'by')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä–æ–ª—è
                    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä–æ–ª—è...")
                    password_objects = sms_client.get_password_objects()
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–∞—Ä–æ–ª—è: {password_objects}")
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è
                    password_object = None
                    if password_objects and 'result' in password_objects and password_objects['result']:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–∞—Ä–æ–ª—è –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                        sorted_objects = sorted(
                            password_objects['result'], 
                            key=lambda x: x['d_create'], 
                            reverse=True
                        )
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è —Ç–∏–ø–∞ 'numbers'
                        password_object = next(
                            (obj for obj in sorted_objects if obj['type_id'] == 'numbers'),
                            None
                        )
                        if not password_object:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ 'numbers', –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                            password_object = sorted_objects[0]
                    
                    if not password_object:
                        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–∞—Ä–æ–ª—è")
                        raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä–æ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                        
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è: {password_object}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ñ–∞-–∏–º–µ–Ω–∞
                    alphanames = sms_client.get_alphanames()
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ñ–∞-–∏–º–µ–Ω–∞: {alphanames}")
                    
                    if alphanames:
                        alphaname_id = next(iter(alphanames.keys()))
                        sms_message = f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: %CODE%"
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {sms_message}")
                        
                        sms_response = sms_client.send_sms_message_with_code(
                            password_object_id=password_object['id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –æ–±—ä–µ–∫—Ç–∞
                            phone=phone,
                            message=sms_message,
                            alphaname_id=alphaname_id
                        )
                        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {sms_response}")
                        
                        if 'code' in sms_response:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
                            requests_data[request_id]['sms_id'] = sms_response.get('sms_id')
                            requests_data[request_id]['confirmation_code'] = sms_response['code']
                            save_requests(requests_data)
                            
                            # –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ–±—ã –æ–Ω –≤–≤—ë–ª –∫–æ–¥ –∏–∑ SMS
                            await context.bot.send_message(
                                chat_id=int(client_id),
                                text=f"üì≤ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:"
                            )
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            await query.edit_message_text(
                                "üì≤ –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                                "–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –≤–≤–µ–¥—ë—Ç –∫–æ–¥ –∏–∑ SMS."
                            )
                            
                            return ENTER_CONFIRMATION_CODE
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: –Ω–µ—Ç –∫–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω")
                        raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {str(e)}")
                    # –ï—Å–ª–∏ SMS –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    await query.edit_message_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: {confirmation_code}\n\n"
                        f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                    )
                    
                    if client_id:
                        await context.bot.send_message(
                            chat_id=int(client_id),
                            text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                        )
                    
                    return ENTER_CONFIRMATION_CODE
            else:
                # –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                await query.edit_message_text(
                    f"üî¢ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {confirmation_code}\n\n"
                    f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                )
                
                if client_id:
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                    )
                
                return ENTER_CONFIRMATION_CODE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END 