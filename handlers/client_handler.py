import os
import json
import logging
from datetime import datetime

from telegram.ext import CallbackContext, ConversationHandler
from telegram import (
    Bot, Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
)
from database import load_delivery_tasks, save_delivery_tasks
from config import (
    ADMIN_IDS, RATING_SERVICE, FEEDBACK_TEXT, ORDER_STATUS_DELIVERY_TO_SC
)
from database import load_requests, load_users, DATA_DIR, save_requests
import logging

logger = logging.getLogger(__name__)


class ClientHandler:
    async def show_client_menu(self, update: Update, context: CallbackContext):
        keyboard = [
            ["–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–ú–æ–∏ –∑–∞—è–≤–∫–∏"],
            ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–î–æ–∫—É–º–µ–Ω—Ç—ã"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=reply_markup)

    async def show_client_profile(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
        user_id = str(update.message.from_user.id)
        users_data = load_users()
        user = users_data.get(user_id, {})
        reply = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        reply += f"–ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        reply += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        if not user.get('name') or not user.get('phone'):
            reply += "\n–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'."
            keyboard = [[KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(reply, reply_markup=reply_markup)
        else:
            await update.message.reply_text(reply)

    async def show_client_requests(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–æ–π"""
        user_id = str(update.effective_user.id)
        requests_data = load_requests()
        user_requests = {
            req_id: req_data for req_id, req_data in requests_data.items()
            if req_data.get('user_id') == user_id
        }
        if not user_requests:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        sorted_requests = sorted(
            user_requests.items(),
            key=lambda x: x[1].get('timestamp', ''),
            reverse=True
        )
        for req_id, req_data in sorted_requests:
            status = req_data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            description = req_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            category = req_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            location = req_data.get('location', {})   
            if isinstance(location, dict):
                address = location.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                if location.get("type") == "coordinates":
                    address = "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è"
            else:
                address = str(location)
            message = (
                f"üîπ <b>–ó–∞—è–≤–∫–∞ #{req_id}</b>\n"
                f"üìã <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            )
            if 'timestamp' in req_data:
                message += f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {req_data['timestamp']}\n"
            keyboard = []
            if status == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É":
                keyboard.append([
                    InlineKeyboardButton(
                        "üó£ –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä",
                        callback_data=f"start_dispute_{req_id}"
                    )
                ])
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

    async def show_documents(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        documents = [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
            "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞"
        ]
        message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–¢–ï–°–¢–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø):\n\n"
        for doc in documents:
            message += f"‚Ä¢ {doc}\n"
        message += "\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        await update.message.reply_text(message)

    async def notify_admin(self, bot: Bot, request_id: int, request_data: dict):
        for admin_id in ADMIN_IDS:
            message = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n"
            message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {request_data[request_id]['description'][:50]}...\n"
            message += f"–°—Ç–∞—Ç—É—Å: {request_data[request_id]['status']}"
            await bot.send_message(chat_id=admin_id, text=message)

    async def request_service_rating(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —É –∫–ª–∏–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        keyboard = [
            [InlineKeyboardButton("üåüüåüüåüüåüüåü", callback_data=f"rate_5_{request_id}")],
            [InlineKeyboardButton("üåüüåüüåüüåü", callback_data=f"rate_4_{request_id}")],
            [InlineKeyboardButton("üåüüåüüåü", callback_data=f"rate_3_{request_id}")],
            [InlineKeyboardButton("üåüüåü", callback_data=f"rate_2_{request_id}")],
            [InlineKeyboardButton("üåü", callback_data=f"rate_1_{request_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return RATING_SERVICE

    async def handle_rating(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        query = update.callback_query
        await query.answer()
        data_parts = query.data.split('_')
        rating = int(data_parts[1])
        request_id = data_parts[2]
        self._save_rating(rating)
        if rating < 4:
            await query.edit_message_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å:"
            )
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return FEEDBACK_TEXT
        else:
            await query.edit_message_text(
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º."
            )
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return ConversationHandler.END

    async def handle_feedback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            feedback_text = update.message.text.strip()
            if not feedback_text:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞."
                )
                return FEEDBACK_TEXT
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤: {feedback_text}")
            self._save_feedback(feedback_text)
            logger.info("–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return FEEDBACK_TEXT

    def _save_rating(self, rating):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ JSON-—Ñ–∞–π–ª"""
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                feedback_data = {'ratings': [], 'reviews': []}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            feedback_data = {'ratings': [], 'reviews': []}
        feedback_data['ratings'].append({
            'rating': rating,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        try:
            with open(feedback_file, 'w', encoding='utf-8') as f:
                json.dump(feedback_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")

    def _save_feedback(self, feedback_text):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ JSON-—Ñ–∞–π–ª"""
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                feedback_data = {'ratings': [], 'reviews': []}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            feedback_data = {'ratings': [], 'reviews': []}
        feedback_data['reviews'].append({
            'id': len(feedback_data['reviews']) + 1,
            'text': feedback_text,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        try:
            with open(feedback_file, 'w', encoding='utf-8') as f:
                json.dump(feedback_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

    async def cancel_operation(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏"""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    async def start_rating_conversation(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ConversationHandler –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        query = update.callback_query
        await query.answer()
        data_parts = query.data.split('_')
        rating = int(data_parts[1])
        request_id = data_parts[2]
        self._save_rating(rating)
        context.user_data['current_rating'] = rating
        context.user_data['current_request_id'] = request_id
        stars = "üåü" * rating
        if rating < 4:
            await query.edit_message_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {stars}!\n\n"
                f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å:"
            )
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return FEEDBACK_TEXT
        else:
            await query.edit_message_text(
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É {stars}!\n\n"
                f"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º."
            )
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return ConversationHandler.END

    async def handle_client_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        await query.answer()
        try:
            action, request_id = query.data.split('_')[1:]
            requests_data = load_requests()
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            request = requests_data[request_id]
            if action == 'confirm':
                request['status'] = ORDER_STATUS_DELIVERY_TO_SC
                request['client_confirmed'] = True
                save_requests(requests_data)
                delivery_id = request.get('assigned_delivery')
                if delivery_id:
                    await context.bot.send_message(
                        chat_id=delivery_id,
                        text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
                await query.edit_message_text("‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.")
            elif action == 'deny':
                if 'deny_count' not in request:
                    request['deny_count'] = 1
                else:
                    request['deny_count'] += 1
                if request['deny_count'] >= 2:
                    request['status'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
                    await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                    for admin_id in ADMIN_IDS:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}. –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
                        )
                else:
                    request['status'] = '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
                    await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
                    keyboard = [[
                        InlineKeyboardButton(
                            "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                            callback_data=f"contact_client_{request_id}"
                        )]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    for admin_id in ADMIN_IDS:
                        pickup_photos = request.get('pickup_photos', [])
                        if pickup_photos:
                            for photo_path in pickup_photos[:1]:
                                if os.path.exists(photo_path):
                                    with open(photo_path, 'rb') as photo_file:
                                        await context.bot.send_photo(
                                            chat_id=admin_id,
                                            photo=photo_file,
                                            caption=f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}",
                                            reply_markup=reply_markup
                                        )
                                break
                        else:
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}",
                                reply_markup=reply_markup
                            )
                save_requests(requests_data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
