import os
from datetime import datetime, timedelta
import json

from telegram.ext import CallbackContext, ConversationHandler
from telegram import (
    Bot, Update, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, InlineKeyboardMarkup,
    InlineKeyboardButton, CallbackQuery
)

from config import (
    ADMIN_IDS, CREATE_REQUEST_DESC, CREATE_REQUEST_PHOTOS,
    CREATE_REQUEST_LOCATION, PHOTOS_DIR, CREATE_REQUEST_CATEGORY,
    CREATE_REQUEST_DATA, CREATE_REQUEST_ADDRESS, CREATE_REQUEST_CONFIRMATION,
    CREATE_REQUEST_COMMENT, RATING_SERVICE, FEEDBACK_TEXT, ORDER_STATUS_DELIVERY_TO_SC
)
from database import load_requests, load_users, save_requests, DATA_DIR, load_delivery_tasks
from utils import notify_admin, get_address_from_coords, format_location_for_display, prepare_location_for_storage
import logging

logger = logging.getLogger(__name__)


class ClientHandler:
    category = [  # TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        '–†–µ–º–æ–Ω—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–†–µ–º–æ–Ω—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤',
        '–†–µ–º–æ–Ω—Ç –æ–±—É–≤–∏', '–†–µ–º–æ–Ω—Ç –æ–¥–µ–∂–¥—ã', '–†–µ–º–æ–Ω—Ç –º–µ–±–µ–ª–∏',
        '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏', '–ü—Ä–æ—á–µ–µ'
    ]

    async def create_request(self, update: Update, context: CallbackContext):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
        user_id = str(update.effective_user.id)
        users_data = load_users()
        user = users_data.get(user_id, {})
        if user.get('blocked'):
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            )
            return ConversationHandler.END
        keyboard = [
            [InlineKeyboardButton(
                self.category[i], callback_data=f"category_{i}")
                ] for i in range(len(self.category))]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
        return CREATE_REQUEST_CATEGORY

    async def handle_category(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        category_index = int(query.data.split('_')[1])
        context.user_data["category"] = self.category[category_index]
        await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {context.user_data['category']}")
        await query.message.reply_text("–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
        return CREATE_REQUEST_DESC

    async def handle_request_desc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."""
        context.user_data["description"] = update.message.text
        await update.message.reply_text(
            "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done"
        )
        context.user_data["photos"] = []
        return CREATE_REQUEST_PHOTOS

    async def handle_request_photos(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞—è–≤–∫–∏."""
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        file_name = f"{update.effective_user.id}_{len(context.user_data['photos'])}.jpg"
        file_path = os.path.join(PHOTOS_DIR, file_name)
        await file.download_to_drive(file_path)
        context.user_data["photos"].append(file_path)
        return CREATE_REQUEST_PHOTOS

    async def done_photos(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞—è–≤–∫–∏"""
        keyboard = [
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é':",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_LOCATION

    async def handle_request_location(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
        try:
            if update.message.location:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                latitude = update.message.location.latitude
                longitude = update.message.location.longitude
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                address = get_address_from_coords(latitude, longitude)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                context.user_data["location"] = {
                    "latitude": latitude,
                    "longitude": longitude,
                    "address": address,
                    "type": "coordinates"
                }
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
                return await self.show_date_buttons(update.message)
                
            elif update.message.text == "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é":
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
                    reply_markup=ReplyKeyboardRemove()
                )
                return CREATE_REQUEST_ADDRESS
                
        except Exception as e:
            logger.error(f"Error handling location: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_LOCATION

    async def show_date_buttons(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏"""
        keyboard = []
        current_date = datetime.now()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π
        for i in range(7):
            date = current_date + timedelta(days=i)
            date_display = date.strftime("%d.%m.%Y")  # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            date_value = date.strftime("%d.%m.%Y")    # –§–æ—Ä–º–∞—Ç –¥–ª—è callback_data
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÖ {date_display}",
                    callback_data=f"select_date_{date_value}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_DATA

    async def handle_request_address(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é."""
        try:
            address = update.message.text.strip()
            if not address:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
                return CREATE_REQUEST_ADDRESS
                
            context.user_data["location"] = {
                "address": address,
                "type": "manual"
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
            return await self.show_date_buttons(update.message)
            
        except Exception as e:
            logger.error(f"Error handling address: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_ADDRESS

    async def handle_date_selection(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç "–¥–¥.–º–º.–≥–≥–≥–≥")
        selected_date = query.data.split('_', 2)[2]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥" –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data["selected_date"] = selected_date
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        keyboard = []
        current_hour = 9  # –ù–∞—á–∏–Ω–∞–µ–º —Å 9 —É—Ç—Ä–∞
        while current_hour <= 20:  # –î–æ 20:00
            time_str = f"{current_hour:02d}:00"
            keyboard.append([
                InlineKeyboardButton(
                    f"üïê {time_str}",
                    callback_data=f"select_time_{time_str}"
                )
            ])
            current_hour += 1
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_DATA

    async def handle_time_selection(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç "–ß–ß:–ú–ú")
        selected_time = query.data.split('_', 2)[2]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç "–¥–¥.–º–º.–≥–≥–≥–≥")
        selected_date = context.user_data.get("selected_date")
        
        if not selected_date:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            return ConversationHandler.END
        
        try:
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            date_obj = datetime.strptime(selected_date, "%d.%m.%Y")
            time_obj = datetime.strptime(selected_time, "%H:%M")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            final_datetime = date_obj.replace(
                hour=time_obj.hour,
                minute=time_obj.minute
            )
            context.user_data["desired_date"] = final_datetime
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if "selected_date" in context.user_data:
                del context.user_data["selected_date"]
            
            await query.message.delete()
            # –ü–µ—Ä–µ–¥–∞–µ–º query –≤–º–µ—Å—Ç–æ query.message
            return await self.show_confirmation(query, context)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_DATA

    async def show_confirmation(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
        try:
            message = update.message if hasattr(update, 'message') else update.callback_query.message
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            category = context.user_data.get("category", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            description = context.user_data.get("description", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            desired_date = context.user_data.get("desired_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            location = context.user_data.get("location", {})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            location_str = format_location_for_display(location)
            
            summary = (
                f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
                f"üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üîπ –ê–¥—Ä–µ—Å: {location_str}\n"
                f"üîπ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {desired_date.strftime('%H:%M %d.%m.%Y') if isinstance(desired_date, datetime) else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
            )
            
            keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if isinstance(update, CallbackQuery):
                try:
                    await update.edit_message_text(summary, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error editing message: {e}")
                    await update.message.reply_text(summary, reply_markup=reply_markup)
            else:
                await message.reply_text(summary, reply_markup=reply_markup)
            
            return CREATE_REQUEST_COMMENT
            
        except Exception as e:
            logger.error(f"Error in show_confirmation: {e}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            return ConversationHandler.END

    async def skip_comment(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        query = update.callback_query
        await query.answer()
        context.user_data["comment"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        location = context.user_data.get("location", {})
        if isinstance(location, dict):
            if location.get("type") == "coordinates":
                address = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                location_str = f"{address} (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.get('latitude')}, {location.get('longitude')})"
            else:
                location_str = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
        else:
            location_str = str(location)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        desired_date = context.user_data.get("desired_date")
        date_str = desired_date.strftime('%H:%M %d.%m.%Y') if isinstance(desired_date, datetime) else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        summary = (
            "üìù –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ê–¥—Ä–µ—Å: {location_str}\n"
            f"–î–∞—Ç–∞: {date_str}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart_request")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(summary, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error editing message in skip_comment: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(summary, reply_markup=reply_markup)
        
        return CREATE_REQUEST_CONFIRMATION

    async def handle_request_comment(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            context.user_data["comment"] = update.message.text
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            location = context.user_data.get("location", {})
            if isinstance(location, dict):
                if location.get("type") == "coordinates":
                    address = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                    location_str = f"{address} (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.get('latitude')}, {location.get('longitude')})"
                else:
                    location_str = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            else:
                location_str = str(location)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            desired_date = context.user_data.get("desired_date")
            date_str = desired_date.strftime('%H:%M %d.%m.%Y') if isinstance(desired_date, datetime) else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            summary = (
                "üìù –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–ê–¥—Ä–µ—Å: {location_str}\n"
                f"–î–∞—Ç–∞: {date_str}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request")],
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart_request")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(summary, reply_markup=reply_markup)
            return CREATE_REQUEST_CONFIRMATION
            
        except Exception as e:
            logger.error(f"Error in handle_request_comment: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_COMMENT

    async def handle_request_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏."""
        query = update.callback_query
        await query.answer()
        if query.data == "confirm_request": 
            return await self.create_request_final(query, context)
        elif query.data == "restart_request":
            await query.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
            return await self.create_request(update, context)

    async def create_request_final(self, query: CallbackQuery, context: CallbackContext):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏."""
        try:
            requests_data = load_requests()
            request_id = str(len(requests_data) + 1)
            user_id = str(query.from_user.id)
            users_data = load_users()
            user_name = users_data.get(user_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            location = context.user_data.get("location", {})
            location_display = format_location_for_display(location)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            location_link = ""
            if isinstance(location, dict) and location.get("type") == "coordinates":
                lat = location.get("latitude")
                lon = location.get("longitude")
                if lat and lon:
                    location_link = f"https://yandex.ru/maps/?pt={lon},{lat}&z=16&l=map"
            
            desired_date = context.user_data.get("desired_date")
            desired_date_str = desired_date.strftime("%H:%M %d.%m.%Y") if desired_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
            requests_data[request_id] = {
                "id": request_id,
                "user_id": user_id,
                "user_name": user_name,
                "category": context.user_data.get("category"),
                "description": context.user_data.get("description"),
                "photos": context.user_data.get("photos", []),
                "location": prepare_location_for_storage(location),
                "location_display": location_display,
                "location_link": location_link,
                "status": "–ù–æ–≤–∞—è",
                "assigned_sc": None,
                "desired_date": desired_date_str,
                "comment": context.user_data.get("comment", "")
            }
            
            save_requests(requests_data)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.message.reply_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —Å–æ–∑–¥–∞–Ω–∞\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.", 
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await notify_admin(context.bot, request_id, requests_data, ADMIN_IDS)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                for photo_path in context.user_data.get("photos", []):
                    try:
                        with open(photo_path, 'rb') as photo:
                            await context.bot.send_photo(
                                chat_id=admin_id, 
                                photo=photo,
                                caption=f"–§–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                            )
                    except Exception as e:
                        logger.error(f"Error sending photo to admin {admin_id}: {e}")
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error in create_request_final: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return ConversationHandler.END

    async def cancel_request(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    async def show_client_profile(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
        user_id = str(update.message.from_user.id)
        users_data = load_users()
        user = users_data.get(user_id, {})
        reply = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        reply += f"–ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        reply += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        if not user.get('name') or not user.get('phone'):
            reply += "\n–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'."
            keyboard = [[KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(reply, reply_markup=reply_markup)
        else:
            await update.message.reply_text(reply)

    async def show_client_requests(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–æ–π"""
        user_id = str(update.effective_user.id)
        requests_data = load_requests()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_requests = {
            req_id: req_data for req_id, req_data in requests_data.items()
            if req_data.get('user_id') == user_id
        }
        
        if not user_requests:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sorted_requests = sorted(
            user_requests.items(),
            key=lambda x: x[1].get('timestamp', ''),
            reverse=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for req_id, req_data in sorted_requests:
            status = req_data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            description = req_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            category = req_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            location = req_data.get('location', {})
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º location
            if isinstance(location, dict):
                address = location.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                if location.get("type") == "coordinates":
                    address = "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è"
            else:
                address = str(location)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üîπ <b>–ó–∞—è–≤–∫–∞ #{req_id}</b>\n"
                f"üìã <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'timestamp' in req_data:
                message += f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {req_data['timestamp']}\n"
            
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä" –¥–ª—è –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
            if status == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É":
                keyboard.append([
                    InlineKeyboardButton(
                        "üó£ –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä",
                        callback_data=f"start_dispute_{req_id}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

    async def show_documents(self, update: Update, context: CallbackContext):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        TODO: –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        """
        documents = [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
            "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞"
        ]
        message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–¢–ï–°–¢–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø):\n\n"
        for doc in documents:
            message += f"‚Ä¢ {doc}\n"
        message += "\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        await update.message.reply_text(message)

    async def notify_admin(self, bot: Bot, request_id: int, request_data: dict):
        for admin_id in ADMIN_IDS:
            message = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n"
            message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {request_data[request_id]['description'][:50]}...\n"
            message += f"–°—Ç–∞—Ç—É—Å: {request_data[request_id]['status']}"
            await bot.send_message(chat_id=admin_id, text=message)

    async def request_service_rating(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —É –∫–ª–∏–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        keyboard = [
            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_5_{request_id}")],
            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_4_{request_id}")],
            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data=f"rate_3_{request_id}")],
            [InlineKeyboardButton("‚≠ê‚≠ê", callback_data=f"rate_2_{request_id}")],
            [InlineKeyboardButton("‚≠ê", callback_data=f"rate_1_{request_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return RATING_SERVICE

    async def handle_rating(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        query = update.callback_query
        await query.answer()
        data_parts = query.data.split('_')
        rating = int(data_parts[1])
        request_id = data_parts[2]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ñ–∞–π–ª
        self._save_rating(rating)
        # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω—å—à–µ 4, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if rating < 4:
            await query.edit_message_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å:"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return FEEDBACK_TEXT
        else:
            # –î–ª—è —Ö–æ—Ä–æ—à–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø—Ä–æ—Å—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º
            await query.edit_message_text(
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º."
            )
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return ConversationHandler.END

    async def handle_feedback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            feedback_text = update.message.text.strip()
            if not feedback_text:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞."
                )
                return FEEDBACK_TEXT
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤: {feedback_text}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
            self._save_feedback(feedback_text)
            logger.info("–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."
            )
            # –ó–∞–≤–µ—Ä—à–∞–µ–º ConversationHandler
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return FEEDBACK_TEXT

    def _save_rating(self, rating): # TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤ database.py
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ JSON-—Ñ–∞–π–ª"""
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                feedback_data = {'ratings': [], 'reviews': []}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            feedback_data = {'ratings': [], 'reviews': []}
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        feedback_data['ratings'].append({
            'rating': rating,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            with open(feedback_file, 'w', encoding='utf-8') as f:
                json.dump(feedback_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")

    def _save_feedback(self, feedback_text): # TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤ database.py
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ JSON-—Ñ–∞–π–ª"""
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                feedback_data = {'ratings': [], 'reviews': []}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            feedback_data = {'ratings': [], 'reviews': []}
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
        feedback_data['reviews'].append({
            'id': len(feedback_data['reviews']) + 1,
            'text': feedback_text,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            with open(feedback_file, 'w', encoding='utf-8') as f:
                json.dump(feedback_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

    async def cancel_operation(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏"""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    async def start_rating_conversation(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ConversationHandler –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
        query = update.callback_query
        await query.answer()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        data_parts = query.data.split('_')
        rating = int(data_parts[1])
        request_id = data_parts[2]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ñ–∞–π–ª
        self._save_rating(rating)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        context.user_data['current_rating'] = rating
        context.user_data['current_request_id'] = request_id
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∑–≤–µ–∑–¥
        stars = "‚≠ê" * rating
        # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω—å—à–µ 4, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if rating < 4:
            await query.edit_message_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {stars}!\n\n"
                f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å:"
            )
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return FEEDBACK_TEXT
        else:
            # –î–ª—è —Ö–æ—Ä–æ—à–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø—Ä–æ—Å—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º
            await query.edit_message_text(
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É {stars}!\n\n"
                f"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º."
            )
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return ConversationHandler.END

    async def handle_client_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            action, request_id = query.data.split('_')[1:]
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            users_data = load_users()
            
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            request = requests_data[request_id]
            
            if action == 'confirm':
                # –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ
                request['status'] = ORDER_STATUS_DELIVERY_TO_SC
                request['client_confirmed'] = True
                save_requests(requests_data)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                delivery_id = request.get('assigned_delivery')
                if delivery_id:
                    await context.bot.send_message(
                        chat_id=delivery_id,
                        text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
                
                await query.edit_message_text("‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.")
                
            elif action == 'deny':
                # –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
                if 'deny_count' not in request:
                    request['deny_count'] = 1
                else:
                    request['deny_count'] += 1
                    
                if request['deny_count'] >= 2:
                    # –ü—Ä–∏ –≤—Ç–æ—Ä–æ–º –æ—Ç–∫–∞–∑–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
                    request['status'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
                    await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    for admin_id in ADMIN_IDS:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}. –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
                        )
                else:
                    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    request['status'] = '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
                    await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º"
                    keyboard = [[
                        InlineKeyboardButton(
                            "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                            callback_data=f"contact_client_{request_id}"
                        )]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    for admin_id in ADMIN_IDS:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                        pickup_photos = request.get('pickup_photos', [])
                        if pickup_photos:
                            for photo_path in pickup_photos[:1]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                                if os.path.exists(photo_path):
                                    with open(photo_path, 'rb') as photo_file:
                                        await context.bot.send_photo(
                                            chat_id=admin_id,
                                            photo=photo_file,
                                            caption=f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}",
                                            reply_markup=reply_markup
                                        )
                                break
                        else:
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}",
                                reply_markup=reply_markup
                            )
                
                save_requests(requests_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
