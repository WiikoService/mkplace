import os
from datetime import datetime, timedelta
import json

from telegram.ext import CallbackContext, ConversationHandler
from telegram import (
    Bot, Update, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, InlineKeyboardMarkup,
    InlineKeyboardButton, CallbackQuery
)

from config import (
    ADMIN_IDS, CREATE_REQUEST_DESC, CREATE_REQUEST_PHOTOS,
    CREATE_REQUEST_LOCATION, PHOTOS_DIR, CREATE_REQUEST_CATEGORY,
    CREATE_REQUEST_DATA, CREATE_REQUEST_ADDRESS, CREATE_REQUEST_CONFIRMATION,
    CREATE_REQUEST_COMMENT, RATING_SERVICE, FEEDBACK_TEXT
)
from database import load_requests, load_users, save_requests, DATA_DIR
from utils import notify_admin
import logging

logger = logging.getLogger(__name__)


class ClientHandler:

    category = [  # TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        '–†–µ–º–æ–Ω—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–†–µ–º–æ–Ω—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤',
        '–†–µ–º–æ–Ω—Ç –æ–±—É–≤–∏', '–†–µ–º–æ–Ω—Ç –æ–¥–µ–∂–¥—ã', '–†–µ–º–æ–Ω—Ç –º–µ–±–µ–ª–∏',
        '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏', '–ü—Ä–æ—á–µ–µ'
    ]

    async def create_request(self, update: Update, context: CallbackContext):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
        user_id = str(update.effective_user.id)
        users_data = load_users()
        user = users_data.get(user_id, {})
        if user.get('blocked'):
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            )
            return ConversationHandler.END
        keyboard = [
            [InlineKeyboardButton(
                self.category[i], callback_data=f"category_{i}")
                ] for i in range(len(self.category))]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
        return CREATE_REQUEST_CATEGORY

    async def handle_category(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        category_index = int(query.data.split('_')[1])
        context.user_data["category"] = self.category[category_index]
        await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {context.user_data['category']}")
        await query.message.reply_text("–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
        return CREATE_REQUEST_DESC

    async def handle_request_desc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."""
        context.user_data["description"] = update.message.text
        await update.message.reply_text(
            "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done"
        )
        context.user_data["photos"] = []
        return CREATE_REQUEST_PHOTOS

    async def handle_request_photos(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞—è–≤–∫–∏."""
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        file_name = f"{update.effective_user.id}_{len(context.user_data['photos'])}.jpg"
        file_path = os.path.join(PHOTOS_DIR, file_name)
        await file.download_to_drive(file_path)
        context.user_data["photos"].append(file_path)
        return CREATE_REQUEST_PHOTOS

    async def done_photos(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞—è–≤–∫–∏"""
        keyboard = [
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é':",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_LOCATION

    async def handle_request_location(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
        if update.message.location:
            context.user_data["location"] = {
                "latitude": update.message.location.latitude,
                "longitude": update.message.location.longitude,
                "type": "coordinates"
            }
            await update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00 01.03.2025:"
            )
            return CREATE_REQUEST_DATA
        elif update.message.text == "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
            return CREATE_REQUEST_ADDRESS
        else:
            context.user_data["location"] = {
                "address": update.message.text,
                "type": "manual"
            }
            await update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00 01.03.2025:"
            )
            return CREATE_REQUEST_DATA

    async def handle_request_address(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é."""
        context.user_data["location"] = update.message.text
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é
        keyboard = []
        current_date = datetime.now()
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π
        for i in range(7):
            date = current_date + timedelta(days=i)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            date_display = date.strftime("%d.%m.%Y")
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è callback_data
            date_value = date.strftime("%H:%M %d.%m.%Y")
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÖ {date_display}",
                    callback_data=f"select_date_{date_value}"
                )
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_DATA

    async def handle_date_selection(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ callback_data –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        selected_date_str = query.data.split('_', 2)[2]
        context.user_data["temp_date"] = selected_date_str
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        keyboard = []
        current_hour = 9  # –ù–∞—á–∏–Ω–∞–µ–º —Å 9 —É—Ç—Ä–∞
        while current_hour <= 20:  # –î–æ 20:00
            time_str = f"{current_hour:02d}:00"
            keyboard.append([
                InlineKeyboardButton(
                    f"üïê {time_str}",
                    callback_data=f"select_time_{time_str}"
                )
            ])
            current_hour += 1
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_DATA

    async def handle_time_selection(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        query = update.callback_query
        await query.answer()
        selected_time = query.data.split('_', 2)[2]
        temp_date = context.user_data.get("temp_date")
        try:
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            date_obj = datetime.strptime(temp_date, "%H:%M %d.%m.%Y")
            time_obj = datetime.strptime(selected_time, "%H:%M")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            final_datetime = date_obj.replace(
                hour=time_obj.hour,
                minute=time_obj.minute
            )
            context.user_data["desired_date"] = final_datetime
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if "temp_date" in context.user_data:
                del context.user_data["temp_date"]
            await query.message.delete()
            return await self.show_confirmation(query, context)
        except ValueError as e:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_DATA

    async def show_confirmation(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
        category = context.user_data.get("category", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        description = context.user_data.get("description", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        location = context.user_data.get("location", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        desired_date = context.user_data.get("desired_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        if isinstance(location, dict):
            if location.get("type") == "coordinates":
                location_str = f"–®–∏—Ä–æ—Ç–∞: {location.get('latitude', 'N/A')}, –î–æ–ª–≥–æ—Ç–∞: {location.get('longitude', 'N/A')}"
            else:
                location_str = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
        else:
            location_str = location
        summary = (
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–ê–¥—Ä–µ—Å: {location_str}\n"
            f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {desired_date.strftime('%H:%M %d.%m.%Y') if isinstance(desired_date, datetime) else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –¥–æ—Å—Ç–∞–≤—â–∏–∫—É?) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
        )
        keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(summary, reply_markup=reply_markup)
        return CREATE_REQUEST_COMMENT

    async def skip_comment(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        query = update.callback_query
        await query.answer()
        context.user_data["comment"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        summary = (
            "üìù –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('category')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('description')}\n"
            f"–ê–¥—Ä–µ—Å: {context.user_data.get('location')}\n"
            f"–î–∞—Ç–∞: {context.user_data.get('desired_date').strftime('%H:%M %d.%m.%Y')}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data.get('comment')}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart_request")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(summary, reply_markup=reply_markup)
        return CREATE_REQUEST_CONFIRMATION

    async def handle_request_comment(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        context.user_data["comment"] = update.message.text
        summary = (
            "üìù –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('category')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('description')}\n"
            f"–ê–¥—Ä–µ—Å: {context.user_data.get('location')}\n"
            f"–î–∞—Ç–∞: {context.user_data.get('desired_date').strftime('%H:%M %d.%m.%Y')}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data.get('comment')}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart_request")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(summary, reply_markup=reply_markup)
        return CREATE_REQUEST_CONFIRMATION

    async def handle_request_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏."""
        query = update.callback_query
        await query.answer()
        if query.data == "confirm_request": 
            return await self.create_request_final(query, context)
        elif query.data == "restart_request":
            await query.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
            return await self.create_request(update, context)

    async def create_request_final(self, query: CallbackQuery, context: CallbackContext):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏."""
        requests_data = load_requests()
        request_id = str(len(requests_data) + 1)
        user_id = str(query.from_user.id)
        users_data = load_users()
        user_name = users_data.get(user_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        location = context.user_data["location"]
        if isinstance(location, dict):
            if location.get("type") == "coordinates":
                latitude = location["latitude"]
                longitude = location["longitude"]
                location_display = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}"
                location_link = f"https://yandex.ru/maps?whatshere%5Bpoint%5D={longitude}%2C{latitude}&"
            else:
                location_display = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
                location_link = "–ê–¥—Ä–µ—Å –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é"
        else:
            location_display = location
            location_link = "–ê–¥—Ä–µ—Å –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é"
        desired_date = context.user_data.get("desired_date")
        desired_date_str = desired_date.strftime("%H:%M %d.%m.%Y")
        requests_data[request_id] = {
            "id": request_id,
            "user_id": user_id,
            "user_name": user_name,
            "description": context.user_data["description"],
            "photos": context.user_data["photos"],
            "location": location,
            "location_display": location_display,
            "location_link": location_link,
            "status": "–ù–æ–≤–∞—è",
            "assigned_sc": None,
            "desired_date": desired_date_str,
            "comment": context.user_data.get("comment", "")
        }
        save_requests(requests_data)
        await query.message.reply_text(
            f"–ó–∞—è–≤–∫–∞ #{request_id} —Å–æ–∑–¥–∞–Ω–∞.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        await notify_admin(context.bot, request_id, requests_data, ADMIN_IDS)
        for admin_id in ADMIN_IDS:
            for photo_path in context.user_data["photos"]:
                with open(photo_path, 'rb') as photo:
                    await context.bot.send_photo(chat_id=admin_id, photo=photo)
        return ConversationHandler.END

    async def cancel_request(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    async def show_client_profile(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
        user_id = str(update.message.from_user.id)
        users_data = load_users()
        user = users_data.get(user_id, {})
        reply = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        reply += f"–ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        reply += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        if not user.get('name') or not user.get('phone'):
            reply += "\n–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'."
            keyboard = [[KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(reply, reply_markup=reply_markup)
        else:
            await update.message.reply_text(reply)

    async def show_client_requests(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞."""
        user_id = str(update.effective_user.id)
        requests_data = load_requests()
        user_requests = [req for req in requests_data.values() if req["user_id"] == user_id]
        if not user_requests:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        else:
            reply = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
            for req in user_requests:
                reply += f"–ó–∞—è–≤–∫–∞ #{req['id']}\n"
                reply += f"–°—Ç–∞—Ç—É—Å: {req['status']}\n"
                reply += f"–û–ø–∏—Å–∞–Ω–∏–µ: {req['description'][:50]}...\n"
                location = req.get('location', {})
                if isinstance(location, dict):
                    if location.get("type") == "coordinates":
                        reply += f"–ê–¥—Ä–µ—Å: {location['latitude']}, {location['longitude']}\n"
                    else:
                        reply += f"–ê–¥—Ä–µ—Å: {location.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                else:
                    reply += f"–ê–¥—Ä–µ—Å: {location}\n"
                reply += f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {req.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            await update.message.reply_text(reply)

    async def show_documents(self, update: Update, context: CallbackContext):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        TODO: –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        """
        documents = [
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
            "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞"
        ]
        message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n"
        for doc in documents:
            message += f"‚Ä¢ {doc}\n"
        message += "\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        await update.message.reply_text(message)

    async def notify_admin(self, bot: Bot, request_id: int, request_data: dict):
        for admin_id in ADMIN_IDS:
            message = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n"
            message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {request_data[request_id]['description'][:50]}...\n"
            message += f"–°—Ç–∞—Ç—É—Å: {request_data[request_id]['status']}"
            await bot.send_message(chat_id=admin_id, text=message)

    async def request_service_rating(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —É –∫–ª–∏–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        keyboard = [
            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê - –û—Ç–ª–∏—á–Ω–æ", callback_data=f"rate_5_{request_id}")],
            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê - –•–æ—Ä–æ—à–æ", callback_data=f"rate_4_{request_id}")],
            [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê - –ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data=f"rate_3_{request_id}")],
            [InlineKeyboardButton("‚≠ê‚≠ê - –ü–ª–æ—Ö–æ", callback_data=f"rate_2_{request_id}")],
            [InlineKeyboardButton("‚≠ê - –û—á–µ–Ω—å –ø–ª–æ—Ö–æ", callback_data=f"rate_1_{request_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return RATING_SERVICE

    async def handle_rating(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        query = update.callback_query
        await query.answer()
        data_parts = query.data.split('_')
        rating = int(data_parts[1])
        request_id = data_parts[2]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ñ–∞–π–ª
        self._save_rating(rating)
        # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω—å—à–µ 4, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if rating < 4:
            await query.edit_message_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å:"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return FEEDBACK_TEXT
        else:
            # –î–ª—è —Ö–æ—Ä–æ—à–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø—Ä–æ—Å—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º
            await query.edit_message_text(
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É!\n\n"
                f"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º."
            )
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return ConversationHandler.END

    async def handle_feedback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        feedback_text = update.message.text.strip()
        # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤: {feedback_text}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        self._save_feedback(feedback_text)
        logger.info("–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."
        )
        return ConversationHandler.END

    def _save_rating(self, rating):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ JSON-—Ñ–∞–π–ª"""
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                feedback_data = {'ratings': [], 'reviews': []}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            feedback_data = {'ratings': [], 'reviews': []}
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        feedback_data['ratings'].append({
            'rating': rating,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            with open(feedback_file, 'w', encoding='utf-8') as f:
                json.dump(feedback_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")

    def _save_feedback(self, feedback_text):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ JSON-—Ñ–∞–π–ª"""
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                feedback_data = {'ratings': [], 'reviews': []}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            feedback_data = {'ratings': [], 'reviews': []}
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
        feedback_data['reviews'].append({
            'id': len(feedback_data['reviews']) + 1,
            'text': feedback_text,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            with open(feedback_file, 'w', encoding='utf-8') as f:
                json.dump(feedback_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")

    async def cancel_operation(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏"""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    async def start_rating_conversation(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ConversationHandler –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é"""
        query = update.callback_query
        await query.answer()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        data_parts = query.data.split('_')
        rating = int(data_parts[1])
        request_id = data_parts[2]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ñ–∞–π–ª
        self._save_rating(rating)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        context.user_data['current_rating'] = rating
        context.user_data['current_request_id'] = request_id
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∑–≤–µ–∑–¥
        stars = "‚≠ê" * rating
        # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω—å—à–µ 4, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if rating < 4:
            await query.edit_message_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {stars}!\n\n"
                f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å:"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞
            # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π ConversationHandler
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é
            return FEEDBACK_TEXT
        else:
            # –î–ª—è —Ö–æ—Ä–æ—à–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø—Ä–æ—Å—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º
            await query.edit_message_text(
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É {stars}!\n\n"
                f"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º."
            )
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            return ConversationHandler.END
