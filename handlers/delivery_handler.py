import json
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import CallbackContext, ConversationHandler
from config import (
    ADMIN_IDS, ENTER_NAME, ENTER_PHONE, DELIVERY_MENU,
    ENTER_CONFIRMATION_CODE, SMS_TOKEN,
    ORDER_STATUS_DELIVERY_TO_SC, ORDER_STATUS_DELIVERY_TO_CLIENT,
    ORDER_STATUS_CLIENT_REJECTED, ORDER_STATUS_WAITING_SC, CREATE_REQUEST_PHOTOS,
    DATA_DIR, USERS_JSON, REQUESTS_JSON, DELIVERY_TASKS_JSON
)
from handlers.base_handler import BaseHandler
from database import load_delivery_tasks, load_users, load_requests, save_delivery_tasks, save_requests, save_users, load_service_centers
from utils import notify_client
import logging
import random
import requests
from telegram.error import BadRequest

from smsby import SMSBY

# TODO: —Å–¥–µ–ª–∞—Ç—å —Å–º—Å - –æ—Ç–¥–µ–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º (–Ω–µ —Å—Ä–æ—á–Ω–æ) –ò–õ–ò —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º

logger = logging.getLogger(__name__)


class DeliveryHandler(BaseHandler):

    async def show_delivery_menu(self, update: Update, context: CallbackContext):
        keyboard = [
            ["–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", "–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è"],
            ["–ü–µ—Ä–µ–¥–∞—Ç—å –≤ –°–¶", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=reply_markup)

    async def show_delivery_profile(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        user_id = str(update.effective_user.id)
        users_data = load_users()
        user = users_data.get(user_id, {})
        if not user.get('name'):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            return ENTER_NAME
        if not user.get('phone'):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            return ENTER_PHONE
        reply = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞:\n\n"
        reply += f"–ò–º—è: {user['name']}\n"
        reply += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
        reply += f"–†–æ–ª—å: {user.get('role', '–î–æ—Å—Ç–∞–≤—â–∏–∫')}\n"
        await update.message.reply_text(reply)
        return ConversationHandler.END

    async def enter_name(self, update: Update, context: CallbackContext):
        """–í–≤–æ–¥ –∏–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        user_id = str(update.effective_user.id)
        name = update.message.text
        users_data = load_users()
        if user_id not in users_data:
            users_data[user_id] = {}
        users_data[user_id]['name'] = name
        save_users(users_data)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return ENTER_PHONE

    async def enter_phone(self, update: Update, context: CallbackContext):
        """–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        user_id = str(update.effective_user.id)
        phone = update.message.text
        users_data = load_users()
        users_data[user_id]['phone'] = phone
        save_users(users_data)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return await self.show_delivery_profile(update, context)

    async def show_delivery_tasks(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        try:
            delivery_id = str(update.effective_user.id)
            delivery_tasks = load_delivery_tasks()
            my_tasks = {
                task_id: task for task_id, task in delivery_tasks.items()
                if isinstance(task, dict) and 
                str(task.get('assigned_delivery_id')) == delivery_id
            }
            if not my_tasks:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
                return
            for task_id, task in my_tasks.items():
                status = task.get('status', '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                request_id = task.get('request_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
                sc_name = task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
                keyboard = []
                if status == ORDER_STATUS_DELIVERY_TO_CLIENT:
                    keyboard.append([InlineKeyboardButton(
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", 
                        callback_data=f"confirm_pickup_{request_id}"
                    )])
                elif status == ORDER_STATUS_DELIVERY_TO_SC:
                    keyboard.append([InlineKeyboardButton(
                        "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –°–¶", 
                        callback_data=f"delivered_to_sc_{request_id}"
                    )])
                message = (
                    f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {sc_name}\n"
                    f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {task.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                )
                if keyboard:
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(message, reply_markup=reply_markup)
                else:
                    await update.message.reply_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

    async def handle_task_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        query = update.callback_query
        await query.answer()
        task_id = query.data.split('_')[-1]
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö
        task_details = f"–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ ‚Ññ{task_id}\n..."  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await query.edit_message_text(text=task_details)

    async def accept_delivery(self, update: Update, context: CallbackContext):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º."""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        requests_data = load_requests()
        delivery_tasks = load_delivery_tasks()
        if request_id in requests_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞
            if requests_data[request_id].get('assigned_delivery'):
                await query.edit_message_text("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            requests_data[request_id]['assigned_delivery'] = str(query.from_user.id)
            requests_data[request_id]['status'] = '–ü—Ä–∏–Ω—è—Ç–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º'
            save_requests(requests_data)
            for task in delivery_tasks:
                if isinstance(task, dict) and task.get('request_id') == request_id:
                    task['status'] = '–î–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É'
                    task['assigned_delivery_id'] = str(query.from_user.id)
                    break
            save_delivery_tasks(delivery_tasks)
            latitude = requests_data[request_id].get('latitude')
            longitude = requests_data[request_id].get('longitude')
            keyboard = [
                [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data=f"confirm_pickup_{request_id}")],
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", url=f"https://yandex.ru/maps?rtext=~{latitude}%2C{longitude}&rtt=auto")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{request_id}. –°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É\n"
            if latitude and longitude:
                message_text += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞: {latitude}, {longitude}"
            else:
                message_text += "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            await query.edit_message_text(message_text, reply_markup=reply_markup)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_id = requests_data[request_id].get('user_id')
            if client_id:
                await context.bot.send_message(
                    chat_id=client_id,
                    text=f"–î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ{request_id} –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º."
                )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            user = load_users().get(str(query.from_user.id), {})
            delivery_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç–∞–≤—â–∏–∫')
            delivery_phone = user.get('phone', '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"–ó–∞—è–≤–∫–∞ #{request_id}\n"
                f"–°—Ç–∞—Ç—É—Å: –ü—Ä–∏–Ω—è—Ç–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º\n"
                f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: +{delivery_phone}"
            )

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                await query.edit_message_text(
                    text=message_text,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    raise e

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_message = (
                f"–ó–∞–∫–∞–∑ #{request_id} –ø—Ä–∏–Ω—è—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.\n"
                f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_name} - +{delivery_phone}\n"
                f"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É"
            )
            for admin_id in ADMIN_IDS:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    parse_mode='Markdown'
                )
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –°–¶
    async def handle_confirm_pickup(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è(–æ—Ç–∫–∞–∑–∞) –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å –∫–ª–∏–µ–Ω—Ç—É —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        TODO: —Å–¥–µ–ª–∞—Ç—å —Å–º—Å - –æ—Ç–¥–µ–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º (–Ω–µ —Å—Ä–æ—á–Ω–æ)
        """
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        requests_data = load_requests()
        delivery_tasks = load_delivery_tasks()
        users_data = load_users()
        if request_id in requests_data:
            requests_data[request_id]['status'] = '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞'
            # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            for task in delivery_tasks:
                if isinstance(task, dict) and task.get('request_id') == request_id:
                    task['status'] = '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞'
                    break
            save_delivery_tasks(delivery_tasks)
            client_id = requests_data[request_id].get('user_id')
            client_data = users_data.get(str(client_id), {})
            if client_id:
                try:
                    keyboard = [
                        [InlineKeyboardButton("–î–∞, –∑–∞–±—Ä–∞–ª", callback_data=f"client_confirm_{request_id}")],
                        [InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –∑–∞–±—Ä–∞–ª", callback_data=f"client_deny_{request_id}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=client_id,
                        text=f"–î–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –∑–∞–±—Ä–∞–ª –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{request_id}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
                        reply_markup=reply_markup
                    )
                    """
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å –∫–æ–¥–æ–º
                    if 'phone' in client_data:
                        try:
                            phone = client_data['phone'].replace('+', '')
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ –Ω–æ–º–µ—Ä: {phone}")
                            sms_client = SMSBY(SMS_TOKEN, 'by')
                            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–∞—Ä–æ–ª—è...")
                            password_response = sms_client.create_password_object('numbers', 4)
                            logger.info(f"–û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: {password_response}")
                            if 'result' in password_response and 'password_object_id' in password_response['result']:
                                password_object_id = password_response['result']['password_object_id']
                                logger.info(f"ID –æ–±—ä–µ–∫—Ç–∞ –ø–∞—Ä–æ–ª—è: {password_object_id}")
                                alphanames = sms_client.get_alphanames()
                                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ñ–∞-–∏–º–µ–Ω–∞: {alphanames}")
                                if alphanames:
                                    alphaname_id = next(iter(alphanames.keys()))
                                    sms_message = f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: %CODE%"
                                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {sms_message}")
                                    sms_response = sms_client.send_sms_message_with_code(
                                        password_object_id=password_object_id,
                                        phone=phone,
                                        message=sms_message,
                                        alphaname_id=alphaname_id  # –∞–ª—å—Ñ–∞-–∏–º—è
                                    )
                                    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {sms_response}")
                                else:
                                    logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω")
                                    raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                                if 'code' in sms_response:
                                    requests_data[request_id]['sms_id'] = sms_response.get('sms_id')
                                    requests_data[request_id]['confirmation_code'] = sms_response['code']
                                    save_requests(requests_data)
                                    await context.bot.send_message(
                                        chat_id=client_id,
                                        text=f"–ù–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:"
                                    )
                                    context.user_data['current_request'] = request_id
                                    return ENTER_CONFIRMATION_CODE
                                else:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: –Ω–µ—Ç –∫–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")
                            else:
                                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: {password_response}")
                                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {str(e)}")
                            await context.bot.send_message(
                                chat_id=client_id,
                                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π SMS. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—à–µ."
                            )
                            """
                    await query.edit_message_text(
                        f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{request_id}. "
                        "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
                    await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É.")
                    return ConversationHandler.END
            else:
                await query.edit_message_text("ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏.")
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def handle_client_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è(–æ—Ç–∫–∞–∑–∞) –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º."""
        query = update.callback_query
        await query.answer()
        try:
            action, request_id = query.data.split('_')[1:]
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            if request_id in requests_data:
                if action == 'confirm':
                    new_status = ORDER_STATUS_DELIVERY_TO_SC
                    # –ü–æ–ª—É—á–∞–µ–º delivery_id –∏–∑ requests
                    delivery_id = requests_data[request_id].get('assigned_delivery')
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ requests
                    requests_data[request_id].update({
                        'status': new_status,
                        'assigned_delivery': delivery_id
                    })
                    save_requests(requests_data)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ delivery_tasks
                    task_updated = False
                    for task_id, task in delivery_tasks.items():
                        if isinstance(task, dict) and task.get('request_id') == request_id:
                            task.update({
                                'status': new_status,
                                'assigned_delivery_id': delivery_id
                            })
                            task_updated = True
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}: {task}")
                            break
                    if not task_updated:
                        logger.error(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ delivery_tasks")
                    save_delivery_tasks(delivery_tasks)
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–¶
                    sc_id = requests_data[request_id].get('assigned_sc')
                    service_centers = load_service_centers()
                    sc_data = service_centers.get(sc_id, {})
                    if delivery_id:
                        delivery_message = (
                            f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}\n"
                            f"–ê–¥—Ä–µ—Å –°–¶ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                            f"üè¢ {sc_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"üìç {sc_data.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}"
                        )
                        await context.bot.send_message(
                            chat_id=delivery_id,
                            text=delivery_message
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_id}")
                else:
                    new_status = ORDER_STATUS_CLIENT_REJECTED
                await query.edit_message_text(
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{request_id}: {new_status}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    async def handle_delivered_to_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –°–µ—Ä–≤–∏—Å–Ω—ã–π –¶–µ–Ω—Ç—Ä."""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –°–¶. "
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done"
        )
        context.user_data['photos_to_sc'] = []
        context.user_data['current_request'] = request_id
        return CREATE_REQUEST_PHOTOS

    async def handle_delivery_photo(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        if 'photos_to_sc' not in context.user_data:
            return
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        photo_path = f"photos/delivery_to_sc_{len(context.user_data['photos_to_sc'])}_{context.user_data['current_request']}.jpg"
        await photo_file.download_to_drive(photo_path)
        context.user_data['photos_to_sc'].append(photo_path)
        await update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
        return CREATE_REQUEST_PHOTOS

# –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    async def handle_delivery_photos_done(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –°–¶"""
        try:
            request_id = context.user_data.get('current_request')
            photos = context.user_data.get('photos_to_sc', [])
            if not photos:
                await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return CREATE_REQUEST_PHOTOS
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            requests_data[request_id].update({
                'status': ORDER_STATUS_WAITING_SC,
                'delivery_photos': photos
            })
            save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ delivery_tasks
            for task in delivery_tasks.values():
                if isinstance(task, dict) and task.get('request_id') == request_id:
                    task['status'] = ORDER_STATUS_WAITING_SC
                    sc_name = task.get('sc_name')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –°–¶ –∏–∑ –∑–∞–¥–∞—á–∏
                    break
            save_delivery_tasks(delivery_tasks)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –°–¶
            sc_message = (
                f"üÜï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {requests_data[request_id].get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏—ë–º–∫–∏"
            )
            keyboard = [[
                InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"accept_item_{request_id}"),
                InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏—ë–º–µ", callback_data=f"reject_item_{request_id}")
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—Ö–æ–¥–∏–º sc_id –ø–æ sc_name
            users_data = load_users()
            sc_id = None
            
            for user_id, user_info in users_data.items():
                if user_info.get('sc_name') == sc_name:
                    sc_id = user_id
                    break
            
            if sc_id:
                try:
                    media_group = [InputMediaPhoto(open(photo, 'rb')) for photo in photos]
                    await context.bot.send_media_group(chat_id=sc_id, media=media_group)
                    await context.bot.send_message(
                        chat_id=sc_id,
                        text=sc_message,
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –°–¶ {sc_id}: {e}")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            del context.user_data['photos_to_sc']
            del context.user_data['current_request']
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶.")
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return ConversationHandler.END

    async def update_delivery_messages(self, bot: Bot, task_id: int, task_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º."""
        from config import DELIVERY_IDS
        for delivery_id in DELIVERY_IDS:
            if delivery_id != task_data['assigned_to']:
                message = f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.\n"
                message += f"–ó–∞—è–≤–∫–∞: #{task_data['request_id']}\n"
                message += f"–°–¶: {task_data['sc_name']}\n"
                message += f"–°—Ç–∞—Ç—É—Å: {task_data['status']}"
                await bot.send_message(chat_id=delivery_id, text=message)

    async def show_available_tasks(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        logger.info("–í—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ show_available_tasks")
        try:
            delivery_tasks = load_delivery_tasks()
            logger.info(f"Loaded delivery tasks: {delivery_tasks}")
            if not delivery_tasks:
                await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏.")
                return
            available_tasks = {
                task_id: task for task_id, task in delivery_tasks.items() 
                if task.get('status') == "–ù–æ–≤–∞—è" and not task.get('assigned_delivery_id')
            }
            logger.info(f"Available tasks: {available_tasks}")
            if not available_tasks:
                await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏.")
                return
            for task_id, task in available_tasks.items():
                keyboard = [[
                    InlineKeyboardButton(
                        "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É", 
                        callback_data=f"accept_delivery_{task['request_id']}"
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                message = (
                    f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}\n"
                    f"–ó–∞—è–≤–∫–∞: #{task['request_id']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {task['status']}\n"
                    f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {task['sc_name']}\n"
                    f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {task['client_address']}\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {task['client_name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {task['client_phone']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['description'][:100]}..."
                )
                await update.message.reply_text(message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

    async def show_my_tasks(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            delivery_id = str(update.effective_user.id)
            delivery_tasks = load_delivery_tasks()
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ {delivery_id}")
            logger.info(f"–í—Å–µ –∑–∞–¥–∞—á–∏: {delivery_tasks}")
            active_tasks = {
                task_id: task for task_id, task in delivery_tasks.items()
                if isinstance(task, dict) and 
                str(task.get('assigned_delivery_id')) == delivery_id and
                task.get('status') in [ORDER_STATUS_DELIVERY_TO_CLIENT, ORDER_STATUS_DELIVERY_TO_SC]
            }
            if not active_tasks:
                logger.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ {delivery_id}. –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏: {delivery_tasks}")
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
                return
            for task_id, task in active_tasks.items():
                status = task.get('status', '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                keyboard = []
                if status == ORDER_STATUS_DELIVERY_TO_SC:
                    keyboard.append([InlineKeyboardButton(
                        "–ü–µ—Ä–µ–¥–∞—Ç—å –≤ –°–¶", 
                        callback_data=f"delivered_to_sc_{task['request_id']}"
                    )])
                message = (
                    f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}\n"
                    f"–ó–∞—è–≤–∫–∞: #{task['request_id']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"–°–¶: {task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                )
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                await update.message.reply_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

    async def handle_confirmation_code(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        entered_code = update.message.text.strip()
        request_id = context.user_data.get('current_request')
        if not request_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END
        requests_data = load_requests()
        delivery_tasks = load_delivery_tasks()
        request = requests_data.get(request_id)
        if not request:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END
        if entered_code == request.get('confirmation_code'):
            delivery_id = str(update.effective_user.id)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ requests
            request.update({
                'status': ORDER_STATUS_DELIVERY_TO_SC,
                'assigned_delivery': delivery_id
            })
            save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ delivery_tasks
            for task_id, task in delivery_tasks.items():
                if isinstance(task, dict) and task.get('request_id') == request_id:
                    task.update({
                        'status': ORDER_STATUS_DELIVERY_TO_SC,
                        'assigned_delivery_id': delivery_id
                    })
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}: {task}")
                    break
            save_delivery_tasks(delivery_tasks)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –°–¶
            sc_id = request.get('assigned_sc')
            service_centers = load_service_centers()
            sc_data = service_centers.get(sc_id, {})
            sc_message = (
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}\n"
                f"–ê–¥—Ä–µ—Å –°–¶ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                f"üè¢ {sc_data.get('name')}\n"
                f"üìç {sc_data.get('address')}"
            )
            await context.bot.send_message(chat_id=delivery_id, text=sc_message)
            await update.message.reply_text("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ–ª—É—á–∏–ª –∞–¥—Ä–µ—Å –°–¶.")
            return ConversationHandler.END
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return ENTER_CONFIRMATION_CODE

    async def handle_transfer_to_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –°–¶"""
        try:
            delivery_id = str(update.effective_user.id)
            delivery_tasks = load_delivery_tasks()
            requests_data = load_requests()
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ {delivery_id}")
            logger.info(f"–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏: {delivery_tasks}")
            active_tasks = {
                task_id: task for task_id, task in delivery_tasks.items()
                if isinstance(task, dict) and
                str(task.get('assigned_delivery_id')) == delivery_id and
                task.get('status') == ORDER_STATUS_DELIVERY_TO_SC
            }
            if not active_tasks:
                logger.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ {delivery_id}")
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –°–¶.")
                return
            for task_id, task in active_tasks.items():
                request_id = task.get('request_id')
                if request_id in requests_data:
                    keyboard = [[
                        InlineKeyboardButton(
                            "–ü–µ—Ä–µ–¥–∞—Ç—å –≤ –°–¶", 
                            callback_data=f"delivered_to_sc_{request_id}"
                        )
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    message = (
                        f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}\n"
                        f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                        f"–°—Ç–∞—Ç—É—Å: {task['status']}\n"
                        f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {task['sc_name']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                    )
                    await update.message.reply_text(message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –°–¶: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")
