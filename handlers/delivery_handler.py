from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ConversationHandler
from config import (
    ADMIN_IDS, ENTER_NAME, ENTER_PHONE,
    ENTER_CONFIRMATION_CODE, SMS_TOKEN,
    ORDER_STATUS_DELIVERY_TO_SC, ORDER_STATUS_DELIVERY_TO_CLIENT,
    ORDER_STATUS_CLIENT_REJECTED, ORDER_STATUS_WAITING_SC, CREATE_REQUEST_PHOTOS,
    ORDER_STATUS_PICKUP_FROM_SC, ORDER_STATUS_SC_TO_CLIENT, DEBUG
)
from database import load_delivery_tasks, load_users, load_requests, save_delivery_tasks, save_requests, save_users, load_service_centers

import random
import os
from datetime import datetime

from smsby import SMSBY

from logging_decorator import log_method_call
import logging

logger = logging.getLogger(__name__)

class DeliveryHandler:

    @log_method_call
    async def show_delivery_profile(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        user_id = str(update.effective_user.id)
        users_data = await load_users()
        user = users_data.get(user_id, {})
        if not user.get('name'):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            return ENTER_NAME
        if not user.get('phone'):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            return ENTER_PHONE
        reply = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞:\n\n"
        reply += f"–ò–º—è: {user['name']}\n"
        reply += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
        reply += f"–†–æ–ª—å: {user.get('role', '–î–æ—Å—Ç–∞–≤—â–∏–∫')}\n"
        await update.message.reply_text(reply)
        return ConversationHandler.END

    async def enter_name(self, update: Update, context: CallbackContext):
        """–í–≤–æ–¥ –∏–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        user_id = str(update.effective_user.id)
        name = update.message.text
        users_data = await load_users()
        if user_id not in users_data:
            users_data[user_id] = {}
        users_data[user_id]['name'] = name
        await save_users(users_data)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return ENTER_PHONE

    async def enter_phone(self, update: Update, context: CallbackContext):
        """–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        user_id = str(update.effective_user.id)
        phone = update.message.text
        users_data = await load_users()
        users_data[user_id]['phone'] = phone
        await save_users(users_data)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return await self.show_delivery_profile(update, context)

    async def show_delivery_tasks(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        try:
            delivery_id = str(update.effective_user.id)
            delivery_tasks = await load_delivery_tasks()
            my_tasks = {
                task_id: task for task_id, task in delivery_tasks.items()
                if isinstance(task, dict) and 
                str(task.get('assigned_delivery_id')) == delivery_id
            }
            if not my_tasks:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
                return
            for task_id, task in my_tasks.items():
                status = task.get('status', '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                request_id = task.get('request_id', '–ù–µ —É–∫–∞–∑–∞–Ω')
                sc_name = task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
                keyboard = []
                if status == ORDER_STATUS_DELIVERY_TO_CLIENT:
                    keyboard.append([InlineKeyboardButton(
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", 
                        callback_data=f"confirm_pickup_{request_id}"
                    )])
                elif status == ORDER_STATUS_DELIVERY_TO_SC:
                    keyboard.append([InlineKeyboardButton(
                        "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –°–¶", 
                        callback_data=f"delivered_to_sc_{request_id}"
                    )])
                message = (
                    f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {sc_name}\n"
                    f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {task.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                )
                if keyboard:
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(message, reply_markup=reply_markup)
                else:
                    await update.message.reply_text(message)
        except Exception as e:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

    @log_method_call
    async def handle_task_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
        query = update.callback_query
        await query.answer()
        task_id = query.data.split('_')[-1]
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö
        task_details = f"–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ ‚Ññ{task_id}\n..."  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await query.edit_message_text(text=task_details)

    @log_method_call
    async def accept_delivery(self, update: Update, context: CallbackContext):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º."""
        query = update.callback_query
        await query.answer()
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
            request_id = query.data.split('_')[-1]
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = await load_requests()
            delivery_tasks = await load_delivery_tasks()
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º request_id
            task_id = None
            task_data = None
            for task_key, task in delivery_tasks.items():
                if task.get('request_id') == request_id and task.get('status') == '–ù–æ–≤–∞—è':
                    task_id = task_key
                    task_data = task
                    break
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞
            if not task_id or not task_data:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.")
                return
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–µ
            user_id = str(update.effective_user.id)
            user_name = update.effective_user.first_name
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
            is_sc_to_client = task_data.get('is_sc_to_client', False)
            delivery_type = task_data.get('delivery_type', '')
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task_data['status'] = '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            task_data['assigned_delivery_id'] = user_id
            task_data['assigned_delivery_name'] = user_name
            delivery_tasks[task_id] = task_data
            await save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            if request_id in requests_data:
                if is_sc_to_client or delivery_type == 'sc_to_client':
                    requests_data[request_id]['status'] = ORDER_STATUS_PICKUP_FROM_SC
                else:
                    requests_data[request_id]['status'] = ORDER_STATUS_DELIVERY_TO_SC
                requests_data[request_id]['assigned_delivery'] = user_id
                await save_requests(requests_data)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            if is_sc_to_client or delivery_type == 'sc_to_client':
                # –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–¶ –∫–ª–∏–µ–Ω—Ç—É
                message = (
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{task_id}\n"
                    f"–¢–∏–ø: üì§ –î–æ—Å—Ç–∞–≤–∫–∞ –ò–ó –°–¶ –ö–õ–ò–ï–ù–¢–£\n\n"
                    f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å –∏–∑ –°–¶:\n"
                    f"üè¢ {task_data.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {task_data.get('sc_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚òéÔ∏è {task_data.get('sc_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:\n"
                    f"üë§ {task_data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {task_data.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üì± {task_data.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                    f"1. –ó–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –°–¶\n"
                    f"2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –°–¶ –∫–Ω–æ–ø–∫–æ–π '–ó–∞–±—Ä–∞–ª –∏–∑ –°–¶'\n"
                    f"3. –î–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É\n"
                    f"4. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
                )
                keyboard = [[
                    InlineKeyboardButton(
                        "‚úÖ –ó–∞–±—Ä–∞–ª –∏–∑ –°–¶",
                        callback_data=f"sc_delivery_accept_{task_id}"
                    )
                ]]
            else:
                # –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –°–¶
                message = (
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{task_id}\n"
                    f"–¢–∏–ø: üì• –î–æ—Å—Ç–∞–≤–∫–∞ –û–¢ –ö–õ–ò–ï–ù–¢–ê –í –°–¶\n\n"
                    f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:\n"
                    f"üë§ {task_data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {task_data.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üì± {task_data.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –°–¶:\n"
                    f"üè¢ {task_data.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {task_data.get('sc_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚òéÔ∏è {task_data.get('sc_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                    f"1. –ó–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —É –∫–ª–∏–µ–Ω—Ç–∞\n"
                    f"2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫–Ω–æ–ø–∫–æ–π '–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞'\n"
                    f"3. –î–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –°–¶\n"
                    f"4. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶"
                )
                keyboard = [[
                    InlineKeyboardButton(
                        "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞", 
                        callback_data=f"confirm_pickup_{request_id}"
                    )
                ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            await self.update_delivery_messages(context.bot, task_id, task_data)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –°–¶ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            if request_id in requests_data:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
                if is_sc_to_client or delivery_type == 'sc_to_client':
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –°–¶
                    client_id = requests_data[request_id].get('user_id')
                    if client_id:
                        client_message = (
                            f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ{request_id} –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä.\n"
                            f"–°–∫–æ—Ä–æ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç —É –≤–∞—Å!"
                        )
                        await context.bot.send_message(
                            chat_id=client_id,
                            text=client_message
                        )
                else:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –°–¶
                    client_id = requests_data[request_id].get('user_id')
                    if client_id:
                        client_message = (
                            f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ{request_id} –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º.\n"
                            f"–û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {task_data.get('client_address', '—É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∑–∞–∫–∞–∑–µ')}."
                        )
                        await context.bot.send_message(
                            chat_id=client_id,
                            text=client_message
                        )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            users_data = await load_users()
            user = users_data.get(str(query.from_user.id), {})
            delivery_name = user.get('name', user_name)
            delivery_phone = user.get('phone', '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')
            admin_message = (
                f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{request_id} –ø—Ä–∏–Ω—è—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.\n"
                f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_name} - {delivery_phone}\n"
                f"–¢–∏–ø: {'–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–¶ –∫–ª–∏–µ–Ω—Ç—É' if is_sc_to_client or delivery_type == 'sc_to_client' else '–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –°–¶'}\n"
                f"–°—Ç–∞—Ç—É—Å: {requests_data.get(request_id, {}).get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
            for admin_id in ADMIN_IDS:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message
                )
        except Exception as e:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    @log_method_call
    async def handle_confirm_pickup(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è(–æ—Ç–∫–∞–∑–∞) –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å –∫–ª–∏–µ–Ω—Ç—É —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        """
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        requests_data = await load_requests()
        if request_id in requests_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º request_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['current_request'] = request_id
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            await query.edit_message_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º. "
                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ\n\n/DONE"
            )
            return CREATE_REQUEST_PHOTOS
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @log_method_call
    async def handle_client_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        await query.answer()
        try:
            action, request_id = query.data.split('_')[1:]
            requests_data = await load_requests()
            users_data = await load_users()
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            request = requests_data[request_id]
            client_id = request.get('user_id')
            client_data = users_data.get(str(client_id), {})
            if action == 'confirm':
                # –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
                await query.edit_message_text("‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data['current_request'] = request_id
                context.user_data['client_id'] = client_id
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirmation_code = ''.join([str(random.randint(0, 9)) for _ in range(4)])
                requests_data[request_id]['confirmation_code'] = confirmation_code
                await save_requests(requests_data)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (—Ç–µ—Å—Ç–æ–≤—ã–π –∏–ª–∏ –±–æ–µ–≤–æ–π)
                if DEBUG:
                    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –î–û–°–¢–ê–í–©–ò–ö–£, –∞ –∫–ª–∏–µ–Ω—Ç –µ–≥–æ –≤–≤–æ–¥–∏—Ç
                    delivery_id = request.get('assigned_delivery')
                    if delivery_id:
                        await context.bot.send_message(
                            chat_id=delivery_id,
                            text=f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: {confirmation_code}\n\n–ü—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                        )
                        # –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –æ—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        await context.bot.send_message(
                            chat_id=client_id,
                            text=f"–î–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ–ª—É—á–∏—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Å–æ–æ–±—â–∏—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                        )
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –û–¢ –ö–õ–ò–ï–ù–¢–ê
                    context.user_data['awaiting_confirmation_code'] = request_id
                    context.user_data['current_request'] = request_id
                    return ENTER_CONFIRMATION_CODE
                else:
                    # –í –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —Å –∫–æ–¥–æ–º –ö–õ–ò–ï–ù–¢–£
                    if 'phone' in client_data and client_data['phone']:
                        try:
                            phone = client_data['phone'].replace('+', '')
                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SMS-–∫–ª–∏–µ–Ω—Ç
                            sms_client = SMSBY(SMS_TOKEN, 'by')
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä–æ–ª—è
                            password_objects = sms_client.get_password_objects()
                            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è
                            password_object = None
                            if password_objects and 'result' in password_objects and password_objects['result']:
                                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–∞—Ä–æ–ª—è –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                                sorted_objects = sorted(
                                    password_objects['result'], 
                                    key=lambda x: x['d_create'], 
                                    reverse=True
                                )
                                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è —Ç–∏–ø–∞ 'numbers'
                                password_object = next(
                                    (obj for obj in sorted_objects if obj['type_id'] == 'numbers'),
                                    None
                                )
                                if not password_object:
                                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ 'numbers', –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                                    password_object = sorted_objects[0]
                            if not password_object:
                                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä–æ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è: {password_object}")
                            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ñ–∞-–∏–º–µ–Ω–∞
                            alphanames = sms_client.get_alphanames()
                            if alphanames:
                                alphaname_id = next(iter(alphanames.keys()))
                                sms_message = f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: %CODE%"
                                sms_response = sms_client.send_sms_message_with_code(
                                    password_object_id=password_object['id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –æ–±—ä–µ–∫—Ç–∞
                                    phone=phone,
                                    message=sms_message,
                                    alphaname_id=alphaname_id
                                )
                                if 'code' in sms_response:
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
                                    requests_data[request_id]['sms_id'] = sms_response.get('sms_id')
                                    requests_data[request_id]['confirmation_code'] = sms_response['code']
                                    await save_requests(requests_data)
                                    # –°–æ–æ–±—â–∞–µ–º –ö–õ–ò–ï–ù–¢–£, —á—Ç–æ–±—ã –æ–Ω –≤–≤—ë–ª –∫–æ–¥ –∏–∑ SMS
                                    await context.bot.send_message(
                                        chat_id=client_id,
                                        text=f"üì≤ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:"
                                    )
                                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –î–û–°–¢–ê–í–©–ò–ö–ê, —á—Ç–æ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                    delivery_id = request.get('assigned_delivery')
                                    if delivery_id:
                                        await context.bot.send_message(
                                            chat_id=delivery_id,
                                            text=f"üïí –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –≤–≤–µ–¥—ë—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS."
                                        )
                                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –û–¢ –ö–õ–ò–ï–ù–¢–ê
                                    context.user_data['awaiting_confirmation_code'] = request_id
                                    context.user_data['current_request'] = request_id
                                    context.user_data['client_id'] = client_id
                                    logger.info(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: {requests_data[request_id]['confirmation_code']}")
                                    return ENTER_CONFIRMATION_CODE
                                else:
                                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")
                            else:
                                raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                        except Exception as e:
                            # –ï—Å–ª–∏ SMS –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                            await context.bot.send_message(
                                chat_id=client_id,
                                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: {confirmation_code}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:"
                            )
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥
                            delivery_id = request.get('assigned_delivery')
                            if delivery_id:
                                await context.bot.send_message(
                                    chat_id=delivery_id,
                                    text=f"üïí –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –≤–≤–µ–¥—ë—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                                )
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –û–¢ –ö–õ–ò–ï–ù–¢–ê
                            context.user_data['awaiting_confirmation_code'] = request_id
                            context.user_data['current_request'] = request_id
                            context.user_data['client_id'] = client_id
                            return ENTER_CONFIRMATION_CODE
                    else:
                        # –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                        await context.bot.send_message(
                            chat_id=client_id,
                            text=f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_code}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:"
                        )
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥
                        delivery_id = request.get('assigned_delivery')
                        if delivery_id:
                            await context.bot.send_message(
                                chat_id=delivery_id,
                                text=f"üïí –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –≤–≤–µ–¥—ë—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                            )
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –û–¢ –ö–õ–ò–ï–ù–¢–ê
                            context.user_data['awaiting_confirmation_code'] = request_id
                            context.user_data['current_request'] = request_id
                            context.user_data['client_id'] = client_id
                            return ENTER_CONFIRMATION_CODE
            elif action == 'deny':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if request.get('status') == '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞':
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–∫–∞–∑ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
                    request['status'] = ORDER_STATUS_CLIENT_REJECTED
                    await save_requests(requests_data)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
                    admin_message = (
                        f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
                        f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                        f"–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
                    )
                    for admin_id in ADMIN_IDS:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=admin_message
                        )
                    await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
                else:
                    # –ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–∫–∞–∑ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    request['status'] = '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
                    await save_requests(requests_data)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    admin_message = (
                        f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n\n"
                        f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                        f"–°—Ç–∞—Ç—É—Å: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
                    )
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    keyboard = [[
                        InlineKeyboardButton(
                            "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                            callback_data=f"contact_client_{request_id}"
                        )]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    pickup_photos = request.get('pickup_photos', [])
                    if pickup_photos:
                        for photo_path in pickup_photos[:1]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                            if os.path.exists(photo_path):
                                with open(photo_path, 'rb') as photo_file:
                                    await context.bot.send_photo(
                                        chat_id=ADMIN_IDS[0],
                                        photo=photo_file,
                                        caption=admin_message,
                                        reply_markup=reply_markup
                                    )
                                break
                    else:
                        for admin_id in ADMIN_IDS:
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=admin_message,
                                reply_markup=reply_markup
                            )
                    await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        except Exception as e:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

    @log_method_call
    async def pickup_client_code_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–≤–æ–¥–∏–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–º"""
        try:
            entered_code = update.message.text.strip()
            request_id = context.user_data.get('current_request')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –≤–≤–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç, –∞ –Ω–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫
            user_id = str(update.effective_user.id)
            client_id = context.user_data.get('client_id')
            if not client_id or user_id != str(client_id):
                # –ï—Å–ª–∏ –∫–æ–¥ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–µ –∫–ª–∏–µ–Ω—Ç
                await update.message.reply_text("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                return ENTER_CONFIRMATION_CODE
            if not request_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.")
                return ConversationHandler.END
            requests_data = await load_requests()
            if request_id not in requests_data:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
            request = requests_data[request_id]
            expected_code = request.get('confirmation_code')
            if not expected_code:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return ConversationHandler.END
            if entered_code == expected_code:
                # –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω—ã–π
                request['status'] = ORDER_STATUS_DELIVERY_TO_SC
                request['client_confirmed'] = True
                await save_requests(requests_data)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ delivery_tasks
                delivery_tasks = await load_delivery_tasks()
                for _, task in delivery_tasks.items():
                    if isinstance(task, dict) and task.get('request_id') == request_id:
                        task['status'] = ORDER_STATUS_DELIVERY_TO_SC
                        await save_delivery_tasks(delivery_tasks)
                        break
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                await update.message.reply_text(
                    f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –î–æ—Å—Ç–∞–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å —Ç–æ–≤–∞—Ä–æ–º –≤ –°–¶."
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
                delivery_id = request.get('assigned_delivery')
                if delivery_id:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–¶
                    sc_id = request.get('assigned_sc')
                    service_centers = await load_service_centers()
                    sc_data = service_centers.get(sc_id, {})
                    await context.bot.send_message(
                        chat_id=delivery_id,
                        text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}!\n\n"
                             f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç–æ–≤–∞—Ä–æ–º –≤ –°–¶.\n\n"
                             f"–ê–¥—Ä–µ—Å –°–¶ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                             f"üè¢ {sc_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                             f"üìç {sc_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                    )
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                for admin_id in ADMIN_IDS:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"‚úÖ –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ–ª—É—á–∏–ª —Ç–æ–≤–∞—Ä –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id} –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –°–¶."
                    )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context.user_data.pop('awaiting_confirmation_code', None)
                context.user_data.pop('current_request', None)
                context.user_data.pop('client_id', None)
                return ConversationHandler.END
            else:
                # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return ENTER_CONFIRMATION_CODE
        except Exception:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.")
            return ConversationHandler.END

    @log_method_call
    async def handle_delivered_to_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –°–µ—Ä–≤–∏—Å–Ω—ã–π –¶–µ–Ω—Ç—Ä."""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –°–¶. "
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ\n\n/DONE"
        )
        context.user_data['photos_to_sc'] = []
        context.user_data['current_request'] = request_id
        return CREATE_REQUEST_PHOTOS

    @log_method_call
    async def handle_delivery_photo(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        if 'photos_to_sc' not in context.user_data:
            return
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        photo_path = f"photos/delivery_to_sc_{len(context.user_data['photos_to_sc'])}_{context.user_data['current_request']}.jpg"
        await photo_file.download_to_drive(photo_path)
        context.user_data['photos_to_sc'].append(photo_path)
        await update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ\n\n/DONE")
        return CREATE_REQUEST_PHOTOS

    @log_method_call
    async def handle_delivery_photos_done(self, update: Update, context: CallbackContext):
        try:
            request_id = context.user_data.get('current_request')
            photos = context.user_data.get('photos_to_sc', [])
            if not photos:
                await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return CREATE_REQUEST_PHOTOS
            requests_data = await load_requests()
            delivery_tasks = await load_delivery_tasks()
            users_data = await load_users()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            requests_data[request_id].update({
                'status': ORDER_STATUS_WAITING_SC,
                'delivery_photos': photos
            })
            await save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ delivery_tasks
            for task in delivery_tasks.values():
                if isinstance(task, dict) and task.get('request_id') == request_id:
                    task['status'] = ORDER_STATUS_WAITING_SC
                    break
            await save_delivery_tasks(delivery_tasks)
            sc_id = requests_data[request_id].get('assigned_sc')
            if not sc_id:
                return
            # –ù–∞—Ö–æ–¥–∏–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°–¶
            sc_telegram_id = None
            for user_id, user_data in users_data.items():
                if user_data.get('role') == 'sc' and user_data.get('sc_id') == sc_id:
                    sc_telegram_id = int(user_id)
                    break
            if not sc_telegram_id:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –°–¶")
                return
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –°–¶
            sc_message = (
                f"üÜï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {requests_data[request_id].get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏—ë–º–∫–∏"
            )
            keyboard = [[
                InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"accept_item_{request_id}"),
                InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–∏—ë–º–µ", callback_data=f"reject_item_{request_id}")
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            for photo_path in photos:
                if os.path.exists(photo_path):
                    with open(photo_path, 'rb') as photo_file:
                        await context.bot.send_photo(
                            chat_id=sc_telegram_id,
                            photo=photo_file,
                            caption=f"–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}"
                        )
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=sc_telegram_id,
                text=sc_message,
                reply_markup=reply_markup
            )
            context.user_data.pop('photos_to_sc', None)
            context.user_data.pop('current_request', None)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –°–¶")
            return ConversationHandler.END
        except Exception as e:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return ConversationHandler.END

    @log_method_call
    async def update_delivery_messages(self, bot, task_id, task_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –∑–∞–∫–∞–∑
        assigned_delivery_id = task_data.get('assigned_delivery_id', '')
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        message = f"–ó–∞–∫–∞–∑ #{task_id} –±—ã–ª –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω."
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
        from config import DELIVERY_IDS
        for delivery_id in DELIVERY_IDS:
            if str(delivery_id) != str(assigned_delivery_id):
                await bot.send_message(
                    chat_id=int(delivery_id), 
                    text=message
                )

    @log_method_call
    async def show_available_tasks(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            delivery_tasks = await load_delivery_tasks()
            available_tasks = {}
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            today = datetime.now().strftime("%d.%m.%Y")
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥–∞—Ç–µ
            for task_id, task in delivery_tasks.items():
                if (task.get('status') == '–ù–æ–≤–∞—è' and 
                    task.get('desired_date', '').split()[-1] == today):
                    available_tasks[task_id] = task
            if not available_tasks:
                await update.message.reply_text(
                    f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏."
                )
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            await update.message.reply_text(
                f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for task_id, task in available_tasks.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
                is_sc_to_client = task.get('is_sc_to_client', False)
                delivery_type = task.get('delivery_type', '')   
                if is_sc_to_client or delivery_type == 'sc_to_client':
                    delivery_type_display = "üì§ –î–æ—Å—Ç–∞–≤–∫–∞ –ò–ó –°–¶ –ö–õ–ò–ï–ù–¢–£"
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                    delivery_time = task.get('desired_date', '').split()[0] if task.get('desired_date') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    keyboard = [[
                        InlineKeyboardButton(
                            "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                            callback_data=f"accept_delivery_{task.get('request_id', '')}"
                        )
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    # –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶ –∫–ª–∏–µ–Ω—Ç—É
                    message = (
                        f"üì¶ –ó–∞–¥–∞—á–∞ #{task_id}\n"
                        f"–¢–∏–ø: {delivery_type_display}\n"
                        f"–í—Ä–µ–º—è: {delivery_time}\n\n"
                        f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å –∏–∑ –°–¶:\n"
                        f"üè¢ {task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìç {task.get('sc_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"‚òéÔ∏è {task.get('sc_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:\n"
                        f"üë§ {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìç {task.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üì± {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                    )
                else:
                    delivery_type_display = "üì• –î–æ—Å—Ç–∞–≤–∫–∞ –û–¢ –ö–õ–ò–ï–ù–¢–ê –í –°–¶"
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                    delivery_time = task.get('desired_date', '').split()[0] if task.get('desired_date') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    keyboard = [[
                        InlineKeyboardButton(
                            "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                            callback_data=f"accept_delivery_{task.get('request_id', '')}"
                        )
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    # –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –°–¶
                    message = (
                        f"üì¶ –ó–∞–¥–∞—á–∞ #{task_id}\n"
                        f"–¢–∏–ø: {delivery_type_display}\n"
                        f"–í—Ä–µ–º—è: {delivery_time}\n\n"
                        f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:\n"
                        f"üë§ {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìç {task.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üì± {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –°–¶:\n"
                        f"üè¢ {task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìç {task.get('sc_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"‚òéÔ∏è {task.get('sc_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                    )
                await update.message.reply_text(message, reply_markup=reply_markup)
        except Exception as e:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

    @log_method_call
    async def show_my_tasks(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            delivery_tasks = await load_delivery_tasks()
            active_tasks = {}
            for task_id, task in delivery_tasks.items():
                if task.get('assigned_delivery_id') == str(update.effective_user.id):
                    active_tasks[task_id] = task
            if not active_tasks:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
                return
            for task_id, task in active_tasks.items():
                status = task.get('status')
                keyboard = []
                if task.get('is_sc_to_client'):
                    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶ –∫–ª–∏–µ–Ω—Ç—É
                    message = (
                        f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}\n"
                        f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
                        f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å –∏–∑ –°–¶:\n"
                        f"üè¢ {task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìç {task.get('sc_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:\n"
                        f"üë§ {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìç {task.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üì± {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                    )
                    if status == ORDER_STATUS_PICKUP_FROM_SC:
                        keyboard.append([InlineKeyboardButton(
                            "‚úÖ –ó–∞–±—Ä–∞–ª –∏–∑ –°–¶", 
                            callback_data=f"picked_up_from_sc_{task['request_id']}"
                        )])
                    elif status == ORDER_STATUS_SC_TO_CLIENT:
                        keyboard.append([InlineKeyboardButton(
                            "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É", 
                            callback_data=f"delivered_to_client_{task['request_id']}"
                        )])
                else:
                    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –°–¶
                    message = (
                        f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}\n"
                        f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
                        f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:\n"
                        f"üë§ {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìç {task.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üì± {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –°–¶:\n"
                        f"üè¢ {task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìç {task.get('sc_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                    )
                    if status == ORDER_STATUS_DELIVERY_TO_SC:
                        keyboard.append([InlineKeyboardButton(
                            "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –°–¶", 
                            callback_data=f"delivered_to_sc_{task['request_id']}"
                        )])
                    elif status == ORDER_STATUS_WAITING_SC:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–µ–º–∫—É –°–¶
                        continue
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                await update.message.reply_text(message, reply_markup=reply_markup)
        except Exception as e:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

    @log_method_call
    async def handle_confirmation_code(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        entered_code = update.message.text.strip()
        request_id = context.user_data.get('current_request')
        if not request_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END
        requests_data = await load_requests()
        delivery_tasks = await load_delivery_tasks()
        request = requests_data.get(request_id)
        if not request:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END
        if entered_code == request.get('confirmation_code'):
            delivery_id = str(update.effective_user.id)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ requests
            request.update({
                'status': ORDER_STATUS_DELIVERY_TO_SC,
                'assigned_delivery': delivery_id
            })
            await save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ delivery_tasks
            for task_id, task in delivery_tasks.items():
                if isinstance(task, dict) and task.get('request_id') == request_id:
                    task.update({
                        'status': ORDER_STATUS_DELIVERY_TO_SC,
                        'assigned_delivery_id': delivery_id
                    })
                    break
            await save_delivery_tasks(delivery_tasks)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –°–¶
            sc_id = request.get('assigned_sc')
            service_centers = await load_service_centers()
            sc_data = service_centers.get(sc_id, {})
            sc_message = (
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}\n"
                f"–ê–¥—Ä–µ—Å –°–¶ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                f"üè¢ {sc_data.get('name')}\n"
                f"üìç {sc_data.get('address')}"
            )
            await context.bot.send_message(chat_id=delivery_id, text=sc_message)
            await update.message.reply_text("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ–ª—É—á–∏–ª –∞–¥—Ä–µ—Å –°–¶.")
            return ConversationHandler.END
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return ENTER_CONFIRMATION_CODE

    @log_method_call
    async def handle_transfer_to_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –°–¶"""
        try:
            delivery_id = str(update.effective_user.id)
            delivery_tasks = await load_delivery_tasks()
            requests_data = await load_requests()
            active_tasks = {
                task_id: task for task_id, task in delivery_tasks.items()
                if isinstance(task, dict) and
                str(task.get('assigned_delivery_id')) == delivery_id and
                task.get('status') == ORDER_STATUS_DELIVERY_TO_SC
            }
            if not active_tasks:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –°–¶.")
                return
            for task_id, task in active_tasks.items():
                request_id = task.get('request_id')
                if request_id in requests_data:
                    keyboard = [[
                        InlineKeyboardButton(
                            "–ü–µ—Ä–µ–¥–∞—Ç—å –≤ –°–¶",
                            callback_data=f"delivered_to_sc_{request_id}"
                        )
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    message = (
                        f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}\n"
                        f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                        f"–°—Ç–∞—Ç—É—Å: {task['status']}\n"
                        f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {task['sc_name']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                    )
                    await update.message.reply_text(message, reply_markup=reply_markup)
        except Exception as e:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

    @log_method_call
    async def cancel_delivery(self, update: Update, context: CallbackContext):
        """
        –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        TODO: –°–¥–µ–ª–∞–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –≤ —Ü–∏–∫–ª–µ
        """
        keys_to_remove = {
            'photos_to_sc',
            'photos_from_sc',
            'current_request',
            'confirmation_code'
        }
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for key in keys_to_remove:
            context.user_data.pop(key, None)
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        reply_method = (
            update.callback_query.edit_message_text 
            if update.callback_query 
            else update.message.reply_text
        )
        await reply_method("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞.")
        return ConversationHandler.END

    @log_method_call
    async def handle_pickup_photo(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        if 'pickup_photos' not in context.user_data:
            context.user_data['pickup_photos'] = []
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        photo_path = f"photos/pickup_{len(context.user_data['pickup_photos'])}_{context.user_data['current_request']}.jpg"
        await photo_file.download_to_drive(photo_path)
        context.user_data['pickup_photos'].append(photo_path)
        await update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ\n\n/DONE")
        return CREATE_REQUEST_PHOTOS

    @log_method_call
    async def handle_pickup_photos_done(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            request_id = context.user_data.get('current_request')
            photos = context.user_data.get('pickup_photos', [])
            if not photos:
                await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return CREATE_REQUEST_PHOTOS
            requests_data = await load_requests()
            if request_id in requests_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
                requests_data[request_id]['pickup_photos'] = photos
                await save_requests(requests_data)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                for admin_id in ADMIN_IDS:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                    if photos and os.path.exists(photos[0]):
                        with open(photos[0], 'rb') as photo_file:
                            await context.bot.send_photo(
                                chat_id=admin_id,
                                photo=photo_file,
                                caption=f"–î–æ—Å—Ç–∞–≤—â–∏–∫ —Å–¥–µ–ª–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}"
                            )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                client_id = requests_data[request_id].get('user_id')
                if client_id:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–¶
                    sc_id = requests_data[request_id].get('assigned_sc')
                    service_centers = await load_service_centers()
                    sc_data = service_centers.get(sc_id, {})
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –°–¶
                    sc_info = (
                        f"üè¢ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {sc_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üìç –ê–¥—Ä–µ—Å: {sc_data.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {sc_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    )
                    await context.bot.send_message(
                        chat_id=client_id,
                        text=f"–î–æ—Å—Ç–∞–≤—â–∏–∫ —Å–¥–µ–ª–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}.\n\n{sc_info}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:"
                    )
                    for photo_path in photos:
                        if os.path.exists(photo_path):
                            with open(photo_path, 'rb') as photo_file:
                                await context.bot.send_photo(
                                    chat_id=client_id,
                                    photo=photo_file,
                                    caption=f"–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}"
                                )
                    keyboard = [
                        [InlineKeyboardButton("–î–∞, –∑–∞–±—Ä–∞–ª. –° —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–µ–Ω.", callback_data=f"client_confirm_{request_id}")],
                        [InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –∑–∞–±—Ä–∞–ª.", callback_data=f"client_deny_{request_id}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=client_id,
                        text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?",
                        reply_markup=reply_markup
                    )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context.user_data.pop('pickup_photos', None)
                context.user_data.pop('current_request', None)
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return ConversationHandler.END
        except Exception as e:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return ConversationHandler.END
