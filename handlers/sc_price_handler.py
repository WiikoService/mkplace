from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from config import ADMIN_IDS, ENTER_REPAIR_PRICE, CONFIRMATION
from database import load_requests, save_requests, load_users, load_service_centers
import logging

logger = logging.getLogger(__name__)

class SCPriceHandler:

    async def start_price_confirmation(self, update: Update, context: CallbackContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        context.user_data['current_request_id'] = request_id
        await query.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return ENTER_REPAIR_PRICE

    async def handle_price_input(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã"""
        try:
            price = int(update.message.text.strip())
            if price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            request_id = context.user_data.get('current_request_id')
            if not request_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞")
                return CONFIRMATION
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['final_price'] = price
            context.user_data['price_request_id'] = request_id
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_price_{request_id}")],
                [InlineKeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_price_{request_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ:",
                reply_markup=reply_markup
            )
            return CONFIRMATION
        except ValueError as e:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500)")
            return ENTER_REPAIR_PRICE

    async def confirm_price(self, update: Update, context: CallbackContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        price = context.user_data.get('final_price')
        if not price or request_id != context.user_data.get('price_request_id'):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return CONFIRMATION
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        requests_data = load_requests()
        if request_id not in requests_data:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return CONFIRMATION
        request = requests_data[request_id]
        request['final_price'] = price
        save_requests(requests_data)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await self._notify_admin_and_client(update, context, request_id, price)
        await query.edit_message_text(f"‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {price} —Ä—É–±. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return CONFIRMATION

    async def change_price(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ —Ü–µ–Ω—ã"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        await query.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return ENTER_REPAIR_PRICE

    async def _notify_admin_and_client(self, update: Update, context: CallbackContext, request_id: str, price: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –∫–ª–∏–µ–Ω—Ç—É"""
        requests_data = load_requests()
        request = requests_data.get(request_id)
        if not request:
            return
        users_data = load_users()
        service_centers = load_service_centers()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–¶
        sc_id = request.get('assigned_sc')
        sc_data = service_centers.get(sc_id, {})
        sc_name = sc_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –°–¶')
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞\n\n"
            f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"–°–¶: {sc_name}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=int(admin_id),
                    text=admin_message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        client_id = request.get('user_id')
        if client_id:
            client_message = (
                f"üí∞ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞\n\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
            )
            try:
                await context.bot.send_message(
                    chat_id=int(client_id),
                    text=client_message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
