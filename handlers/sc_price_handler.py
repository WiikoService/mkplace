from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from config import ADMIN_IDS, ENTER_REPAIR_PRICE, CONFIRMATION
from database import load_requests, save_requests, load_users, load_service_centers, save_chat_history
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class SCPriceHandler:

    async def start_price_confirmation(self, update: Update, context: CallbackContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        context.user_data['current_request_id'] = request_id
        await query.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return ENTER_REPAIR_PRICE

    async def handle_price_input(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã"""
        try:
            price = int(update.message.text.strip())
            if price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            request_id = context.user_data.get('current_request_id')
            if not request_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞")
                return CONFIRMATION
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data['final_price'] = price
            context.user_data['price_request_id'] = request_id
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_price_{request_id}")],
                [InlineKeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_price_{request_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} BYN\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ:",
                reply_markup=reply_markup
            )
            return CONFIRMATION
        except ValueError as e:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500)")
            return ENTER_REPAIR_PRICE

    async def confirm_price(self, update: Update, context: CallbackContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        price = context.user_data.get('final_price')
        if not price or request_id != context.user_data.get('price_request_id'):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return CONFIRMATION
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        requests_data = await load_requests()
        if request_id not in requests_data:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return CONFIRMATION
        request = requests_data[request_id]
        request['final_price'] = price
        request['price_status'] = 'pending_client_approval'  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º
        await save_requests(requests_data)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É
        await self._request_client_approval(update, context, request_id, price)
        await query.edit_message_text(f"‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {price} BYN –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        return CONFIRMATION

    async def change_price(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ —Ü–µ–Ω—ã"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return ENTER_REPAIR_PRICE

    async def _request_client_approval(self, update: Update, context: CallbackContext, request_id: str, price: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
        requests_data = await load_requests()
        request = requests_data.get(request_id)
        if not request:
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        client_id = request.get('user_id')
        service_centers = await load_service_centers()
        sc_id = request.get('assigned_sc')
        sc_data = service_centers.get(sc_id, {})
        sc_name = sc_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –°–¶')
        if client_id:
            client_message = (
                f"üí∞ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞\n\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–°–¶: {sc_name}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} BYN\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é."
            )    
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞
            keyboard = [
                [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"sc_final_approve_price_{request_id}")],
                [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"sc_final_reject_price_{request_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await context.bot.send_message(
                    chat_id=int(client_id),
                    text=client_message,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")

    async def handle_sc_final_price_approval(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Ä–µ–º–æ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        requests_data = await load_requests()
        if request_id not in requests_data:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        request = requests_data[request_id]
        price = request.get('final_price')
        if not price:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–Ω—ã –∏ –∑–∞—è–≤–∫–∏
        request['price_status'] = 'approved_by_client'
        request['status'] = '–†–µ–º–æ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏'
        await save_requests(requests_data)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ –°–¶
        await self._notify_admin_and_sc_approval(context, request_id, price, True)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ - –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏, –±–µ–∑ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await query.edit_message_text(
            f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ {price} BYN –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}.\n"
            f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø—Ä–∏—Å—Ç—É–ø–∏—Ç –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ.\n"
            f"–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏."
        )
        # –í–∞–∂–Ω–æ: –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

    async def handle_sc_final_price_rejection(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Ä–µ–º–æ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        requests_data = await load_requests()
        if request_id not in requests_data:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        request = requests_data[request_id]
        price = request.get('final_price')
        if not price:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–Ω—ã
        request['price_status'] = 'rejected_by_client'
        request['status'] = '–¶–µ–Ω–∞ –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞'
        await save_requests(requests_data)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ –°–¶
        await self._notify_admin_and_sc_approval(context, request_id, price, False)
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞
        sc_id = request.get('assigned_sc')
        users_data = await load_users()
        client_id = str(update.effective_user.id)
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°–¶
        sc_user_id = None
        for user_id, user_data in users_data.items():
            if user_data.get('role') == 'sc' and str(user_data.get('sc_id')) == str(sc_id):
                sc_user_id = user_id
                break
        if not sc_user_id:
            await query.edit_message_text(
                f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ {price} BYN –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}.\n"
                f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º —Ä–µ—à–µ–Ω–∏–∏ –∏ –≤—Å–∫–æ—Ä–µ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
            )
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['active_client_chat'] = {
            'request_id': request_id,
            'sc_user_id': sc_user_id,
            'last_active': datetime.now().timestamp()
        }
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Å–æ–≥–ª–∞—Å–∏–∏ –≤ —á–∞—Ç
        timestamp = datetime.now().strftime("%H:%M %d.%m.%Y")
        disagreement_message = f"–°–∏—Å—Ç–µ–º–∞: –ö–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ä–µ–º–æ–Ω—Ç–∞ {price} BYN."
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        await save_chat_history(
            request_id, 
            [{
                'sender': 'system',
                'message': disagreement_message,
                'timestamp': timestamp
            }]
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –°–¶
        try:
            await context.bot.send_message(
                chat_id=int(sc_user_id),
                text=f"üì© *–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:*\n"
                     f"{disagreement_message}\n\n"
                     f"‚ùóÔ∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ä–µ–º–æ–Ω—Ç–∞ {price} BYN –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –°–¶ {sc_user_id}: {e}")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
        await query.edit_message_text(
            f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ {price} BYN –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}.\n"
            f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º —Ä–µ—à–µ–Ω–∏–∏.\n\n"
            f"–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –Ω–µ—Å–æ–≥–ª–∞—Å–∏—è —Å —Ü–µ–Ω–æ–π:"
        )
        return 'HANDLE_CLIENT_REPLY'

    async def _notify_admin_and_sc_approval(self, context: CallbackContext, request_id: str, price: int, approved: bool):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –∏ –°–¶ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–æ–º"""
        requests_data = load_requests()
        request = requests_data.get(request_id)
        if not request:
            return   
        status_text = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª" if approved else "–æ—Ç–∫–ª–æ–Ω–∏–ª"
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = (
            f"{'‚úÖ' if approved else '‚ùå'} –ö–ª–∏–µ–Ω—Ç {status_text} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞\n\n"
            f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} BYN\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=int(admin_id),
                    text=admin_message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –°–¶
        sc_id = request.get('assigned_sc')
        users_data = await load_users()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_id = request.get('user_id')
        client_data = users_data.get(client_id, {})
        client_name = client_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        client_phone = client_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –°–¶, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–º—É
        sc_message = (
            f"{'‚úÖ' if approved else '‚ùå'} –ö–ª–∏–µ–Ω—Ç {status_text} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞\n\n"
            f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {client_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} BYN\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if not approved:
            sc_message += "\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ö–ª–∏–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –≤—ã —Å–≤—è–∂–µ—Ç–µ—Å—å —Å –Ω–∏–º."
        for user_id, user_data in users_data.items():
            if user_data.get('role') == 'sc' and str(user_data.get('sc_id')) == str(sc_id):
                try:
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=sc_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –°–¶ {user_id}: {e}")
