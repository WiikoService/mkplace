from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext, ConversationHandler
from config import (
    ORDER_STATUS_PICKUP_FROM_SC,
    ORDER_STATUS_SC_TO_CLIENT,
    CREATE_REQUEST_PHOTOS,
    ENTER_SC_CONFIRMATION_CODE, 
    ORDER_STATUS_DELIVERY_TO_SC,
    ORDER_STATUS_CLIENT_REJECTED,
    ORDER_STATUS_WAITING_SC,
    ORDER_STATUS_IN_SC,
    ORDER_STATUS_READY,
    ORDER_STATUS_PICKUP_FROM_SC,
    ENTER_CONFIRMATION_CODE,
    ADMIN_IDS,
    DEBUG,
    SMS_TOKEN, WAITING_FINAL_PAYMENT, PAYMENT_API_URL
)
from handlers.delivery_handler import DeliveryHandler
from database import (
    load_requests, save_requests,
    load_delivery_tasks, save_delivery_tasks,
    load_users, load_service_centers
)
from utils import notify_client
import logging
import time
import random
import os
from smsby import SMSBY
import aiohttp
import json
from decimal import Decimal

logger = logging.getLogger(__name__)

class DeliverySCHandler(DeliveryHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶"""

    async def handle_pickup_from_sc(self, update: Update, context: CallbackContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç –°–¶"""
        query = update.callback_query
        await query.answer()
        
        try:
            request_id = query.data.split('_')[-1]
            context.user_data['current_request'] = request_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            requests_data = load_requests()
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ConversationHandler.END
                
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join(random.choices('0123456789', k=4))
            context.user_data['sc_confirmation_code'] = confirmation_code
            requests_data[request_id]['confirmation_code'] = confirmation_code
            save_requests(requests_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –°–¶
            sc_id = requests_data[request_id].get('assigned_sc')
            users_data = load_users()
            sc_user_id = next(
                (uid for uid, data in users_data.items() 
                 if data.get('sc_id') == sc_id and data.get('role') == 'sc'),
                None
            )
            
            if sc_user_id:
                await context.bot.send_message(
                    chat_id=int(sc_user_id),
                    text=f"üîë –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞: {confirmation_code}"
                )
            
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –°–¶:"
            )
            return ENTER_SC_CONFIRMATION_CODE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç –°–¶: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def check_sc_confirmation_code(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶"""
        try:
            entered_code = update.message.text.strip()
            request_id = context.user_data.get('current_request')
            
            if not request_id:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.")
                return ConversationHandler.END
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            if request_id not in requests_data:
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            expected_code = requests_data[request_id].get('confirmation_code')
            
            if entered_code != expected_code:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return ENTER_SC_CONFIRMATION_CODE
                
            # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
            await update.message.reply_text(
                "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞.\n"
                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done"
            )
            context.user_data['photos_from_sc'] = []
            return CREATE_REQUEST_PHOTOS
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_sc_pickup_photo(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–±–æ—Ä–µ –∏–∑ –°–¶"""
        try:
            if 'photos_from_sc' not in context.user_data:
                context.user_data['photos_from_sc'] = []
                
            photo = update.message.photo[-1]
            photo_file = await context.bot.get_file(photo.file_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–Ω—è—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º
            request_id = context.user_data['current_request']
            photo_path = f"photos/sc_pickup_{request_id}_{len(context.user_data['photos_from_sc'])}.jpg"
            
            await photo_file.download_to_drive(photo_path)
            context.user_data['photos_from_sc'].append(photo_path)
            
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ #{len(context.user_data['photos_from_sc'])} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done"
            )
            return CREATE_REQUEST_PHOTOS
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –∏–∑ –°–¶: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return CREATE_REQUEST_PHOTOS

    async def handle_sc_pickup_photos_done(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –°–¶"""
        try:
            request_id = context.user_data.get('current_request')
            photos = context.user_data.get('photos_from_sc', [])
            
            if not photos:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return CREATE_REQUEST_PHOTOS
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            
            if request_id not in requests_data:
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            request = requests_data[request_id]
            request['status'] = ORDER_STATUS_SC_TO_CLIENT
            request['sc_pickup_photos'] = photos
            save_requests(requests_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            for task_id, task in delivery_tasks.items():
                if task.get('request_id') == request_id:
                    task['status'] = ORDER_STATUS_SC_TO_CLIENT
                    save_delivery_tasks(delivery_tasks)
                    break
                    
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_message = (
                f"‚úÖ –î–æ—Å—Ç–∞–≤—â–∏–∫ {update.effective_user.first_name} –∑–∞–±—Ä–∞–ª —Ç–æ–≤–∞—Ä –∏–∑ –°–¶\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {ORDER_STATUS_SC_TO_CLIENT}\n\n"
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:"
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_id),
                        text=admin_message
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    media_group = []
                    for photo_path in photos:
                        if os.path.exists(photo_path):
                            media_group.append(InputMediaPhoto(
                                media=open(photo_path, 'rb'),
                                caption=f"–ó–∞—è–≤–∫–∞ #{request_id}"
                            ))
                    if media_group:
                        await context.bot.send_media_group(
                            chat_id=int(admin_id),
                            media=media_group
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_id = request.get('user_id')
            if client_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –∑–∞–±—Ä–∞–ª –≤–∞—à —Ç–æ–≤–∞—Ä –∏–∑ –°–¶ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º.\n"
                            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {request.get('location_display', '—É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∑–∞—è–≤–∫–µ')}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
                    for photo_path in photos:
                        if os.path.exists(photo_path):
                            with open(photo_path, 'rb') as photo_file:
                                await context.bot.send_photo(
                                    chat_id=int(client_id),
                                    photo=photo_file,
                                    caption=f"–§–æ—Ç–æ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"
                                )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
                    
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É"
            keyboard = [[
                InlineKeyboardButton(
                    "üì¶ –°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É", 
                    callback_data=f"deliver_to_client_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–Ω–æ–ø–∫–æ–π
            client_address = request.get('location_display', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
            client_name = request.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∞–¥—Ä–µ—Å—É:\n"
                f"üë§ {client_name}\n"
                f"üìç {client_address}\n\n"
                f"–ö–æ–≥–¥–∞ –ø—Ä–∏–±—É–¥–µ—Ç–µ –∫ –∫–ª–∏–µ–Ω—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É'",
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('photos_from_sc', None)
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –°–¶: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def _send_confirmation_code(self, context, recipient_id, code, request_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
        try:
            if DEBUG:
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —á–∞—Ç
                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}"
                )
            else:
                # –í –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
                users_data = load_users()
                user_phone = users_data.get(str(recipient_id), {}).get('phone')
                if user_phone:
                    phone = user_phone.replace('+', '')
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ –Ω–æ–º–µ—Ä: {phone}")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SMS-–∫–ª–∏–µ–Ω—Ç
                    sms_client = SMSBY(SMS_TOKEN, 'by')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä–æ–ª—è
                    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä–æ–ª—è...")
                    password_objects = sms_client.get_password_objects()
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–∞—Ä–æ–ª—è: {password_objects}")
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è
                    password_object = None
                    if password_objects and 'result' in password_objects and password_objects['result']:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–∞—Ä–æ–ª—è –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                        sorted_objects = sorted(
                            password_objects['result'], 
                            key=lambda x: x['d_create'], 
                            reverse=True
                        )
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è —Ç–∏–ø–∞ 'numbers'
                        password_object = next(
                            (obj for obj in sorted_objects if obj['type_id'] == 'numbers'),
                            None
                        )
                        if not password_object:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ 'numbers', –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                            password_object = sorted_objects[0]
                    
                    if not password_object:
                        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–∞—Ä–æ–ª—è")
                        raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä–æ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                        
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è: {password_object}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ñ–∞-–∏–º–µ–Ω–∞
                    alphanames = sms_client.get_alphanames()
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ñ–∞-–∏–º–µ–Ω–∞: {alphanames}")
                    
                    if alphanames:
                        alphaname_id = next(iter(alphanames.keys()))
                        sms_message = f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: %CODE%"
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {sms_message}")
                        
                        sms_response = sms_client.send_sms_message_with_code(
                            password_object_id=password_object['id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –æ–±—ä–µ–∫—Ç–∞
                            phone=phone,
                            message=sms_message,
                            alphaname_id=alphaname_id
                        )
                        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {sms_response}")
                        
                        if 'code' in sms_response:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
                            requests_data = load_requests()
                            if request_id in requests_data:
                                requests_data[request_id]['sms_id'] = sms_response.get('sms_id')
                                requests_data[request_id]['confirmation_code'] = sms_response['code']
                                save_requests(requests_data)
                            
                            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é, —á—Ç–æ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ SMS
                            await context.bot.send_message(
                                chat_id=recipient_id,
                                text=f"üì≤ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:"
                            )
                            return True
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: –Ω–µ—Ç –∫–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω")
                        raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
                else:
                    logger.error(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_id} –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                    raise Exception("–ù–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —á–∞—Ç
            await context.bot.send_message(
                chat_id=recipient_id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS. –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}"
            )
            return False

    async def handle_deliver_to_client(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É'"""
        query = update.callback_query
        await query.answer()
        try:
            request_id = query.data.split('_')[-1]
            context.user_data['current_request'] = request_id
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            users_data = load_users()
            
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END 
                
            request = requests_data[request_id]
            client_id = request.get('user_id')
            client_data = users_data.get(str(client_id), {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–ª–∏–µ–Ω—Ç—É –æ–ø–ª–∞—Ç–∏—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É
            payment_required = False
            final_price = Decimal(request.get('final_price', '0'))
            repair_price = Decimal(request.get('repair_price', '0'))
            delivery_cost = Decimal(request.get('delivery_cost', '0'))
            
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (30% –æ—Ç repair_price + 20)
            if final_price > 0 and repair_price > 0:
                expected_payment = (repair_price * Decimal('0.3')) + Decimal('20')
                if final_price >= expected_payment:
                    payment_required = True
                    
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            requests_data[request_id]['status'] = ORDER_STATUS_SC_TO_CLIENT
            save_requests(requests_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            task_updated = False
            for task_id, task in delivery_tasks.items():
                if task.get('request_id') == request_id:
                    task['status'] = ORDER_STATUS_SC_TO_CLIENT
                    task_updated = True
                    break
            if not task_updated:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            save_delivery_tasks(delivery_tasks)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
            photos = requests_data[request_id].get('sc_pickup_photos', [])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if client_id:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–±—ã–ª —Å –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ –≤–∞–º.\n"
                            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {requests_data[request_id].get('location_display', '—É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∑–∞—è–≤–∫–µ')}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
                    for photo_path in photos:
                        if os.path.exists(photo_path):
                            with open(photo_path, 'rb') as photo_file:
                                await context.bot.send_photo(
                                    chat_id=int(client_id),
                                    photo=photo_file,
                                    caption=f"–§–æ—Ç–æ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"
                                )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
                    
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_message = (
                f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ {update.effective_user.first_name} –ø—Ä–∏–±—ã–ª –∫ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {ORDER_STATUS_SC_TO_CLIENT}"
            )
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_id),
                        text=admin_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join(random.choices('0123456789', k=4))
            requests_data[request_id]['confirmation_code'] = confirmation_code
            save_requests(requests_data)
            
            # –ß–ï–¢–ö–û –†–ê–ó–î–ï–õ–Ø–ï–ú –õ–û–ì–ò–ö–£ –¢–ï–°–¢–û–í–û–ì–û –ò –ë–û–ï–í–û–ì–û –†–ï–ñ–ò–ú–û–í
            
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
            if DEBUG:
                await query.edit_message_text(
                    f"üî¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {confirmation_code}\n\n"
                    f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                if client_id:
                    try:
                        await context.bot.send_message(
                            chat_id=int(client_id),
                            text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
                return ENTER_CONFIRMATION_CODE
            
            # –í –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–ª–∏–µ–Ω—Ç—É
            else:
                if client_id and client_data.get('phone'):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
                    sms_sent = await self._send_confirmation_code(
                        context, 
                        int(client_id), 
                        confirmation_code, 
                        request_id
                    )
                    
                    if sms_sent:
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        await query.edit_message_text(
                            "üì≤ –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                            "–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –≤–≤–µ–¥—ë—Ç –∫–æ–¥ –∏–∑ SMS."
                        )
                    else:
                        # –ï—Å–ª–∏ SMS –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                        await query.edit_message_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: {confirmation_code}\n\n"
                            f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                        )
                        
                        if client_id:
                            await context.bot.send_message(
                                chat_id=int(client_id),
                                text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                            )
                    return ENTER_CONFIRMATION_CODE
                else:
                    # –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    await query.edit_message_text(
                        f"üî¢ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {confirmation_code}\n\n"
                        f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                    )
                    
                    if client_id:
                        await context.bot.send_message(
                            chat_id=int(client_id),
                            text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                        )
                    
                    return ENTER_CONFIRMATION_CODE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_client_confirmation_code(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            entered_code = update.message.text.strip()
            request_id = context.user_data.get('current_request')
            
            if not request_id:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.")
                return ConversationHandler.END
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            users_data = load_users()
            
            if request_id not in requests_data:
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            request = requests_data[request_id]
            client_id = request.get('user_id')
            expected_code = request.get('confirmation_code')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –≤–≤–æ–¥–∏—Ç –∫–æ–¥ - –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫
            user_id = str(update.effective_user.id)
            
            # –ï—Å–ª–∏ –∫–æ–¥ –≤–≤–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç
            if client_id and user_id == str(client_id):
                if entered_code == expected_code:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ–ø–ª–∞—Ç–∞
                    final_price = Decimal(request.get('final_price', '0'))
                    repair_price = Decimal(request.get('repair_price', '0'))
                    delivery_cost = Decimal(request.get('delivery_cost', '0'))
                    
                    if final_price > 0:
                        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                        payment_data = {
                            'amount': float(final_price),
                            'description': f"–û–ø–ª–∞—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}"
                        }
                        
                        try:
                            async with aiohttp.ClientSession() as session:
                                payment_request_data = {'payment_request': json.dumps(payment_data)}
                                async with session.post(
                                    PAYMENT_API_URL,
                                    data=payment_request_data,
                                    timeout=10
                                ) as response:
                                    if response.status != 200:
                                        response_text = await response.text()
                                        raise Exception(f"HTTP error {response.status}: {response_text}")
                                        
                                    result = await response.json()
                                    
                                    if not result.get('order_id') or not result.get('payment_url'):
                                        raise Exception(f"Invalid API response: {result}")
                                        
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
                                    request['final_payment_order_id'] = result['order_id']
                                    save_requests(requests_data)
                                    
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç—É
                                    keyboard = [
                                        [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url=result['payment_url'])],
                                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_final_payment_{request_id}")]
                                    ]
                                    reply_markup = InlineKeyboardMarkup(keyboard)
                                    
                                    await context.bot.send_message(
                                        chat_id=int(client_id),
                                        text=f"üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É: {final_price:.2f} BYN\n"
                                            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                                        reply_markup=reply_markup
                                    )
                                    
                                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                    delivery_id = request.get('assigned_delivery')
                                    if delivery_id:
                                        await context.bot.send_message(
                                            chat_id=int(delivery_id),
                                            text=f"üîÑ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –¥–æ–ª–∂–µ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å {final_price:.2f} BYN. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
                                        )
                                    
                                    return WAITING_FINAL_PAYMENT
                                    
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                            await context.bot.send_message(
                                chat_id=int(client_id),
                                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {str(e)}"
                            )
                            return ConversationHandler.END
                    else:
                        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        delivery_id = request.get('assigned_delivery')
                        if delivery_id:
                            await context.bot.send_message(
                                chat_id=int(delivery_id),
                                text="‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö."
                            )
                        
                        context.user_data['awaiting_delivery_photos'] = True
                        return CREATE_REQUEST_PHOTOS
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return ENTER_CONFIRMATION_CODE
                    
            # –ï—Å–ª–∏ –∫–æ–¥ –≤–≤–æ–¥–∏—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫ (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
            elif user_id == str(request.get('assigned_delivery')):
                if entered_code == expected_code:
                    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫ –≤–≤–æ–¥–∏—Ç –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç
                    await update.message.reply_text(
                        "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω—ã–π! –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ."
                    )
                    return ConversationHandler.END
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return ENTER_CONFIRMATION_CODE
            else:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫ –º–æ–≥—É—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                return ENTER_CONFIRMATION_CODE
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_delivery_photos(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            if 'delivery_photos' not in context.user_data:
                context.user_data['delivery_photos'] = []
                
            photo = update.message.photo[-1]
            photo_file = await context.bot.get_file(photo.file_id)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            request_id = context.user_data.get('current_request')
            timestamp = int(time.time())
            photo_path = f"photos/delivery_{request_id}_{timestamp}_{len(context.user_data['delivery_photos'])}.jpg"
            
            await photo_file.download_to_drive(photo_path)
            context.user_data['delivery_photos'].append(photo_path)
            
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ #{len(context.user_data['delivery_photos'])} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done"
            )
            return CREATE_REQUEST_PHOTOS
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return CREATE_REQUEST_PHOTOS

    async def handle_delivery_photos_done(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            request_id = context.user_data.get('current_request')
            photos = context.user_data.get('delivery_photos', [])
            
            if not photos:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return CREATE_REQUEST_PHOTOS
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            
            if request_id not in requests_data:
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            request = requests_data[request_id]
            request['status'] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
            request['delivery_photos'] = photos
            save_requests(requests_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            for task_id, task in delivery_tasks.items():
                if task.get('request_id') == request_id:
                    task['status'] = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                    save_delivery_tasks(delivery_tasks)
                    break
                    
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_message = (
                f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {update.effective_user.first_name}\n\n"
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:"
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_id),
                        text=admin_message
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    media_group = []
                    for photo_path in photos:
                        if os.path.exists(photo_path):
                            media_group.append(InputMediaPhoto(
                                media=open(photo_path, 'rb'),
                                caption=f"–ó–∞—è–≤–∫–∞ #{request_id}"
                            ))
                    if media_group:
                        await context.bot.send_media_group(
                            chat_id=int(admin_id),
                            media=media_group
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_id = request.get('user_id')
            if client_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
                    keyboard = [[
                        InlineKeyboardButton(
                            "üåü –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", 
                            callback_data=f"rate_service_{request_id}"
                        )
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
                    
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            await update.message.reply_text(
                "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.pop('current_request', None)
            context.user_data.pop('delivery_photos', None)
            context.user_data.pop('awaiting_delivery_photos', None)
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_final_payment_check(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º –æ—Å—Ç–∞–≤—à–µ–π—Å—è —Å—É–º–º—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            request_id = query.data.split('_')[-1]
            requests_data = load_requests()
            
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ConversationHandler.END
                
            request = requests_data[request_id]
            order_id = request.get('final_payment_order_id')
            client_id = request.get('user_id')
            delivery_id = request.get('assigned_delivery')
            
            if not order_id:
                await query.edit_message_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ConversationHandler.END
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                status_data = {'payment_status_order_id': order_id}
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        PAYMENT_API_URL,
                        data=status_data,
                        timeout=10
                    ) as response:
                        if response.status != 200:
                            response_text = await response.text()
                            raise Exception(f"HTTP error {response.status}: {response_text}")
                        result = await response.json()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
                        if (result.get('errorCode') == '0' and 
                            result.get('orderStatus') == 2 and 
                            result.get('paymentAmountInfo', {}).get('paymentState') == 'DEPOSITED'):
                            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
                            request['status'] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
                            request['payment_status'] = "paid"
                            save_requests(requests_data)
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                            await context.bot.send_message(
                                chat_id=int(client_id),
                                text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                            )
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            if delivery_id:
                                await context.bot.send_message(
                                    chat_id=int(delivery_id),
                                    text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö."
                                )
                            context.user_data['awaiting_delivery_photos'] = True
                            return CREATE_REQUEST_PHOTOS
                        else:
                            # –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
                            error_message = result.get('errorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                            payment_state = result.get('paymentAmountInfo', {}).get('paymentState', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            order_status = result.get('orderStatus', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                            keyboard = [
                                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_final_payment_{request_id}")],
                                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_final_payment_{request_id}")]
                            ]
                            reply_markup = InlineKeyboardMarkup(keyboard)
                            await query.edit_message_text(
                                f"‚è≥ –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω: {error_message}\n"
                                f"–°—Ç–∞—Ç—É—Å: {payment_state}, –ö–æ–¥: {order_status}\n\n"
                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                                reply_markup=reply_markup
                            )
                            return WAITING_FINAL_PAYMENT
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_final_payment_{request_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_final_payment_{request_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}",
                    reply_markup=reply_markup
                )
                return WAITING_FINAL_PAYMENT
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_delivered_to_client(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞—è–≤–∫–µ
            request = requests_data.get(request_id)
            if request:
                request['status'] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
                save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–¥–∞—á–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            for task in delivery_tasks.values():
                if task.get('request_id') == request_id:
                    task['status'] = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                    save_delivery_tasks(delivery_tasks)
                    break
            await query.edit_message_text(
                "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!"
            )
            # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∫–∏
            client_id = requests_data[request_id].get('user_id')
            if client_id:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ
                    await context.bot.send_message(
                        chat_id=client_id,
                        text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
                    )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∫–∏
                    keyboard = [[InlineKeyboardButton(
                        "üåü –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", 
                        callback_data=f"rate_service_{request_id}"
                    )]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=client_id,
                        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:",
                        reply_markup=reply_markup
                    )
                    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client_id} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∫–ª–∏–µ–Ω—Ç—É: {e}")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return ConversationHandler.END

    async def accept_delivery_from_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        delivery_id = str(update.effective_user.id)
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            users_data = load_users()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            request = requests_data.get(request_id)
            if not request:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            task_id = None
            task = None
            for t_id, t_data in delivery_tasks.items():
                if t_data.get('request_id') == request_id:
                    task_id = t_id
                    task = t_data
                    break
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è–ª –ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ –∑–∞–∫–∞–∑
            if task.get('assigned_delivery_id'):
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º")
                return
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task.update({
                'assigned_delivery_id': delivery_id,
                'status': ORDER_STATUS_PICKUP_FROM_SC,
                'accepted_at': int(time.time())
            })
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            request['status'] = ORDER_STATUS_PICKUP_FROM_SC
            request['assigned_delivery'] = delivery_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            save_delivery_tasks(delivery_tasks)
            save_requests(requests_data)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –°–¶
            sc_id = request.get('assigned_sc')
            if sc_id:
                for user_id, user_data in users_data.items():
                    if user_data.get('role') == 'sc' and user_data.get('sc_id') == sc_id:
                        try:
                            delivery_user = users_data.get(delivery_id, {})
                            await context.bot.send_message(
                                chat_id=int(user_id),
                                text=(
                                    f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ #{request_id}\n"
                                    f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_user.get('name')} - "
                                    f"{delivery_user.get('phone')}\n"
                                    f"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –ø—É—Ç–∏ –≤ –°–¶"
                                )
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –°–¶: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            await self.update_delivery_messages(context.bot, task_id, task)
            # –û—Ç–≤–µ—á–∞–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
            await query.edit_message_text(
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{request_id}. –°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –ø—É—Ç–∏ –≤ –°–¶"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞")

    async def handle_get_sc_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        delivery_id = str(update.effective_user.id)
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            users_data = load_users()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É
            task = None
            for t_id, t_data in delivery_tasks.items():
                if (t_data.get('request_id') == request_id and 
                    t_data.get('delivery_type') == 'sc_to_client' and
                    t_data.get('assigned_delivery_id') == delivery_id):
                    task = t_data
                    break
            if not task:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç—É –¥–æ—Å—Ç–∞–≤–∫—É")
                return ConversationHandler.END            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join([str(random.randint(0, 9)) for _ in range(4)])
            context.user_data['sc_confirmation_code'] = confirmation_code
            context.user_data['current_request'] = request_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –°–¶
            request = requests_data.get(request_id)
            if request:
                sc_id = request.get('assigned_sc')
                if sc_id:
                    for user_id, user_data in users_data.items():
                        if user_data.get('role') == 'sc' and user_data.get('sc_id') == sc_id:
                            try:
                                delivery_user = users_data.get(delivery_id, {})
                                await context.bot.send_message(
                                    chat_id=int(user_id),
                                    text=(
                                        f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–±—ã–ª –∑–∞ –∑–∞–∫–∞–∑–æ–º #{request_id}\n"
                                        f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_user.get('name')} - "
                                        f"{delivery_user.get('phone')}\n"
                                        f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_code}"
                                    )
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –°–¶: {e}")            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task['status'] = '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –°–¶'
            delivery_tasks[t_id] = task
            save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            if request:
                request['status'] = '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –°–¶'
                save_requests(requests_data)
            await query.edit_message_text(
                f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –°–¶.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –°–¶:"
            )
            return ENTER_SC_CONFIRMATION_CODE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return ConversationHandler.END

    async def show_available_sc_tasks(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶"""
        try:
            delivery_tasks = load_delivery_tasks()
            available_tasks = {}
            for task_id, task in delivery_tasks.items():
                if (task.get('delivery_type') == 'sc_to_client' and 
                    not task.get('assigned_delivery_id')):
                    available_tasks[task_id] = task  
            if not available_tasks:
                await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶.")
                return
            for task_id, task in available_tasks.items():
                keyboard = [[
                    InlineKeyboardButton(
                        "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                        callback_data=f"accept_sc_delivery_{task['request_id']}"
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                message = (
                    f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –∏–∑ –°–¶\n\n"
                    f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å –∏–∑ –°–¶:\n"
                    f"üè¢ {task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {task.get('sc_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:\n"
                    f"üë§ {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {task.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üì± {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                )
                await update.message.reply_text(message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏–∑ –°–¶: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")