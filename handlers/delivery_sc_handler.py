from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from config import (
    ORDER_STATUS_PICKUP_FROM_SC,
    ORDER_STATUS_SC_TO_CLIENT,
    CREATE_REQUEST_PHOTOS,
    ENTER_SC_CONFIRMATION_CODE, 
    ORDER_STATUS_DELIVERY_TO_SC,
    ORDER_STATUS_CLIENT_REJECTED,
    ORDER_STATUS_WAITING_SC,
    ORDER_STATUS_IN_SC,
    ORDER_STATUS_READY,
    ORDER_STATUS_PICKUP_FROM_SC,
    ENTER_CONFIRMATION_CODE,
    ADMIN_IDS
)
from handlers.delivery_handler import DeliveryHandler
from database import (
    load_requests, save_requests,
    load_delivery_tasks, save_delivery_tasks,
    load_users, load_service_centers
)
from utils import notify_client
import logging
import time
import random
import os

logger = logging.getLogger(__name__)

class DeliverySCHandler(DeliveryHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶"""

    async def handle_pickup_from_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º request_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['current_request'] = request_id
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶
            keyboard = [[
                InlineKeyboardButton(
                    "üì± –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶", 
                    callback_data=f"request_sc_confirmation_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶:",
                reply_markup=reply_markup
            )
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–±–æ—Ä–∞ –∏–∑ –°–¶: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return ConversationHandler.END

    async def handle_request_sc_confirmation_code(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶"""
        query = update.callback_query
        await query.answer()
        
        try:
            request_id = query.data.split('_')[-1]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            users_data = load_users()
            
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
            sc_id = requests_data[request_id].get('assigned_sc')
            if not sc_id:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –°–¶.")
                return ConversationHandler.END
                
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°–¶
            sc_user_id = None
            for user_id, user_data in users_data.items():
                if user_data.get('role') == 'sc' and user_data.get('sc_id') == sc_id:
                    sc_user_id = user_id
                    break
                    
            if not sc_user_id:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°–¶.")
                return ConversationHandler.END
                
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join(random.choices('0123456789', k=4))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            context.user_data['sc_confirmation_code'] = confirmation_code
            context.user_data['current_request'] = request_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –°–¶
            try:
                delivery_name = update.effective_user.first_name
                await context.bot.send_message(
                    chat_id=int(sc_user_id),
                    text=f"üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_name}: {confirmation_code}\n\n"
                         f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è."
                )
                
                # –°–æ–æ–±—â–∞–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫—É, —á—Ç–æ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                await query.edit_message_text(
                    f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É.\n\n"
                    f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –°–¶ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ –∏ —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º –∫–æ–¥.\n"
                    f"–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç –°–¶:"
                )
                
                return ENTER_SC_CONFIRMATION_CODE
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –°–¶ {sc_user_id}: {e}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –°–¶. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return ConversationHandler.END
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_sc_photos_after_pickup(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–ª–µ –∑–∞–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –°–¶"""
        if 'photos_from_sc' not in context.user_data:
            return
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        photo_path = f"photos/from_sc_{len(context.user_data['photos_from_sc'])}_{context.user_data['current_request']}.jpg"
        await photo_file.download_to_drive(photo_path)
        context.user_data['photos_from_sc'].append(photo_path)
        await update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
        return CREATE_REQUEST_PHOTOS

    async def handle_sc_photos_done(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–ª–µ –∑–∞–±–æ—Ä–∞ –∏–∑ –°–¶"""
        try:
            request_id = context.user_data.get('current_request')
            photos = context.user_data.get('photos_from_sc', [])
            
            if not photos:
                await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return CREATE_REQUEST_PHOTOS
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            
            if request_id not in requests_data:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∑–∞—è–≤–∫–µ
            requests_data[request_id]['sc_pickup_photos'] = photos
            save_requests(requests_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                admin_message = (
                    f"üì∏ –î–æ—Å—Ç–∞–≤—â–∏–∫ {update.effective_user.first_name} —Å–¥–µ–ª–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –°–¶\n"
                    f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                    f"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤—â–∏–∫ –∑–∞–±—Ä–∞–ª –∏–∑ –°–¶"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                for admin_id in ADMIN_IDS:
                    try:
                        await context.bot.send_message(
                            chat_id=int(admin_id),
                            text=admin_message
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                        for photo_path in photos:
                            if os.path.exists(photo_path):
                                with open(photo_path, 'rb') as photo_file:
                                    await context.bot.send_photo(
                                        chat_id=int(admin_id),
                                        photo=photo_file,
                                        caption=f"–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}"
                                    )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É"
            keyboard = [[
                InlineKeyboardButton(
                    "üì¶ –°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É", 
                    callback_data=f"deliver_to_client_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–Ω–æ–ø–∫–æ–π
            client_address = requests_data[request_id].get('location_display', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
            client_name = requests_data[request_id].get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∞–¥—Ä–µ—Å—É:\n"
                f"üë§ {client_name}\n"
                f"üìç {client_address}\n\n"
                f"–ö–æ–≥–¥–∞ –ø—Ä–∏–±—É–¥–µ—Ç–µ –∫ –∫–ª–∏–µ–Ω—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É'",
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('photos_from_sc', None)
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–ª–µ –∑–∞–±–æ—Ä–∞ –∏–∑ –°–¶: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return ConversationHandler.END

    async def handle_client_confirmation_request(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            request_id = query.data.split('_')[-1]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
            client_id = requests_data[request_id].get('user_id')
            if not client_id:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.")
                return ConversationHandler.END
                
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join(random.choices('0123456789', k=4))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            context.user_data['client_confirmation_code'] = confirmation_code
            context.user_data['current_request'] = request_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É
            try:
                await context.bot.send_message(
                    chat_id=int(client_id),
                    text=f"üì± –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {confirmation_code}\n\n"
                         f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è."
                )
                
                # –°–æ–æ–±—â–∞–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫—É, —á—Ç–æ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                await query.edit_message_text(
                    f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.\n\n"
                    f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ –∏ —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º –∫–æ–¥.\n"
                    f"–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:"
                )
                
                return ENTER_CONFIRMATION_CODE
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return ConversationHandler.END
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def handle_client_confirmation_code(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥
            entered_code = update.message.text.strip()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ ID –∑–∞—è–≤–∫–∏
            stored_code = context.user_data.get('client_confirmation_code')
            request_id = context.user_data.get('current_request')
            
            if not stored_code or not request_id:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞.")
                return ConversationHandler.END
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–¥–æ–≤
            if entered_code != stored_code:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ENTER_CONFIRMATION_CODE
                
            # –ö–æ–¥—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            
            if request_id not in requests_data:
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            requests_data[request_id]['status'] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
            save_requests(requests_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            for task_id, task in delivery_tasks.items():
                if task.get('request_id') == request_id:
                    task['status'] = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                    save_delivery_tasks(delivery_tasks)
                    break
                    
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
            await update.message.reply_text(
                "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω—ã–π!\n\n"
                "–î–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            client_id = requests_data[request_id].get('user_id')
            if client_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                             f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
                    keyboard = [[InlineKeyboardButton(
                        "üåü –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", 
                        callback_data=f"rate_service_{request_id}"
                    )]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:",
                        reply_markup=reply_markup
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            admin_message = (
                f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{request_id} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.\n"
                f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {update.effective_user.first_name}\n"
                f"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_id),
                        text=admin_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('client_confirmation_code', None)
            context.user_data.pop('current_request', None)
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.")
            return ConversationHandler.END

    async def handle_delivered_to_client(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞—è–≤–∫–µ
            request = requests_data.get(request_id)
            if request:
                request['status'] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
                save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–¥–∞—á–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            for task in delivery_tasks.values():
                if task.get('request_id') == request_id:
                    task['status'] = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                    save_delivery_tasks(delivery_tasks)
                    break
            await query.edit_message_text(
                "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!"
            )
            # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∫–∏
            client_id = requests_data[request_id].get('user_id')
            if client_id:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ
                    await context.bot.send_message(
                        chat_id=client_id,
                        text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
                    )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∫–∏
                    keyboard = [[InlineKeyboardButton(
                        "üåü –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", 
                        callback_data=f"rate_service_{request_id}"
                    )]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=client_id,
                        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:",
                        reply_markup=reply_markup
                    )
                    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client_id} –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É –∫–ª–∏–µ–Ω—Ç—É: {e}")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return ConversationHandler.END

    async def accept_delivery_from_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        delivery_id = str(update.effective_user.id)
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            users_data = load_users()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            request = requests_data.get(request_id)
            if not request:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            task_id = None
            task = None
            for t_id, t_data in delivery_tasks.items():
                if t_data.get('request_id') == request_id:
                    task_id = t_id
                    task = t_data
                    break
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è–ª –ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ –∑–∞–∫–∞–∑
            if task.get('assigned_delivery_id'):
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º")
                return
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task.update({
                'assigned_delivery_id': delivery_id,
                'status': ORDER_STATUS_PICKUP_FROM_SC,
                'accepted_at': int(time.time())
            })
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            request['status'] = ORDER_STATUS_PICKUP_FROM_SC
            request['assigned_delivery'] = delivery_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            save_delivery_tasks(delivery_tasks)
            save_requests(requests_data)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –°–¶
            sc_id = request.get('assigned_sc')
            if sc_id:
                for user_id, user_data in users_data.items():
                    if user_data.get('role') == 'sc' and user_data.get('sc_id') == sc_id:
                        try:
                            delivery_user = users_data.get(delivery_id, {})
                            await context.bot.send_message(
                                chat_id=int(user_id),
                                text=(
                                    f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ #{request_id}\n"
                                    f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_user.get('name')} - "
                                    f"{delivery_user.get('phone')}\n"
                                    f"–°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –ø—É—Ç–∏ –≤ –°–¶"
                                )
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –°–¶: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            await self.update_delivery_messages(context.bot, task_id, task)
            # –û—Ç–≤–µ—á–∞–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
            await query.edit_message_text(
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{request_id}. –°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –ø—É—Ç–∏ –≤ –°–¶"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞")

    async def handle_sc_pickup_photo(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–±–æ—Ä–µ –∏–∑ –°–¶"""
        if 'photos_from_sc' not in context.user_data:
            context.user_data['photos_from_sc'] = []
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        photo_path = f"photos/from_sc_{len(context.user_data['photos_from_sc'])}_{context.user_data['current_request']}.jpg"
        await photo_file.download_to_drive(photo_path)
        context.user_data['photos_from_sc'].append(photo_path)
        await update.message.reply_text("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
        return CREATE_REQUEST_PHOTOS

    async def handle_sc_pickup_photos_done(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–±–æ—Ä–µ –∏–∑ –°–¶"""
        try:
            request_id = context.user_data.get('current_request')
            photos = context.user_data.get('photos_from_sc', [])
            if not photos:
                await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return CREATE_REQUEST_PHOTOS
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            requests_data[request_id].update({
                'status': ORDER_STATUS_SC_TO_CLIENT,
                'sc_pickup_photos': photos
            })
            save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ delivery_tasks
            for task in delivery_tasks.values():
                if task.get('request_id') == request_id:
                    task['status'] = ORDER_STATUS_SC_TO_CLIENT
                    break
            save_delivery_tasks(delivery_tasks)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_id = requests_data[request_id].get('user_id')
            if client_id:
                await notify_client(
                    context.bot,
                    client_id,
                    "–î–æ—Å—Ç–∞–≤—â–∏–∫ –∑–∞–±—Ä–∞–ª –≤–∞—à —Ç–æ–≤–∞—Ä –∏–∑ –°–¶ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫ –≤–∞–º."
                )
            keyboard = [[
                InlineKeyboardButton(
                    "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É",
                    callback_data=f"delivered_to_client_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω –∏–∑ –°–¶. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –°–¶: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return ConversationHandler.END

    async def handle_sc_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            task = None
            for t in delivery_tasks.values():
                if t.get('request_id') == request_id and t.get('is_sc_to_client'):
                    task = t
                    break
            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ConversationHandler.END
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join([str(random.randint(0, 9)) for _ in range(4)])
            context.user_data['confirmation_code'] = confirmation_code
            context.user_data['current_request'] = request_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –°–¶
            sc_id = requests_data[request_id].get('assigned_sc')
            users_data = load_users()
            sc_user_id = None
            for user_id, user_data in users_data.items():
                if user_data.get('role') == 'sc' and user_data.get('sc_id') == sc_id:
                    sc_user_id = user_id
                    break
            if sc_user_id:
                await context.bot.send_message(
                    chat_id=sc_user_id,
                    text=f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É: {confirmation_code}"
                )
                await query.edit_message_text(
                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –°–¶:"
                )
                return ENTER_CONFIRMATION_CODE
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –°–¶")
                return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –°–¶: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return ConversationHandler.END

    async def handle_accept_sc_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        delivery_id = str(update.effective_user.id)
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            users_data = load_users()
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            task = None
            task_id = None
            for t_id, t_data in delivery_tasks.items():
                if (t_data.get('request_id') == request_id and 
                    t_data.get('delivery_type') == 'sc_to_client'):
                    task = t_data
                    task_id = t_id
                    break
            if task.get('assigned_delivery_id'):
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º")
                return ConversationHandler.END
            task.update({
                'assigned_delivery_id': delivery_id,
                'status': '–ü—Ä–∏–Ω—è—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º',
                'accepted_at': int(time.time())
            })
            delivery_tasks[task_id] = task
            save_delivery_tasks(delivery_tasks)
            request = requests_data.get(request_id)
            if request:
                request.update({
                    'status': '–ü—Ä–∏–Ω—è—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º',
                    'assigned_delivery': delivery_id
                })
                save_requests(requests_data)
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [[
                InlineKeyboardButton(
                    "üîÑ –ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"get_sc_confirmation_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)            
            await query.edit_message_text(
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{request_id} –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞")
            return ConversationHandler.END

    async def handle_get_sc_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        delivery_id = str(update.effective_user.id)
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            users_data = load_users()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∞–≤—â–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É
            task = None
            for t_id, t_data in delivery_tasks.items():
                if (t_data.get('request_id') == request_id and 
                    t_data.get('delivery_type') == 'sc_to_client' and
                    t_data.get('assigned_delivery_id') == delivery_id):
                    task = t_data
                    break
            if not task:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç—É –¥–æ—Å—Ç–∞–≤–∫—É")
                return ConversationHandler.END            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join([str(random.randint(0, 9)) for _ in range(4)])
            context.user_data['sc_confirmation_code'] = confirmation_code
            context.user_data['current_request'] = request_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –°–¶
            request = requests_data.get(request_id)
            if request:
                sc_id = request.get('assigned_sc')
                if sc_id:
                    for user_id, user_data in users_data.items():
                        if user_data.get('role') == 'sc' and user_data.get('sc_id') == sc_id:
                            try:
                                delivery_user = users_data.get(delivery_id, {})
                                await context.bot.send_message(
                                    chat_id=int(user_id),
                                    text=(
                                        f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–±—ã–ª –∑–∞ –∑–∞–∫–∞–∑–æ–º #{request_id}\n"
                                        f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_user.get('name')} - "
                                        f"{delivery_user.get('phone')}\n"
                                        f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_code}"
                                    )
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –°–¶: {e}")            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            task['status'] = '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –°–¶'
            delivery_tasks[t_id] = task
            save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            if request:
                request['status'] = '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –°–¶'
                save_requests(requests_data)
            await query.edit_message_text(
                f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –°–¶.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –°–¶:"
            )
            return ENTER_SC_CONFIRMATION_CODE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return ConversationHandler.END

    async def show_available_sc_tasks(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶"""
        try:
            delivery_tasks = load_delivery_tasks()
            available_tasks = {}
            for task_id, task in delivery_tasks.items():
                if (task.get('delivery_type') == 'sc_to_client' and 
                    not task.get('assigned_delivery_id')):
                    available_tasks[task_id] = task  
            if not available_tasks:
                await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶.")
                return
            for task_id, task in available_tasks.items():
                keyboard = [[
                    InlineKeyboardButton(
                        "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                        callback_data=f"accept_sc_delivery_{task['request_id']}"
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                message = (
                    f"üì¶ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –∏–∑ –°–¶\n\n"
                    f"1Ô∏è‚É£ –ó–∞–±—Ä–∞—Ç—å –∏–∑ –°–¶:\n"
                    f"üè¢ {task.get('sc_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {task.get('sc_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"2Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:\n"
                    f"üë§ {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç {task.get('client_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üì± {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '')[:100]}..."
                )
                await update.message.reply_text(message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏–∑ –°–¶: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

    async def handle_sc_pickup_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        try:
            requests_data = load_requests()
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join([str(random.randint(0, 9)) for _ in range(4)])
            context.user_data['sc_confirmation_code'] = confirmation_code
            context.user_data['current_request'] = request_id
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –°–¶
            request = requests_data.get(request_id)
            sc_id = request.get('assigned_sc')
            users_data = load_users()
            for user_id, user_data in users_data.items():
                if user_data.get('role') == 'sc' and user_data.get('sc_id') == sc_id:
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É: {confirmation_code}"
                    )
                    break
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –°–¶:"
            )
            return ENTER_SC_CONFIRMATION_CODE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –°–¶: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return ConversationHandler.END

    async def check_sc_confirmation_code(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –°–¶"""
        entered_code = update.message.text.strip()
        request_id = context.user_data.get('current_request')
        correct_code = context.user_data.get('sc_confirmation_code')
        
        if entered_code != correct_code:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return ENTER_SC_CONFIRMATION_CODE
            
        try:
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            if request_id in requests_data:
                request = requests_data[request_id]
                request['status'] = '–î–æ—Å—Ç–∞–≤—â–∏–∫ –∑–∞–±—Ä–∞–ª –∏–∑ –°–¶'
                save_requests(requests_data)
                
                # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
                task_updated = False
                for task_id, task in delivery_tasks.items():
                    if task.get('request_id') == request_id:
                        task['status'] = '–î–æ—Å—Ç–∞–≤—â–∏–∫ –∑–∞–±—Ä–∞–ª –∏–∑ –°–¶'
                        task_updated = True
                        break
                        
                if not task_updated:
                    logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
                
                save_delivery_tasks(delivery_tasks)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                context.user_data['photos_from_sc'] = []
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
                await update.message.reply_text(
                    "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ –°–¶.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n"
                    "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done"
                )
                
                # –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                if 'sc_confirmation_code' in context.user_data:
                    del context.user_data['sc_confirmation_code']
                
                return CREATE_REQUEST_PHOTOS
            else:
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –°–¶: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞")
            return ConversationHandler.END

    async def handle_deliver_to_client(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É'"""
        query = update.callback_query
        await query.answer()
        
        try:
            request_id = query.data.split('_')[-1]
            context.user_data['current_request'] = request_id
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            requests_data[request_id]['status'] = ORDER_STATUS_SC_TO_CLIENT
            save_requests(requests_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            task_updated = False
            for task_id, task in delivery_tasks.items():
                if task.get('request_id') == request_id:
                    task['status'] = ORDER_STATUS_SC_TO_CLIENT
                    task_updated = True
                    break
                    
            if not task_updated:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            
            save_delivery_tasks(delivery_tasks)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
            photos = requests_data[request_id].get('sc_pickup_photos', [])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_id = requests_data[request_id].get('user_id')
            if client_id:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–±—ã–ª —Å –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ –≤–∞–º.\n"
                             f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {requests_data[request_id].get('location_display', '—É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∑–∞—è–≤–∫–µ')}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
                    for photo_path in photos:
                        if os.path.exists(photo_path):
                            with open(photo_path, 'rb') as photo_file:
                                await context.bot.send_photo(
                                    chat_id=int(client_id),
                                    photo=photo_file,
                                    caption=f"–§–æ—Ç–æ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"
                                )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_message = (
                f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ {update.effective_user.first_name} –ø—Ä–∏–±—ã–ª –∫ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {ORDER_STATUS_SC_TO_CLIENT}"
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_id),
                        text=admin_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            confirmation_code = ''.join(random.choices('0123456789', k=4))
            context.user_data['client_confirmation_code'] = confirmation_code
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç—É
            if client_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"üì± –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {confirmation_code}\n\n"
                             f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            
            # –°–æ–æ–±—â–∞–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫—É, —á—Ç–æ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É
            await query.edit_message_text(
                f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.\n\n"
                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ –∏ —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º –∫–æ–¥.\n"
                f"–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:"
            )
            
            return ENTER_CONFIRMATION_CODE
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
