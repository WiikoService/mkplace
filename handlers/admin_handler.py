import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ConversationHandler
from .base_handler import BaseHandler
from database import (
    load_delivery_tasks, load_requests, load_service_centers,
    load_users, save_delivery_tasks, save_requests, save_users
)
from config import (
    ASSIGN_REQUEST, ADMIN_IDS, DELIVERY_IDS, CREATE_DELIVERY_TASK,
    ORDER_STATUS_ASSIGNED_TO_SC
)
from utils import notify_delivery
logger = logging.getLogger(__name__)

#  TODO: –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã


class AdminHandler(BaseHandler):

    async def handle_assign_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –°–¶"""
        query = update.callback_query
        await query.answer()
        try:
            parts = query.data.split('_')
            logger.info(f"Callback data parts: {parts}")
            if len(parts) < 3:
                await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return ConversationHandler.END
            if 'confirm' in parts:
                request_id = parts[3]
            else:
                request_id = parts[2]
            logger.info(f"Processing request_id: {request_id}")
            requests_data = load_requests()
            logger.info(f"Available requests: {list(requests_data.keys())}")
            if request_id not in requests_data:
                await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ConversationHandler.END
            service_centers = load_service_centers()
            if not service_centers:
                await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤.")
                return ConversationHandler.END
            keyboard = []
            for sc_id, sc_data in service_centers.items():
                callback_data = f"assign_sc_confirm_{request_id}_{sc_id}"
                logger.info(f"Creating button with callback_data: {callback_data}")
                keyboard.append([
                    InlineKeyboardButton(
                        f"{sc_data['name']} - {sc_data.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}", 
                        callback_data=callback_data
                    )
                ])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}:",
                reply_markup=reply_markup
            )
            return ASSIGN_REQUEST
        except Exception as e:
            logger.error(f"Error in handle_assign_sc: {e}")
            await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}")
            return ConversationHandler.END

    async def handle_assign_sc_confirm(self, update: Update, context: CallbackContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∑–∞—è–≤–∫–∏ –∫ –°–¶"""
        query = update.callback_query
        await query.answer()
        logger.info(f"Received callback query in handle_assign_sc_confirm: {query.data}")
        try:
            parts = query.data.split('_')
            logger.info(f"Parts: {parts}")
            if len(parts) < 5:
                logger.error(f"Invalid data format: {query.data}")
                await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return ConversationHandler.END
            request_id = parts[3]
            sc_id = parts[4]
            logger.info(f"Request ID: {request_id}, SC ID: {sc_id}")
            requests_data = load_requests()
            logger.info(f"Loaded requests: {list(requests_data.keys())}")
            service_centers = load_service_centers()
            logger.info(f"Loaded service centers: {list(service_centers.keys())}")
            if request_id not in requests_data:
                logger.error(f"Request {request_id} not found")
                await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ConversationHandler.END
            if sc_id not in service_centers:
                logger.error(f"Service center {sc_id} not found")
                await query.edit_message_text(f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä —Å ID {sc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            sc_data = service_centers[sc_id]
            requests_data[request_id].update({
                'assigned_sc': sc_id,
                'status': ORDER_STATUS_ASSIGNED_TO_SC
            })
            save_requests(requests_data)
            logger.info(f"Updated request {request_id} with SC {sc_id}")
            new_text = f"–ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –°–¶ {sc_data['name']}."
            await query.edit_message_text(new_text)
            logger.info(f"Message updated for request {request_id}")
            task_id, task_data = await self.create_delivery_task(update, context, request_id, sc_data['name'])
            logger.info(f"Request {request_id} successfully assigned to SC {sc_id} and delivery task {task_id} created")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Error in handle_assign_sc_confirm: {e}")
            await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∑–∞—è–≤–∫–∏ –∫ –°–¶: {str(e)}")
            return ConversationHandler.END

    async def update_delivery_info(self, context: CallbackContext, chat_id: int, message_id: int, request_id: str, delivery_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–µ"""
        new_text = (
            f"–ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º:\n"
            f"–ò–º—è: {delivery_info['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: +{delivery_info['phone']}"
        )
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=new_text
        )

    async def create_delivery_task(self, update: Update, context: CallbackContext, request_id: str, sc_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        logger.info(f"Creating delivery task for request {request_id} to SC {sc_name}")
        delivery_tasks = load_delivery_tasks() or {}
        task_id = str(len(delivery_tasks) + 1)
        requests_data = load_requests()
        request = requests_data.get(request_id, {})
        client_id = request.get('user_id')
        client_data = load_users().get(str(client_id), {})
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∑–∞—è–≤–∫–∏
        delivery_photos = request.get('photos', [])
        delivery_task = {
            'task_id': task_id,
            'request_id': request_id,
            'status': '–ù–æ–≤–∞—è',
            'sc_name': sc_name,
            'client_address': request.get('location', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'client_name': client_data.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
            'client_phone': client_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'description': request.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'latitude': request.get('latitude'),
            'longitude': request.get('longitude'),
            'delivery_photos': delivery_photos,  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            'assigned_delivery_id': None
        }
        delivery_tasks[task_id] = delivery_task
        save_delivery_tasks(delivery_tasks)
        await notify_delivery(context.bot, DELIVERY_IDS, delivery_task, detailed=True)
        return task_id, delivery_task

    async def notify_deliveries(self, context: CallbackContext, task_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        message = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
            f"–ó–∞—è–≤–∫–∞: #{task_data['request_id']}\n"
            f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {task_data['sc_name']}\n"
            f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {task_data['client_address']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {task_data['client_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {task_data['client_phone']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task_data['description']}"
        )        
        keyboard = [[
            InlineKeyboardButton(
                "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É", 
                callback_data=f"accept_delivery_{task_data['request_id']}"
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)        
        for delivery_id in DELIVERY_IDS:
            try:
                await context.bot.send_message(
                    chat_id=delivery_id,
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                logger.info(f"Notification sent to delivery {delivery_id}")
            except Exception as e:
                logger.error(f"Error sending notification to delivery {delivery_id}: {e}")

    async def handle_accept_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        if len(parts) >= 3:
            task_id = parts[2]
        else:
            await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        delivery_tasks = load_delivery_tasks()
        if task_id in delivery_tasks:
            delivery_task = delivery_tasks[task_id]
            delivery_task['status'] = '–ü—Ä–∏–Ω—è—Ç–æ'
            delivery_task['delivery_id'] = query.from_user.id
            save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
            requests_data = load_requests()
            request_id = delivery_task['request_id']
            if request_id in requests_data:
                request = requests_data[request_id]
                user = load_users().get(str(query.from_user.id), {})
                delivery_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç–∞–≤—â–∏–∫')
                delivery_phone = user.get('phone', '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')
                new_text = f"{query.message.text}\n\n_–ó–∞–¥–∞–Ω–∏–µ –≤–∑—è–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_name} - +{delivery_phone}_"
                for admin_id in ADMIN_IDS:
                    try:
                        message_id = request.get('message_id')
                        if message_id:
                            await context.bot.edit_message_text(
                                chat_id=admin_id,
                                message_id=message_id,
                                text=new_text,
                                parse_mode='Markdown'
                            )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            await query.edit_message_text(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}")
        else:
            await query.edit_message_text(f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    async def view_requests(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        requests_data = load_requests()
        if not requests_data:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        else:
            reply = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            for req_id, req in requests_data.items():
                reply += f"–ó–∞—è–≤–∫–∞ #{req_id}\n"
                reply += f"–°—Ç–∞—Ç—É—Å: {req.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                reply += f"–û–ø–∏—Å–∞–Ω–∏–µ: {req.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:50]}...\n"
                reply += f"–†–∞–π–æ–Ω: {req.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            await update.message.reply_text(reply)

    async def assign_request(self, update: Update, context: CallbackContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∑–∞—è–≤–∫–∏ –∫ –°–¶"""
        requests_dict = load_requests()
        if not requests_dict:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.")
            return ConversationHandler.END
        keyboard = []
        for req_id, req_data in requests_dict.items():
            if not req_data.get('assigned_sc'):
                status = req_data.get('status', '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                desc = req_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:30] + '...'
                button_text = f"–ó–∞—è–≤–∫–∞ #{req_id} - {status} - {desc}"
                keyboard.append([InlineKeyboardButton(
                    button_text, 
                    callback_data=f"assign_sc_{req_id}"
                )])
        if not keyboard:
            await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –°–¶.")
            return ConversationHandler.END
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É:",
            reply_markup=reply_markup
        )
        return ASSIGN_REQUEST

    async def view_service_centers(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"""
        service_centers = load_service_centers()
        logger.info(f"Loaded service centers: {service_centers}")
        if not service_centers:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –°–¶ –ø—É—Å—Ç.")
        else:
            reply = "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤:\n\n"
            for sc_id, sc_data in service_centers.items():
                reply += f"ID: {sc_id}\n"
                reply += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {sc_data['name']}\n"
                reply += f"–ê–¥—Ä–µ—Å: {sc_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                reply += "-------------------\n"        
            await update.message.reply_text(reply)

    async def handle_create_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        if len(parts) < 3:
            await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        request_id = parts[2]
        sc_id = parts[3]
        service_centers = load_service_centers()
        if sc_id not in service_centers:
            await query.edit_message_text("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        service_center = service_centers[sc_id]
        task_id, task_data = await self.create_delivery_task(update, context, request_id, service_center['name'])
        await query.edit_message_text(
            f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} —Å–æ–∑–¥–∞–Ω–∞.\n"
            f"–î–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
        )

    async def handle_create_delivery_menu(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –º–µ–Ω—é"""
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return CREATE_DELIVERY_TASK

    async def handle_create_delivery_input(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        request_id = update.message.text.strip()
        requests_data = load_requests()
        if request_id not in requests_data:
            await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END
        request = requests_data[request_id]
        if not request.get('assigned_sc'):
            await update.message.reply_text("–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É")
            return ConversationHandler.END
        service_centers = load_service_centers()
        sc_id = request['assigned_sc']
        sc_name = next((sc['name'] for sc in service_centers if str(sc['id']) == str(sc_id)), None)
        if not sc_name:
            await update.message.reply_text("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        task_id, task_data = await self.create_delivery_task(update, context, request_id, sc_name)
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} —Å–æ–∑–¥–∞–Ω–∞. –î–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
        return ConversationHandler.END

    async def handle_reject_request(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        request_id = parts[2]
        keyboard = [
            [
                InlineKeyboardButton("–î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user_{request_id}_confirm"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data=f"block_user_{request_id}_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        requests_data = load_requests()
        request = requests_data.get(request_id)
        if request:
            request['status'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            save_requests(requests_data)
            await query.edit_message_text(
                f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {request.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}?",
                reply_markup=reply_markup
            )
            await context.bot.send_message(
                chat_id=request['user_id'],
                text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )

    async def handle_block_user(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        request_id = parts[2]
        action = parts[3]
        if action == 'cancel':
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        requests_data = load_requests()
        request = requests_data.get(request_id)
        if request and action == 'confirm':
            users_data = load_users()
            user_id = request['user_id']
            if user_id in users_data:
                users_data[user_id]['blocked'] = True
                save_users(users_data)
                await query.edit_message_text(
                    f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                    f"–ö–ª–∏–µ–Ω—Ç {request.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                )
                await context.bot.send_message(
                    chat_id=user_id,
                    text="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )

    async def handle_create_delivery_from_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç –°–¶"""
        query = update.callback_query
        await query.answer()
        
        request_id = query.data.split('_')[-1]
        requests_data = load_requests()
        
        if request_id not in requests_data:
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        request = requests_data[request_id]
        sc_id = request.get('assigned_sc')
        
        if not sc_id:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –°–¶ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏")
            return
        
        service_centers = load_service_centers()
        sc_data = service_centers.get(sc_id, {})
        sc_name = sc_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –°–¶')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ–º–µ—Ç–∫–æ–π, —á—Ç–æ —ç—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–¶ –∫–ª–∏–µ–Ω—Ç—É
        delivery_tasks = load_delivery_tasks() or {}
        task_id = str(len(delivery_tasks) + 1)
        
        delivery_task = {
            'task_id': task_id,
            'request_id': request_id,
            'status': '–ù–æ–≤–∞—è',
            'type': 'sc_to_client',  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
            'sc_name': sc_name,
            'sc_id': sc_id,
            'client_address': request.get('location', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'client_name': request.get('client_name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
            'client_phone': request.get('client_phone', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'description': request.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'latitude': request.get('latitude'),
            'longitude': request.get('longitude'),
            'assigned_delivery_id': None
        }
        
        delivery_tasks[task_id] = delivery_task
        save_delivery_tasks(delivery_tasks)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        delivery_message = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶ –∫–ª–∏–µ–Ω—Ç—É!\n\n"
            f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"–ó–∞–±—Ä–∞—Ç—å –∏–∑: {sc_name}\n"
            f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {delivery_task['client_address']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {delivery_task['client_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {delivery_task['client_phone']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {delivery_task['description']}"
        )
        
        keyboard = [[
            InlineKeyboardButton(
                "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É", 
                callback_data=f"accept_delivery_from_sc_{task_id}"
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        for delivery_id in DELIVERY_IDS:
            try:
                await context.bot.send_message(
                    chat_id=delivery_id,
                    text=delivery_message,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤—â–∏–∫—É {delivery_id}: {e}")
        
        await query.edit_message_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.\n"
            f"–ó–∞—è–≤–∫–∞: #{request_id}"
        )
