import logging
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, CallbackQuery
from telegram.ext import CallbackContext, ConversationHandler
from database import (
    load_delivery_tasks, load_requests, load_service_centers,
    load_users, save_delivery_tasks, save_requests, save_users
)
from config import (
    ADMIN_IDS, DELIVERY_IDS, CREATE_DELIVERY_TASK,
    ORDER_STATUS_PICKUP_FROM_SC, ORDER_STATUS_NEW, DEBUG
)
from utils import notify_client
from datetime import datetime
import os
from config import DATA_DIR
import time
from handlers.client_request_create import PrePaymentHandler
from datetime import timedelta
from logging_decorator import log_method_call
logger = logging.getLogger(__name__)

class AdminHandler:

    @log_method_call
    async def handle_assign_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –°–¶'"""
        logger.info("üõ†Ô∏è START handle_assign_sc")
        query = update.callback_query
        await query.answer()
        try:
            request_id = query.data.split('_')[-1]
            logger.debug(f"üìù Processing request {request_id}")
            requests_data = await load_requests()
            logger.debug(f"üì¶ Loaded {len(requests_data)} requests")
            request = requests_data.get(request_id)
            logger.debug(f"üìÑ Request data found: {request is not None}")
            if not request:
                logger.error(f"‚ùå Request {request_id} not found")
                await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            location = request.get('location', {})
            if isinstance(location, dict):
                if location.get('type') == 'coordinates':
                    address = location.get('address', '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                    location_str = f"{address} (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.get('latitude')}, {location.get('longitude')})"
                else:
                    location_str = location.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
            else:
                location_str = str(location)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –°–¶
            logger.debug("üìù Forming message text")
            try:
                message_text = (
                    f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {request.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request.get('user_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {location_str}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                )
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
                if isinstance(request.get('desired_date'), datetime):
                    message_text += f"üïí –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request['desired_date'].strftime('%d.%m.%Y %H:%M')}"
                else:
                    message_text += f"üïí –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
                    
                logger.debug("üìù Message text formed successfully")
            except Exception as e:
                logger.error(f"‚ùå Error forming message text: {str(e)}")
                message_text = f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}"
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [[
                InlineKeyboardButton(
                    "üì® –†–∞–∑–æ—Å–ª–∞—Ç—å –°–¶",
                    callback_data=f"send_to_sc_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            logger.debug("‚å®Ô∏è Keyboard created")
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            photos = request.get('photos', [])
            if photos:
                logger.debug(f"üñºÔ∏è Found {len(photos)} photos to send")
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
                    valid_photos = []
                    for photo in photos:
                        if isinstance(photo, str):
                            valid_photos.append(InputMediaPhoto(photo))
                        else:
                            logger.warning(f"‚ö†Ô∏è Invalid photo type: {type(photo)}")
                    if valid_photos:
                        await query.message.reply_media_group(media=valid_photos)
                        logger.debug("üñºÔ∏è Photos sent successfully")
                except Exception as e:
                    logger.error(f"‚ùå Error sending photos: {str(e)}")
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
            logger.info("‚úÖ Successfully processed assign_sc request")
        except Exception as e:
            logger.error(f"üî• Error in handle_assign_sc: {str(e)}")
            import traceback
            logger.error(f"üî• Traceback: {traceback.format_exc()}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")

    @log_method_call
    async def handle_send_to_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –°–¶"""
        logger.info("üõ†Ô∏è START handle_send_to_sc")
        try:
            query = update.callback_query
            await query.answer()
            rid = query.data.split('_')[-1]
            logger.debug(f"üì© Processing request {rid}")
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            requests_data = await load_requests()
            logger.debug(f"üì• Loaded {len(requests_data)} requests")
            if rid not in requests_data:
                logger.error(f"üö´ Request {rid} not found")
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            request = requests_data[rid]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞
            if request.get('assigned_sc'):
                logger.info(f"Request {rid} already assigned to SC {request.get('assigned_sc')}")
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º")
                return
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            location = request.get('location', {})
            if isinstance(location, dict):
                if location.get('type') == 'coordinates':
                    address = location.get('address', '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                    location_str = f"{address} (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.get('latitude')}, {location.get('longitude')})"
                else:
                    location_str = location.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
            else:
                location_str = str(location)
            logger.debug(f"üìÑ Request data: {json.dumps(request, indent=2, ensure_ascii=False)}")
            # –ü–æ–∏—Å–∫ –°–¶
            users_data = await load_users()
            sc_users = [
                (uid, u_data['sc_id']) 
                for uid, u_data in users_data.items() 
                if u_data.get('role') == 'sc' and u_data.get('sc_id')
            ]
            logger.debug(f"üîç Found {len(sc_users)} SC users")
            if not sc_users:
                logger.warning("‚ö†Ô∏è No SC users available")
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
                return
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            success_count = 0
            for uid, sc_id in sc_users:
                try:
                    logger.debug(f"‚úâÔ∏è Sending to SC {sc_id} (user {uid})")
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
                    if request.get('photos'):
                        media = []
                        for photo in request['photos']:
                            # –ï—Å–ª–∏ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                            if photo.startswith('photos/') or photo.startswith('/'):
                                try:
                                    with open(photo, 'rb') as photo_file:
                                        media.append(InputMediaPhoto(photo_file.read()))
                                except Exception as e:
                                    logger.error(f"‚ùå Error opening photo file {photo}: {e}")
                                    continue
                            else:
                                # –ï—Å–ª–∏ URL –∏–ª–∏ file_id
                                media.append(InputMediaPhoto(photo))
                        if media:
                            await context.bot.send_media_group(
                                chat_id=uid,
                                media=media
                            )
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
                    await context.bot.send_message(
                        chat_id=uid,
                        text=(
                            f"üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{rid}\n\n"
                            f"üë§ –ö–ª–∏–µ–Ω—Ç: {request.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request.get('user_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                            f"üìç –ê–¥—Ä–µ—Å: {location_str}\n"
                            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"üïí –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
                        ),
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton(
                                "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É", 
                                callback_data=f"sc_accept_{rid}"
                            )
                        ]])
                    )
                    success_count += 1
                    logger.debug(f"‚úÖ Successfully sent to SC {sc_id}")
                except Exception as e:
                    logger.error(f"üö® Error sending to SC {sc_id}: {str(e)}")
                    continue
            if success_count > 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
                requests_data[rid]['status'] = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –°–¶'
                save_requests(requests_data)
                await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {success_count} —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
                logger.info(f"‚úÖ Request sent to {success_count} service centers")
            else:
                logger.warning("üì≠ Failed to send to all SCs")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–º—É –°–¶")
            logger.info("‚úÖ FINISHED handle_send_to_sc")
        except Exception as e:
            logger.error(f"üî• Error in handle_send_to_sc: {str(e)}")
            import traceback
            logger.error(f"üî• Traceback: {traceback.format_exc()}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏")
            except:
                pass

    @log_method_call
    async def update_delivery_info(self, context: CallbackContext, chat_id: int, message_id: int, request_id: str, delivery_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–µ"""
        new_text = (
            f"–ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º:\n"
            f"–ò–º—è: {delivery_info['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: +{delivery_info['phone']}"
        )
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=new_text
        )

    @log_method_call
    async def create_delivery_task(self, update: Update, context: CallbackContext, request_id: str, sc_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        logger.info(f"Creating delivery task for request {request_id} to SC {sc_name}")
        delivery_tasks = await load_delivery_tasks() or {}
        task_id = str(len(delivery_tasks) + 1)
        requests_data = await load_requests()
        request = requests_data.get(request_id, {})
        client_id = request.get('user_id')
        client_data = load_users().get(str(client_id), {})
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∑–∞—è–≤–∫–∏
        delivery_photos = request.get('photos', [])
        delivery_task = {
            'task_id': task_id,
            'request_id': request_id,
            'status': '–ù–æ–≤–∞—è',
            'sc_name': sc_name,
            'client_address': request.get('location', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'client_name': client_data.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
            'client_phone': client_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'description': request.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'latitude': request.get('latitude'),
            'longitude': request.get('longitude'),
            'delivery_photos': delivery_photos,  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            'assigned_delivery_id': None
        }
        delivery_tasks[task_id] = delivery_task
        await save_delivery_tasks(delivery_tasks)
        await notify_client(context.bot, DELIVERY_IDS, delivery_task, detailed=True)
        return task_id, delivery_task

    @log_method_call
    async def notify_deliveries(self, context: CallbackContext, task_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        message = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
            f"–ó–∞—è–≤–∫–∞: #{task_data['request_id']}\n"
            f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {task_data['sc_name']}\n"
            f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {task_data['client_address']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {task_data['client_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {task_data['client_phone']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task_data['description']}"
        )        
        keyboard = [[
            InlineKeyboardButton(
                "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É", 
                callback_data=f"accept_delivery_{task_data['request_id']}"
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)        
        for delivery_id in DELIVERY_IDS:
            try:
                await context.bot.send_message(
                    chat_id=delivery_id,
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                logger.info(f"Notification sent to delivery {delivery_id}")
            except Exception as e:
                logger.error(f"Error sending notification to delivery {delivery_id}: {e}")

    @log_method_call
    async def handle_accept_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        if len(parts) >= 3:
            task_id = parts[2]
        else:
            await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        delivery_tasks = await load_delivery_tasks()
        if task_id in delivery_tasks:
            delivery_task = delivery_tasks[task_id]
            delivery_task['status'] = '–ü—Ä–∏–Ω—è—Ç–æ'
            delivery_task['delivery_id'] = query.from_user.id
            await save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
            requests_data = load_requests()
            request_id = delivery_task['request_id']
            if request_id in requests_data:
                request = requests_data[request_id]
                user = await load_users().get(str(query.from_user.id), {})
                delivery_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç–∞–≤—â–∏–∫')
                delivery_phone = user.get('phone', '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')
                new_text = f"{query.message.text}\n\n_–ó–∞–¥–∞–Ω–∏–µ –≤–∑—è–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_name} - +{delivery_phone}_"
                for admin_id in ADMIN_IDS:
                    try:
                        message_id = request.get('message_id')
                        if message_id:
                            await context.bot.edit_message_text(
                                chat_id=admin_id,
                                message_id=message_id,
                                text=new_text,
                                parse_mode='Markdown'
                            )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            await query.edit_message_text(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}")
        else:
            await query.edit_message_text(f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    @log_method_call
    async def view_requests(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        requests_data = await load_requests()
        if not requests_data:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        else:
            reply = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            for req_id, req in requests_data.items():
                reply += f"–ó–∞—è–≤–∫–∞ #{req_id}\n"
                reply += f"–°—Ç–∞—Ç—É—Å: {req.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                reply += f"–û–ø–∏—Å–∞–Ω–∏–µ: {req.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:50]}...\n"
                reply += f"–†–∞–π–æ–Ω: {req.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            await update.message.reply_text(reply)

    @log_method_call
    async def assign_request(self, update: Update, context: CallbackContext):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤—Å–µ–º –°–¶"""
        query = update.callback_query
        request_id = query.data.split('_')[-1]
        try:
            requests_data = await load_requests()
            request = requests_data[request_id]
            users_data = await load_users()
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –°–¶
            message = (
                f"üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description')}\n"
                f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {request.get('location')}\n"
                f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date')}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            )
            keyboard = [[
                InlineKeyboardButton(
                    "–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data=f"sc_accept_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –°–¶
            for user_id, user_data in users_data.items():
                if user_data.get('role') == 'sc':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if request.get('photos'):
                        media_group = []
                        for photo in request['photos']:
                            media_group.append(InputMediaPhoto(photo))
                        await context.bot.send_media_group(
                            chat_id=int(user_id),
                            media=media_group
                        )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=message,
                        reply_markup=reply_markup
                    )
            await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –°–¶")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –°–¶: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏")
            return ConversationHandler.END

    @log_method_call
    async def view_service_centers(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"""
        service_centers = await load_service_centers()
        logger.info(f"Loaded service centers: {service_centers}")
        if not service_centers:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –°–¶ –ø—É—Å—Ç.")
        else:
            reply = "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤:\n\n"
            for sc_id, sc_data in service_centers.items():
                reply += f"ID: {sc_id}\n"
                reply += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {sc_data['name']}\n"
                reply += f"–ê–¥—Ä–µ—Å: {sc_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                reply += "-------------------\n"        
            await update.message.reply_text(reply)

    @log_method_call
    async def handle_create_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        if len(parts) < 3:
            await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        request_id = parts[2]
        sc_id = parts[3]
        service_centers = await load_service_centers()
        if sc_id not in service_centers:
            await query.edit_message_text("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        service_center = service_centers[sc_id]
        task_id, task_data = await self.create_delivery_task(update, context, request_id, service_center['name'])
        await query.edit_message_text(
            f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} —Å–æ–∑–¥–∞–Ω–∞.\n"
            f"–î–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
        )

    @log_method_call
    async def handle_create_delivery_menu(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –º–µ–Ω—é"""
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return CREATE_DELIVERY_TASK

    @log_method_call
    async def handle_reject_request(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        request_id = parts[2]
        keyboard = [
            [
                InlineKeyboardButton("–î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user_{request_id}_confirm"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data=f"block_user_{request_id}_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        requests_data = await load_requests()
        request = requests_data.get(request_id)
        if request:
            request['status'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            save_requests(requests_data)
            await query.edit_message_text(
                f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {request.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}?",
                reply_markup=reply_markup
            )
            await context.bot.send_message(
                chat_id=request['user_id'],
                text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –ø–æ—Ä—Ç–∞–ª—É —Å —É—Å–ª—É–≥–∞–º–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π:\ndombyta.by"
            )

    @log_method_call
    async def handle_block_user(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        request_id = parts[2]
        action = parts[3]
        if action == 'cancel':
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        requests_data = await load_requests()
        request = requests_data.get(request_id)
        if request and action == 'confirm':
            users_data = await load_users()
            user_id = request['user_id']
            if user_id in users_data:
                users_data[user_id]['blocked'] = True
                await save_users(users_data)
                await query.edit_message_text(
                    f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                    f"–ö–ª–∏–µ–Ω—Ç {request.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                )
                await context.bot.send_message(
                    chat_id=user_id,
                    text="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )

    @log_method_call
    async def handle_create_sc_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        try:
            request_id = query.data.split('_')[-1]
            requests_data = await load_requests()
            delivery_tasks = await load_delivery_tasks()
            service_centers = await load_service_centers()
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            request = requests_data[request_id]
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–¶ –∏–∑ service_centers –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É assigned_sc
            sc_id = request.get('assigned_sc')
            sc_data = service_centers.get(sc_id, {})
            sc_name = sc_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
            sc_address = sc_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            new_task_id = str(len(delivery_tasks) + 1)
            new_task = {
                "task_id": new_task_id,
                "request_id": request_id,
                "status": "–ù–æ–≤–∞—è",
                "sc_name": sc_name,
                "sc_address": sc_address,
                "client_name": request.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "client_address": request.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "client_phone": request.get('user_phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                "description": request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                "delivery_type": "sc_to_client",  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
                "is_sc_to_client": True,  # –§–ª–∞–≥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶
                "desired_date": request.get('desired_date', '')  # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ –∑–∞—è–≤–∫–∏
            }
            delivery_tasks[new_task_id] = new_task
            await save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            requests_data[request_id]['status'] = ORDER_STATUS_PICKUP_FROM_SC
            await save_requests(requests_data)
            await query.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{new_task_id} —Å–æ–∑–¥–∞–Ω–∞.\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–¢–∏–ø: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–¶ –∫–ª–∏–µ–Ω—Ç—É\n"
                f"–°–¶: {sc_name}\n"
                f"–ê–¥—Ä–µ—Å –°–¶: {sc_address}\n"
                f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {request.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {request.get('desired_date', '').split()[0]}\n"
                f"–î–æ—Å—Ç–∞–≤—â–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.")

    @log_method_call
    async def show_delivery_tasks(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            requests_data = await load_requests()
            available_requests = {}
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É"
            for request_id, request in requests_data.items():
                if request.get('status') == '–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É':
                    available_requests[request_id] = request
            if not available_requests:
                await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
                return
            for request_id, request in available_requests.items():
                keyboard = [[
                    InlineKeyboardButton(
                        "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏", 
                        callback_data=f"create_delivery_{request_id}"
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                message_text = (
                    f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {request.get('user_name')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request.get('user_phone')}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {request.get('location_display')}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
                )
                await update.message.reply_text(
                    text=message_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")

    @log_method_call
    async def show_feedback(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        if isinstance(update.callback_query, CallbackQuery):
            query = update.callback_query
            await query.answer()
        else:
            query = None
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                message = "üìä –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                if query:
                    await query.edit_message_text(message)
                else:
                    await update.message.reply_text(message)
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
            if query:
                await query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
            return
        ratings = feedback_data.get('ratings', [])
        reviews = feedback_data.get('reviews', [])
        if not ratings and not reviews:
            message = "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
            if query:
                await query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
            return
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_ratings = len(ratings)
        if total_ratings > 0:
            avg_rating = sum(r['rating'] for r in ratings) / total_ratings
            rating_distribution = {i: 0 for i in range(1, 6)}
            for r in ratings:
                rating_distribution[r['rating']] += 1
        else:
            avg_rating = 0
            rating_distribution = {i: 0 for i in range(1, 6)}
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n\n"
        message += f"–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {total_ratings}\n"
        message += f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f} üåü\n\n"
        message += "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:\n"
        for rating in range(5, 0, -1):
            count = rating_distribution[rating]
            stars = "üåü" * rating
            message += f"{stars}: {count}\n"
        if reviews:
            message += f"\n–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        if reviews:
            keyboard.append([InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="show_reviews")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        if query:
            await query.edit_message_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)

    @log_method_call
    async def show_reviews(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤"""
        query = update.callback_query
        await query.answer()
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                await query.edit_message_text("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")
            return
        reviews = feedback_data.get('reviews', [])
        if not reviews:
            await query.edit_message_text("üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤
        recent_reviews = reviews[-10:]
        message = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        for review in recent_reviews:
            date = review.get('timestamp', '–ù–µ—Ç –¥–∞—Ç—ã')
            text = review.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')
            message += f"üìÖ {date}\nüí¨ {text}\n\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="back_to_stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    @log_method_call
    async def show_new_requests(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)"""
        logger.info("üîç –ü–æ–∫–∞–∑ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –°–¶")
        try:
            requests_data = await load_requests()
            users_data = await load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏
            new_requests = sorted(
                (
                    (rid, req) for rid, req in requests_data.items()
                    if req.get('status') == '–ù–æ–≤–∞—è'
                ),
                key=lambda x: datetime.strptime(x[1]['created_at'], "%H:%M %d.%m.%Y"),
                reverse=True  # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
            )
            if not new_requests:
                await update.message.reply_text("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
                return
            logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(new_requests)} –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –ø–æ –æ–¥–Ω–æ–π —Å –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            for request_id, request in new_requests:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_id = request.get('user_id')
                    user_phone = users_data.get(user_id, {}).get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = (
                        f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
                        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {request['created_at']}\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {request.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_phone}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ load_users()
                        f"üìç –ê–¥—Ä–µ—Å: {request.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"  # –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ location
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                        f"üïí –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
                    )
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
                    keyboard = [
                        [
                            InlineKeyboardButton("üì® –†–∞–∑–æ—Å–ª–∞—Ç—å –°–¶", callback_data=f"send_to_sc_{request_id}"),
                            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_request_{request_id}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    photos = request.get('photos', [])
                    if photos:
                        try:
                            media_group = []
                            for photo in photos[:10]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 —Ñ–æ—Ç–æ
                                try:
                                    if os.path.exists(photo):
                                        with open(photo, 'rb') as f:
                                            media_group.append(InputMediaPhoto(f.read()))
                                    else:
                                        media_group.append(InputMediaPhoto(photo))
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ {photo}: {e}")
                            if media_group:
                                await context.bot.send_media_group(
                                    chat_id=update.effective_chat.id,
                                    media=media_group
                                )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=message_text,
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ {request_id}: {e}")
                    continue
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ {len(new_requests)} –∑–∞—è–≤–æ–∫")
        except Exception as e:
            logger.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–æ–∫: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")

    @log_method_call
    async def view_request_chat(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Ç –∑–∞—è–≤–∫–∏ –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É —Å —Ñ–æ—Ç–æ"""
        if not context.user_data.get('waiting_for_request_id'):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")
            context.user_data['waiting_for_request_id'] = True
            return 'WAITING_REQUEST_ID'
        request_id = update.message.text.strip()
        chat_file = os.path.join(DATA_DIR, 'chat_sc_client.json')
        try:
            if not os.path.exists(chat_file):
                await update.message.reply_text("‚ùå –§–∞–π–ª —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.EN
            with open(chat_file, 'r', encoding='utf-8') as f:
                chat_data = json.load(f)
            if request_id not in chat_data:
                await update.message.reply_text(f"‚ùå –ß–∞—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            messages = chat_data[request_id]
            if not messages:
                await update.message.reply_text(f"‚ùå –í —á–∞—Ç–µ –∑–∞—è–≤–∫–∏ #{request_id} –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
                return ConversationHandler.END
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await update.message.reply_text(f"üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –∑–∞—è–≤–∫–∏ #{request_id}:")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for msg in messages:
                sender = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg['sender'] == 'client' else "üè¢ –°–¶"
                timestamp = msg.get('timestamp', '–±–µ–∑ –¥–∞—Ç—ã')
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                if 'photo_path' in msg and os.path.exists(msg['photo_path']):
                    caption = f"{sender} ({timestamp}):\n{msg.get('message', '')}"
                    try:
                        with open(msg['photo_path'], 'rb') as photo_file:
                            await context.bot.send_photo(
                                chat_id=update.effective_chat.id,
                                photo=photo_file,
                                caption=caption[:1024]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏ –≤ Telegram
                            )
                    except Exception as photo_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}")
                        await update.message.reply_text(
                            f"{sender} ({timestamp}): [–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ]\n"
                            f"{msg.get('message', '')}"
                        )
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_text = f"{sender} ({timestamp}):\n{msg.get('message', '')}"
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if len(message_text) > 4000:
                        parts = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]
                        for part in parts:
                            await update.message.reply_text(part)
                    else:
                        await update.message.reply_text(message_text)
        except json.JSONDecodeError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —á–∞—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —á–∞—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞")
        finally:
            context.user_data.pop('waiting_for_request_id', None)
            return ConversationHandler.END

    @log_method_call
    async def handle_price_approval(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        try:
            requests_data = await load_requests()
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            request = requests_data[request_id]
            repair_price = request.get('repair_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            client_message = (
                f"üí∞ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞:\n"
                f"–°—É–º–º–∞: {repair_price} BYN\n\n"
                f"–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é?"
            )
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            keyboard = [
                [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"client_initial_price_{request_id}")],
                [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"client_initial_reject_{request_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            client_id = request.get('user_id')
            if client_id:
                await context.bot.send_message(
                    chat_id=client_id,
                    text=client_message,
                    reply_markup=reply_markup
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                await query.edit_message_text(
                    f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.\n"
                    f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                    f"–°—É–º–º–∞: {repair_price} BYN"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∫–ª–∏–µ–Ω—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    @log_method_call
    async def handle_client_price_approved(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ü–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–æ–º (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        requests_data = await load_requests()
        if request_id not in requests_data:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END
        request = requests_data[request_id]
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ü–µ–Ω—ã
        request['price_approved'] = True
        await save_requests(requests_data)
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ü–µ–Ω—É –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
        # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
        if DEBUG:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ PrePaymentHandler
            logger.info(f"DEBUG —Ä–µ–∂–∏–º: –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏ –±–µ–∑ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
            pre_payment_handler = PrePaymentHandler()
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            request['delivery_cost'] = '100.00'
            await save_requests(requests_data)
            return await pre_payment_handler.create_delivery_task(update, context, request_id, request)
        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
        pre_payment_handler = PrePaymentHandler()
        return await pre_payment_handler.create_payment(update, context, request_id, request)

    @log_method_call
    async def handle_comment_approval(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        # –ü–æ–ª—É—á–∞–µ–º request_id –∏ comment –∏–∑ callback_data
        parts = query.data.split('_')
        request_id = parts[2]
        comment = parts[3]  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–µ–ø–µ—Ä—å –≤ callback_data
        try:
            requests_data = await load_requests()
            request = requests_data[request_id]
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–¶
            sc_id = request.get('assigned_sc')
            service_centers = await load_service_centers()
            sc_data = service_centers.get(sc_id, {})
            sc_name = sc_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –°–¶')
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞—è–≤–∫—É
            request['comment'] = comment
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            requests_data[request_id] = request
            await save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await query.edit_message_text(
                f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –°–¶ '{sc_name}' –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} –æ–¥–æ–±—Ä–µ–Ω.\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            )            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –°–¶
            users_data = await load_users()
            sc_user_id = next(
                (uid for uid, u_data in users_data.items() 
                if str(u_data.get('sc_id')) == str(sc_id) and u_data.get('role') == 'sc'),
                None
            )
            if sc_user_id:
                await context.bot.send_message(
                    chat_id=int(sc_user_id),
                    text=f"‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{request_id} –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    @log_method_call
    async def handle_comment_rejection(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        try:
            requests_data = await load_requests()
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            request = requests_data[request_id]
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–¶
            sc_id = request.get('assigned_sc')
            service_centers = await load_service_centers()
            sc_data = service_centers.get(sc_id, {})
            sc_name = sc_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –°–¶')
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await query.edit_message_text(
                f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –°–¶ '{sc_name}' –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request.get('comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
            )            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –°–¶
            users_data = await load_users()
            sc_user_id = next(
                (uid for uid, u_data in users_data.items() 
                if str(u_data.get('sc_id')) == str(sc_id) and u_data.get('role') == 'sc'),
                None
            )
            if sc_user_id:
                await context.bot.send_message(
                    chat_id=int(sc_user_id),
                    text=f"‚ùå –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    @log_method_call
    async def handle_admin_delivery_request(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        requests_data = await load_requests()
        delivery_tasks = await load_delivery_tasks()
        users_data = await load_users()
        service_centers = await load_service_centers()
        if request_id in requests_data:
            request = requests_data[request_id]
            sc_id = request.get('assigned_sc')
            sc_data = service_centers.get(sc_id, {})
            client_id = request.get('user_id')
            client_data = users_data.get(client_id, {})
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            today = datetime.now().strftime("%d.%m.%Y")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            if not request.get('desired_date', '').endswith(today):
                await query.edit_message_text(
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏."
                )
                return
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            task_id = str(len(delivery_tasks) + 1)
            delivery_task = {
                'id': task_id,
                'request_id': request_id,
                'sc_id': sc_id,
                'sc_name': sc_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'sc_address': sc_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'client_id': client_id,
                'client_name': client_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'client_phone': client_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'client_address': request.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'description': request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                'status': ORDER_STATUS_NEW,
                'created_at': int(time.time()),
                'is_sc_to_client': False,
                'desired_date': request.get('desired_date', '')  # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ –∑–∞—è–≤–∫–∏
            }
            delivery_tasks[task_id] = delivery_task
            await save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            request['status'] = ORDER_STATUS_NEW
            await save_requests(requests_data)
            await query.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} —Å–æ–∑–¥–∞–Ω–∞.\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {request.get('desired_date', '').split()[0]}\n"
                f"–î–æ—Å—Ç–∞–≤—â–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ."
            )
        else:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @log_method_call
    async def handle_contact_client(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        try:
            request_id = query.data.split('_')[-1]
            requests_data = await load_requests()
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            request = requests_data[request_id]
            client_id = request.get('user_id')
            if not client_id:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await context.bot.send_message(
                chat_id=client_id,
                text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –∑–∞–±—Ä–∞–ª –ª–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫ —Ç–æ–≤–∞—Ä?"
            )
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            keyboard = [
                [InlineKeyboardButton("–î–∞, –∑–∞–±—Ä–∞–ª", callback_data=f"client_confirm_{request_id}")],
                [InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –∑–∞–±—Ä–∞–ª", callback_data=f"client_deny_{request_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=client_id,
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º:",
                reply_markup=reply_markup
            )
            await query.edit_message_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∑–∞—è–≤–∫–µ #{request_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç—É")

    @log_method_call
    async def show_delivery_calendar(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏"""
        logger.info("üìÖ –ü–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏")
        try:
            delivery_tasks = await load_delivery_tasks()
            if not delivery_tasks:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏.")
                return
                
            tasks_by_date = {}
            for task_id, task in delivery_tasks.items():
                desired_date = task.get('desired_date', '')
                if not desired_date:
                    continue
                try:
                    _, date_part = desired_date.split(' ')
                    date_obj = datetime.strptime(date_part, "%d.%m.%Y")
                    date_key = date_obj.strftime("%d.%m.%Y")
                    if date_key not in tasks_by_date:
                        tasks_by_date[date_key] = []
                    tasks_by_date[date_key].append((task_id, task))
                except (ValueError, IndexError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {desired_date}: {e}")
                    continue

            if not tasks_by_date:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π.")
                return

            sorted_dates = sorted(tasks_by_date.keys(), 
                                key=lambda x: datetime.strptime(x, "%d.%m.%Y"))
            
            keyboard = []
            for date in sorted_dates:
                task_count = len(tasks_by_date[date])
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìÖ {date} ({task_count})", 
                        callback_data=f"calendar_date_{date}"
                    )
                ])
                
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")

    @log_method_call
    async def show_tasks_for_date(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        query = update.callback_query
        await query.answer()
        try:
            date_str = query.data.split('_')[2]
            delivery_tasks = await load_delivery_tasks()
            tasks_for_date = []
            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            for task_id, task in delivery_tasks.items():
                if task.get('desired_date', '').endswith(date_str):
                    tasks_for_date.append((task_id, task))
            if not tasks_for_date:
                await query.edit_message_text(f"–ù–∞ {date_str} –Ω–µ—Ç –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏.")
                return
            for task_id, task in tasks_for_date:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
                if task.get('delivery_type') == 'sc_to_client':
                    from_location = task.get('sc_address', '–ê–¥—Ä–µ—Å –°–¶ –Ω–µ —É–∫–∞–∑–∞–Ω')
                    to_location = task.get('client_address', '–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω')
                    delivery_direction = "üöó –°–¶ ‚Üí –ö–ª–∏–µ–Ω—Ç"
                else:  # client_to_sc –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
                    from_location = task.get('client_address', '–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω')
                    to_location = task.get('sc_address', '–ê–¥—Ä–µ—Å –°–¶ –Ω–µ —É–∫–∞–∑–∞–Ω')
                    delivery_direction = "üöô –ö–ª–∏–µ–Ω—Ç ‚Üí –°–¶"
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = (
                    f"üìå –ó–∞–¥–∞—á–∞ #{task_id} (–ó–∞—è–≤–∫–∞ #{task.get('request_id', '?')})\n"
                    f"üìÖ –î–∞—Ç–∞: {task.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üîÄ –¢–∏–ø: {delivery_direction}\n"
                    f"üìç –û—Ç–∫—É–¥–∞: {from_location}\n"
                    f"üèÅ –ö—É–¥–∞: {to_location}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {task.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {task.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                    f"üîÑ –°—Ç–∞—Ç—É—Å: {task.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                )
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"reschedule_delivery_{task_id}"),
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delivery_{task_id}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=message_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á –Ω–∞ –¥–∞—Ç—É: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")

    @log_method_call
    async def reschedule_delivery(self, update: Update, context: CallbackContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        task_id = query.data.split('_')[2]
        context.user_data['reschedule_task_id'] = task_id
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã
        keyboard = []
        current_date = datetime.now()
        for i in range(7):
            date = current_date + timedelta(days=i)
            date_display = date.strftime("%d.%m (%A)")
            date_value = date.strftime("%d.%m.%Y")
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÖ {date_display}",
                    callback_data=f"select_new_date_{date_value}"
                )
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=reply_markup
        )

    @log_method_call
    async def select_new_delivery_date(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        new_date = query.data.split('_')[3]
        context.user_data['new_delivery_date'] = new_date
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
        keyboard = []
        for hour in range(9, 21):
            time_str = f"{hour:02d}:00"
            keyboard.append([
                InlineKeyboardButton(
                    f"üïí {time_str}",
                    callback_data=f"select_new_time_{time_str}"
                )
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=reply_markup
        )

    @log_method_call
    async def select_new_delivery_time(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É"""
        query = update.callback_query
        await query.answer()
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ select_new_delivery_time –¥–ª—è –∑–∞–¥–∞—á–∏ {query.data}")
        try:
            new_time = query.data.split('_')[3]
            task_id = context.user_data.get('reschedule_task_id')
            new_date = context.user_data.get('new_delivery_date')
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: new_time={new_time}, task_id={task_id}, new_date={new_date}")
            if not task_id or not new_date:
                error_msg = "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                logger.error(error_msg)
                await query.edit_message_text(error_msg)
                return
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            delivery_tasks = await load_delivery_tasks()
            requests_data = await load_requests()
            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(delivery_tasks)} –∑–∞–¥–∞—á –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ {len(requests_data)} –∑–∞—è–≤–æ–∫")
            if task_id in delivery_tasks:
                # –ü–æ–ª—É—á–∞–µ–º request_id –∏–∑ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
                request_id = delivery_tasks[task_id].get('request_id')
                if not request_id or request_id not in requests_data:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}"
                    logger.error(error_msg)
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.")
                    return
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞—è–≤–∫–∏
                user_id = requests_data[request_id].get('user_id')
                if not user_id:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id –≤ –∑–∞—è–≤–∫–µ {request_id}"
                    logger.error(error_msg)
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                    return
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
                old_date = delivery_tasks[task_id]['desired_date']
                delivery_tasks[task_id]['desired_date'] = f"{new_time} {new_date}"
                delivery_tasks[task_id]['status'] = "–¢—Ä–µ–±—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"
                delivery_tasks[task_id]['previous_date'] = old_date
                delivery_tasks[task_id]['user_id'] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –∑–∞–¥–∞—á–µ –¥–æ—Å—Ç–∞–≤–∫–∏
                save_delivery_tasks(delivery_tasks)
                logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: {old_date}, –Ω–æ–≤–∞—è –¥–∞—Ç–∞: {new_time} {new_date}")
                logger.debug(f"ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {user_id}")
                try:
                    keyboard = [
                        [
                            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"delivery_confirm_{task_id}"),
                            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"delivery_reject_{task_id}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    message_text = (
                        f"üìÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
                        f"–ù–æ–≤–∞—è –¥–∞—Ç–∞: {new_time} {new_date}\n"
                        f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è –¥–∞—Ç–∞: {old_date}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:"
                    )
                    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {user_id}")
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        reply_markup=reply_markup
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {user_id}")
                    await query.edit_message_text(
                        f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. –ù–æ–≤–∞—è –¥–∞—Ç–∞: {new_time} {new_date}"
                    )
                except Exception as e:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}"
                    logger.error(error_msg)
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.")
            else:
                error_msg = f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                logger.error(error_msg)
                await query.edit_message_text("‚ùå " + error_msg)
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ select_new_delivery_time: {e}"
            logger.error(error_msg, exc_info=True)
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @log_method_call
    async def back_to_calendar(self, update: Update, context: CallbackContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
        query = update.callback_query
        await query.answer()
        await self.show_delivery_calendar(query, context)
