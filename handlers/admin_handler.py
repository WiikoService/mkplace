import logging
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto
from telegram.ext import CallbackContext, ConversationHandler
from .base_handler import BaseHandler
from database import (
    load_delivery_tasks, load_requests, load_service_centers,
    load_users, save_delivery_tasks, save_requests, save_users
)
from config import (
    ASSIGN_REQUEST, ADMIN_IDS, DELIVERY_IDS, CREATE_DELIVERY_TASK,
    ORDER_STATUS_ASSIGNED_TO_SC, ORDER_STATUS_PICKUP_FROM_SC
)
from utils import notify_delivery
from datetime import datetime
import os
from config import DATA_DIR


#  TODO: –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã


# 1. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ AdminHandler


logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class AdminHandler(BaseHandler):
    async def handle_assign_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –°–¶'"""
        logger.info("üõ†Ô∏è START handle_assign_sc")
        query = update.callback_query
        await query.answer()
        
        try:
            request_id = query.data.split('_')[-1]
            logger.debug(f"üìù Processing request {request_id}")
            
            requests_data = load_requests()
            logger.debug(f"üì¶ Loaded {len(requests_data)} requests")
            
            request = requests_data.get(request_id)
            logger.debug(f"üìÑ Request data found: {request is not None}")
            
            if not request:
                logger.error(f"‚ùå Request {request_id} not found")
                await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –°–¶
            logger.debug("üìù Forming message text")
            try:
                message_text = (
                    f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {request.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request.get('user_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {request.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                )
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
                if isinstance(request.get('desired_date'), datetime):
                    message_text += f"üïí –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request['desired_date'].strftime('%d.%m.%Y %H:%M')}"
                else:
                    message_text += f"üïí –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
                    
                logger.debug("üìù Message text formed successfully")
            except Exception as e:
                logger.error(f"‚ùå Error forming message text: {str(e)}")
                message_text = f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [[
                InlineKeyboardButton(
                    "üì® –†–∞–∑–æ—Å–ª–∞—Ç—å –°–¶",
                    callback_data=f"send_to_sc_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            logger.debug("‚å®Ô∏è Keyboard created")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            photos = request.get('photos', [])
            if photos:
                logger.debug(f"üñºÔ∏è Found {len(photos)} photos to send")
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
                    valid_photos = []
                    for photo in photos:
                        if isinstance(photo, str):
                            valid_photos.append(InputMediaPhoto(photo))
                        else:
                            logger.warning(f"‚ö†Ô∏è Invalid photo type: {type(photo)}")
                    
                    if valid_photos:
                        await query.message.reply_media_group(media=valid_photos)
                        logger.debug("üñºÔ∏è Photos sent successfully")
                except Exception as e:
                    logger.error(f"‚ùå Error sending photos: {str(e)}")
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
            logger.info("‚úÖ Successfully processed assign_sc request")

        except Exception as e:
            logger.error(f"üî• Error in handle_assign_sc: {str(e)}")
            import traceback
            logger.error(f"üî• Traceback: {traceback.format_exc()}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")

    async def handle_send_to_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –°–¶"""
        logger.info("üõ†Ô∏è START handle_send_to_sc")
        
        try:
            query = update.callback_query
            await query.answer()
            rid = query.data.split('_')[-1]
            logger.debug(f"üì© Processing request {rid}")

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            requests_data = load_requests()
            logger.debug(f"üì• Loaded {len(requests_data)} requests")
            
            if rid not in requests_data:
                logger.error(f"üö´ Request {rid} not found")
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            request = requests_data[rid]
            logger.debug(f"üìÑ Request data: {json.dumps(request, indent=2, ensure_ascii=False)}")

            # –ü–æ–∏—Å–∫ –°–¶
            users_data = load_users()
            sc_users = [
                (uid, u_data['sc_id']) 
                for uid, u_data in users_data.items() 
                if u_data.get('role') == 'sc' and u_data.get('sc_id')
            ]
            logger.debug(f"üîç Found {len(sc_users)} SC users")

            if not sc_users:
                logger.warning("‚ö†Ô∏è No SC users available")
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            success_count = 0
            for uid, sc_id in sc_users:
                try:
                    logger.debug(f"‚úâÔ∏è Sending to SC {sc_id} (user {uid})")
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
                    if request.get('photos'):
                        media = []
                        for photo in request['photos']:
                            # –ï—Å–ª–∏ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                            if photo.startswith('photos/') or photo.startswith('/'):
                                try:
                                    with open(photo, 'rb') as photo_file:
                                        media.append(InputMediaPhoto(photo_file.read()))
                                except Exception as e:
                                    logger.error(f"‚ùå Error opening photo file {photo}: {e}")
                                    continue
                            else:
                                # –ï—Å–ª–∏ URL –∏–ª–∏ file_id
                                media.append(InputMediaPhoto(photo))
                        
                        if media:
                            await context.bot.send_media_group(
                                chat_id=uid,
                                media=media
                            )

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await context.bot.send_message(
                        chat_id=uid,
                        text=(
                            f"üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{rid}\n\n"
                            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                        ),
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton(
                                "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É", 
                                callback_data=f"sc_accept_{rid}"
                            )
                        ]])
                    )
                    success_count += 1
                    logger.debug(f"‚úÖ Successfully sent to SC {sc_id}")
                except Exception as e:
                    logger.error(f"üö® Error sending to SC {sc_id}: {str(e)}")
                    continue

            if success_count > 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
                requests_data[rid]['status'] = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –°–¶'
                save_requests(requests_data)
                await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {success_count} —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤")
                logger.info(f"‚úÖ Request sent to {success_count} service centers")
            else:
                logger.warning("üì≠ Failed to send to all SCs")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–º—É –°–¶")
            
            logger.info("‚úÖ FINISHED handle_send_to_sc")
            
        except Exception as e:
            logger.error(f"üî• Error in handle_send_to_sc: {str(e)}")
            import traceback
            logger.error(f"üî• Traceback: {traceback.format_exc()}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏")
            except:
                pass

    async def update_delivery_info(self, context: CallbackContext, chat_id: int, message_id: int, request_id: str, delivery_info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–µ"""
        new_text = (
            f"–ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º:\n"
            f"–ò–º—è: {delivery_info['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: +{delivery_info['phone']}"
        )
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=new_text
        )

    async def create_delivery_task(self, update: Update, context: CallbackContext, request_id: str, sc_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        logger.info(f"Creating delivery task for request {request_id} to SC {sc_name}")
        delivery_tasks = load_delivery_tasks() or {}
        task_id = str(len(delivery_tasks) + 1)
        requests_data = load_requests()
        request = requests_data.get(request_id, {})
        client_id = request.get('user_id')
        client_data = load_users().get(str(client_id), {})
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∑–∞—è–≤–∫–∏
        delivery_photos = request.get('photos', [])
        delivery_task = {
            'task_id': task_id,
            'request_id': request_id,
            'status': '–ù–æ–≤–∞—è',
            'sc_name': sc_name,
            'client_address': request.get('location', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'client_name': client_data.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
            'client_phone': client_data.get('phone', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'),
            'description': request.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'latitude': request.get('latitude'),
            'longitude': request.get('longitude'),
            'delivery_photos': delivery_photos,  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            'assigned_delivery_id': None
        }
        delivery_tasks[task_id] = delivery_task
        save_delivery_tasks(delivery_tasks)
        await notify_delivery(context.bot, DELIVERY_IDS, delivery_task, detailed=True)
        return task_id, delivery_task

    async def notify_deliveries(self, context: CallbackContext, task_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        message = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
            f"–ó–∞—è–≤–∫–∞: #{task_data['request_id']}\n"
            f"–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {task_data['sc_name']}\n"
            f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {task_data['client_address']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {task_data['client_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {task_data['client_phone']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task_data['description']}"
        )        
        keyboard = [[
            InlineKeyboardButton(
                "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É", 
                callback_data=f"accept_delivery_{task_data['request_id']}"
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)        
        for delivery_id in DELIVERY_IDS:
            try:
                await context.bot.send_message(
                    chat_id=delivery_id,
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                logger.info(f"Notification sent to delivery {delivery_id}")
            except Exception as e:
                logger.error(f"Error sending notification to delivery {delivery_id}: {e}")

    async def handle_accept_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        if len(parts) >= 3:
            task_id = parts[2]
        else:
            await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        delivery_tasks = load_delivery_tasks()
        if task_id in delivery_tasks:
            delivery_task = delivery_tasks[task_id]
            delivery_task['status'] = '–ü—Ä–∏–Ω—è—Ç–æ'
            delivery_task['delivery_id'] = query.from_user.id
            save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
            requests_data = load_requests()
            request_id = delivery_task['request_id']
            if request_id in requests_data:
                request = requests_data[request_id]
                user = load_users().get(str(query.from_user.id), {})
                delivery_name = user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç–∞–≤—â–∏–∫')
                delivery_phone = user.get('phone', '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')
                new_text = f"{query.message.text}\n\n_–ó–∞–¥–∞–Ω–∏–µ –≤–∑—è–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫: {delivery_name} - +{delivery_phone}_"
                for admin_id in ADMIN_IDS:
                    try:
                        message_id = request.get('message_id')
                        if message_id:
                            await context.bot.edit_message_text(
                                chat_id=admin_id,
                                message_id=message_id,
                                text=new_text,
                                parse_mode='Markdown'
                            )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            await query.edit_message_text(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id}")
        else:
            await query.edit_message_text(f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    async def view_requests(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        requests_data = load_requests()
        if not requests_data:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        else:
            reply = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            for req_id, req in requests_data.items():
                reply += f"–ó–∞—è–≤–∫–∞ #{req_id}\n"
                reply += f"–°—Ç–∞—Ç—É—Å: {req.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                reply += f"–û–ø–∏—Å–∞–Ω–∏–µ: {req.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:50]}...\n"
                reply += f"–†–∞–π–æ–Ω: {req.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            await update.message.reply_text(reply)

    async def assign_request(self, update: Update, context: CallbackContext):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤—Å–µ–º –°–¶"""
        query = update.callback_query
        request_id = query.data.split('_')[-1]
        try:
            requests_data = load_requests()
            request = requests_data[request_id]
            users_data = load_users()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –°–¶
            message = (
                f"üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description')}\n"
                f"–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞: {request.get('location')}\n"
                f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date')}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            )
            keyboard = [[
                InlineKeyboardButton(
                    "–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data=f"sc_accept_{request_id}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –°–¶
            for user_id, user_data in users_data.items():
                if user_data.get('role') == 'sc':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if request.get('photos'):
                        media_group = []
                        for photo in request['photos']:
                            media_group.append(InputMediaPhoto(photo))
                        await context.bot.send_media_group(
                            chat_id=int(user_id),
                            media=media_group
                        )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=message,
                        reply_markup=reply_markup
                    )
            await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –°–¶")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –°–¶: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏")
            return ConversationHandler.END

    async def view_service_centers(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"""
        service_centers = load_service_centers()
        logger.info(f"Loaded service centers: {service_centers}")
        if not service_centers:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –°–¶ –ø—É—Å—Ç.")
        else:
            reply = "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤:\n\n"
            for sc_id, sc_data in service_centers.items():
                reply += f"ID: {sc_id}\n"
                reply += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {sc_data['name']}\n"
                reply += f"–ê–¥—Ä–µ—Å: {sc_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                reply += "-------------------\n"        
            await update.message.reply_text(reply)

    async def handle_create_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        if len(parts) < 3:
            await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        request_id = parts[2]
        sc_id = parts[3]
        service_centers = load_service_centers()
        if sc_id not in service_centers:
            await query.edit_message_text("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        service_center = service_centers[sc_id]
        task_id, task_data = await self.create_delivery_task(update, context, request_id, service_center['name'])
        await query.edit_message_text(
            f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} —Å–æ–∑–¥–∞–Ω–∞.\n"
            f"–î–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
        )

    async def handle_create_delivery_menu(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –º–µ–Ω—é"""
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return CREATE_DELIVERY_TASK

    async def handle_create_delivery_input(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        request_id = update.message.text.strip()
        requests_data = load_requests()
        if request_id not in requests_data:
            await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END
        request = requests_data[request_id]
        if not request.get('assigned_sc'):
            await update.message.reply_text("–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É")
            return ConversationHandler.END
        service_centers = load_service_centers()
        sc_id = request['assigned_sc']
        sc_name = next((sc['name'] for sc in service_centers if str(sc['id']) == str(sc_id)), None)
        if not sc_name:
            await update.message.reply_text("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        task_id, task_data = await self.create_delivery_task(update, context, request_id, sc_name)
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} —Å–æ–∑–¥–∞–Ω–∞. –î–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
        return ConversationHandler.END

    async def handle_reject_request(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        request_id = parts[2]
        keyboard = [
            [
                InlineKeyboardButton("–î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user_{request_id}_confirm"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data=f"block_user_{request_id}_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        requests_data = load_requests()
        request = requests_data.get(request_id)
        if request:
            request['status'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            save_requests(requests_data)
            await query.edit_message_text(
                f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {request.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}?",
                reply_markup=reply_markup
            )
            await context.bot.send_message(
                chat_id=request['user_id'],
                text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )

    async def handle_block_user(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        request_id = parts[2]
        action = parts[3]
        if action == 'cancel':
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        requests_data = load_requests()
        request = requests_data.get(request_id)
        if request and action == 'confirm':
            users_data = load_users()
            user_id = request['user_id']
            if user_id in users_data:
                users_data[user_id]['blocked'] = True
                save_users(users_data)
                await query.edit_message_text(
                    f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                    f"–ö–ª–∏–µ–Ω—Ç {request.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                )
                await context.bot.send_message(
                    chat_id=user_id,
                    text="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )

    async def handle_create_delivery_from_sc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        requests_data = load_requests()
        request = requests_data.get(request_id)
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_status = request.get('status')
        if current_status not in ['–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É']:
            await query.edit_message_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id}: {current_status}"
            )
            return ConversationHandler.END
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_tasks = load_delivery_tasks()
            task_id = str(len(delivery_tasks) + 1)
            sc_id = request.get('assigned_sc')
            service_centers = load_service_centers()
            sc_data = service_centers.get(sc_id, {})
            delivery_task = {
                'task_id': task_id,
                'request_id': request_id,
                'status': ORDER_STATUS_PICKUP_FROM_SC,
                'sc_name': sc_data.get('name'),
                'sc_address': sc_data.get('address'),
                'client_name': request.get('user_name'),
                'client_address': request.get('location_display'),
                'client_phone': request.get('user_phone'),
                'description': request.get('description'),
                'is_sc_to_client': True
            }
            delivery_tasks[task_id] = delivery_task
            save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            request['status'] = ORDER_STATUS_PICKUP_FROM_SC
            requests_data[request_id] = request
            save_requests(requests_data)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            await notify_delivery(context.bot, DELIVERY_IDS, delivery_task, detailed=True)
            await query.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ #{task_id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}"
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {str(e)}"
            )
            return ConversationHandler.END

    async def show_delivery_tasks(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            requests_data = load_requests()
            available_requests = {}
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É"
            for request_id, request in requests_data.items():
                if request.get('status') == '–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É':
                    available_requests[request_id] = request
            if not available_requests:
                await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
                return
            for request_id, request in available_requests.items():
                keyboard = [[
                    InlineKeyboardButton(
                        "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏", 
                        callback_data=f"create_delivery_{request_id}"
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                message_text = (
                    f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {request.get('user_name')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request.get('user_phone')}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {request.get('location_display')}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
                )
                await update.message.reply_text(
                    text=message_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")

    async def handle_create_sc_delivery(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        requests_data = load_requests()
        request = requests_data.get(request_id)
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END
        try:
            delivery_tasks = load_delivery_tasks()
            task_id = str(len(delivery_tasks) + 1)
            sc_id = request.get('assigned_sc')
            service_centers = load_service_centers()
            sc_data = service_centers.get(sc_id, {})
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶
            delivery_task = {
                'task_id': task_id,
                'request_id': request_id,
                'status': '–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞',
                'sc_name': sc_data.get('name'),
                'sc_address': sc_data.get('address'),
                'client_name': request.get('user_name'),
                'client_address': request.get('location_display'),
                'client_phone': request.get('user_phone'),
                'description': request.get('description'),
                'is_sc_to_client': True,
                'delivery_type': 'sc_to_client'
            }
            delivery_tasks[task_id] = delivery_task
            save_delivery_tasks(delivery_tasks)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            request['status'] = '–û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞'
            requests_data[request_id] = request
            save_requests(requests_data)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await notify_delivery(context.bot, DELIVERY_IDS, delivery_task)
            await query.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶ #{task_id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}"
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –°–¶: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
            return ConversationHandler.END

    async def show_feedback(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                await update.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
            return
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
        ratings = feedback_data.get('ratings', [])
        reviews_count = len(feedback_data.get('reviews', []))
        if not ratings:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ü–µ–Ω–∫–∞–º.")
            return
        avg_rating = round(sum(r['rating'] for r in ratings) / len(ratings), 2)
        # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        rating_counts = {i: 0 for i in range(1, 6)}
        for r in ratings:
            rating_counts[r['rating']] = rating_counts.get(r['rating'], 0) + 1
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n\n"
            f"üåü –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}/5\n"
            f"üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}\n"
            f"üìä –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {len(ratings)}\n\n"
            f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:\n"
        )
        for i in range(5, 0, -1):
            count = rating_counts[i]
            percentage = round((count / len(ratings)) * 100) if ratings else 0
            message += f"{'‚≠ê' * i}: {count} ({percentage}%)\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
        keyboard = [[InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤", callback_data="show_reviews")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, reply_markup=reply_markup)

    async def show_reviews(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤"""
        query = update.callback_query
        await query.answer()
        feedback_file = os.path.join(DATA_DIR, 'feedback.json')
        try:
            if os.path.exists(feedback_file):
                with open(feedback_file, 'r', encoding='utf-8') as f:
                    feedback_data = json.load(f)
            else:
                await query.edit_message_text("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")
            return
        
        reviews = feedback_data.get('reviews', [])
        if not reviews:
            await query.edit_message_text("üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤
        recent_reviews = reviews[-10:]
        message = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        for review in recent_reviews:
            date = review.get('timestamp', '–ù–µ—Ç –¥–∞—Ç—ã')
            text = review.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')
            message += f"üìÖ {date}\nüí¨ {text}\n\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="back_to_stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def back_to_stats(self, update: Update, context: CallbackContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
        query = update.callback_query
        await query.answer()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–µ—Ç–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await self.show_feedback(update, context)
