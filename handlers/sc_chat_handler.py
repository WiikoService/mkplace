import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto
from telegram.ext import CallbackContext, ConversationHandler
from handlers.sc_handler import SCHandler
from database import load_requests, load_chat_history, save_chat_history, load_users
import logging
import os

logger = logging.getLogger(__name__)


class SCChatHandler(SCHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –º–µ–∂–¥—É –°–¶ –∏ –∫–ª–∏–µ–Ω—Ç–æ–º"""

    async def sc_to_user_chat(self, update: Update, context: CallbackContext):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        context.user_data['active_chat'] = {
            'request_id': request_id,
            'chat_type': 'sc_to_client',
            'participants': {
                'sc_user_id': update.effective_user.id,
                'client_id': None
            }
        }
        requests_data = load_requests()
        request_data = requests_data.get(request_id, {})
        client_id = request_data.get('user_id')
        if not client_id:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞")
            return ConversationHandler.END
        context.user_data['active_chat']['participants']['client_id'] = client_id
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –°–¶
        reply_keyboard = [
            ["‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"],
            ["üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏"]
        ]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        # –£–¥–∞–ª—è–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            text=f"üí¨ –ß–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ #{request_id}\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=None  # –£–¥–∞–ª—è–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º:",
            reply_markup=reply_markup
        )
        return 'HANDLE_SC_CHAT'

    async def handle_sc_chat(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –°–¶"""
        message = update.message
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if message.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç":
            context.user_data.pop('active_chat', None)
            await message.reply_text("–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç", reply_markup=ReplyKeyboardRemove())
            await self.show_sc_menu(update, context)
            return ConversationHandler.END
        if message.text == "üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏":
            chat_data = context.user_data.get('active_chat', {})
            request_id = chat_data.get('request_id')
            if request_id:
                await self.show_chat_history_keyboard(update, context, request_id)
            return 'HANDLE_SC_CHAT'
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        chat_data = context.user_data.get('active_chat', {})
        request_id = chat_data.get('request_id')
        client_id = chat_data['participants']['client_id']
        timestamp = datetime.now().strftime("%H:%M %d.%m.%Y")
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"client_reply_{request_id}")
        ]])
        try:
            if message.photo:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                photo = message.photo[-1]
                photo_file = await context.bot.get_file(photo.file_id)     
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                file_name = f"chat_sc_{request_id}_{timestamp.replace(':', '-').replace(' ', '_')}.jpg"
                photo_path = f"photos/{file_name}"
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
                await photo_file.download_to_drive(photo_path)
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                caption = f"üì∑ *–§–æ—Ç–æ –æ—Ç –°–¶ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}*"
                if message.caption:
                    caption += f"\n{message.caption}"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–ª–∏–µ–Ω—Ç—É
                await context.bot.send_photo(
                    chat_id=int(client_id),
                    photo=open(photo_path, 'rb'),
                    caption=caption,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.save_chat_history(
                    request_id,
                    'sc',
                    message.caption if message.caption else "–§–æ—Ç–æ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
                    timestamp,
                    photo_path=photo_path
                )
                await message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            else:  # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=int(client_id),
                    text=f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–¶ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:*\n{message.text}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                self.save_chat_history(
                    request_id,
                    'sc',
                    message.text,
                    timestamp
                )
                await message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return 'HANDLE_SC_CHAT'

    async def handle_client_reply(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        requests_data = load_requests()
        request_data = requests_data.get(request_id, {})
        sc_id = request_data.get('assigned_sc')
        users_data = load_users()
        sc_user_id = next(
            (uid for uid, u_data in users_data.items() 
            if str(u_data.get('sc_id')) == str(sc_id) and u_data.get('role') == 'sc'),
            None
        )
        if not sc_user_id:
            await query.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return ConversationHandler.END
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        context.user_data['active_client_chat'] = {
            'request_id': request_id,
            'sc_user_id': sc_user_id,
            'last_active': time.time()
        }
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await query.message.reply_text(
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return 'HANDLE_CLIENT_REPLY'

    async def handle_client_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        message = update.message
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        chat_data = context.user_data.get('active_client_chat')
        if not chat_data or time.time() - chat_data.get('last_active', 0) > 300:
            await message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=ReplyKeyboardRemove())
            context.user_data.pop('active_client_chat', None)
            return ConversationHandler.END
        request_id = chat_data['request_id']
        sc_user_id = chat_data['sc_user_id']
        timestamp = datetime.now().strftime("%H:%M %d.%m.%Y")
        try:
            if message.photo:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                photo = message.photo[-1]
                photo_file = await context.bot.get_file(photo.file_id)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                file_name = f"chat_client_{request_id}_{timestamp.replace(':', '-').replace(' ', '_')}.jpg"
                photo_path = f"photos/{file_name}"
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
                await photo_file.download_to_drive(photo_path)
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                caption = f"üì∑ *–§–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}*"
                if message.caption:
                    caption += f"\n{message.caption}"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –°–¶
                await context.bot.send_photo(
                    chat_id=int(sc_user_id),
                    photo=open(photo_path, 'rb'),
                    caption=caption,
                    parse_mode='Markdown'
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.save_chat_history(
                    request_id,
                    'client',
                    message.caption if message.caption else "–§–æ—Ç–æ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
                    timestamp,
                    photo_path=photo_path
                )
            else:  # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=int(sc_user_id),
                    text=f"üì© *–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:*\n{message.text}",
                    parse_mode='Markdown'
                )
                self.save_chat_history(
                    request_id,
                    'client',
                    message.text,
                    timestamp
                )
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            context.user_data['active_client_chat']['last_active'] = time.time()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è
            reply_markup = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"client_reply_{request_id}"),
                    InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"close_chat_{request_id}")
                ]
            ])
            await message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return 'HANDLE_CLIENT_REPLY'

    async def close_chat(self, update: Update, context: CallbackContext):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        context.user_data.pop('active_chat', None)
        context.user_data.pop('active_client_chat', None)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        user_id = str(update.effective_user.id)
        users_data = load_users()
        role = users_data.get(user_id, {}).get("role")
        if role == "sc":
            await self.show_sc_menu(update, context)
        else:
            await self.show_client_menu(update, context)
        await query.edit_message_text("–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç")
        return ConversationHandler.END

    def save_chat_history(self, request_id, sender, message, timestamp, photo_path=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
        chat_history = load_chat_history()
        entry = {
            'sender': sender,
            'message': message,
            'timestamp': timestamp
        }
        if photo_path:
            entry['photo_path'] = photo_path
        if request_id not in chat_history:
            chat_history[request_id] = []
        chat_history[request_id].append(entry)
        save_chat_history(chat_history)

    async def show_chat_history(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        await self._show_chat_history(update, context, request_id, is_callback=True)

    async def show_chat_history_keyboard(self, update: Update, context: CallbackContext, request_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        await self._show_chat_history(update, context, request_id, is_callback=False)

    async def _show_chat_history(self, update: Update, context: CallbackContext, request_id, is_callback=True):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        chat_history = load_chat_history().get(request_id, [])
        if not chat_history:
            if is_callback:
                await update.callback_query.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞.")
            else:
                await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞.")
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        for entry in chat_history:
            sender = "–°–¶" if entry['sender'] == 'sc' else "–ö–ª–∏–µ–Ω—Ç"
            timestamp = entry.get('timestamp', '(–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)')
            try:
                if 'photo_path' in entry:
                    photo_path = entry['photo_path']
                    if os.path.exists(photo_path):
                        caption = f"üë§ {sender} ({timestamp})"
                        if entry['message'] and entry['message'] != "–§–æ—Ç–æ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è":
                            caption += f"\n{entry['message']}"
                        if is_callback:
                            await update.callback_query.message.reply_photo(
                                photo=open(photo_path, 'rb'),
                                caption=caption
                            )
                        else:
                            await update.message.reply_photo(
                                photo=open(photo_path, 'rb'),
                                caption=caption
                            )
                    else:
                        logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                        text = f"üë§ {sender} ({timestamp}):\n[–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]"
                        if entry['message'] and entry['message'] != "–§–æ—Ç–æ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è":
                            text += f"\n{entry['message']}"
                        if is_callback:
                            await update.callback_query.message.reply_text(text)
                        else:
                            await update.message.reply_text(text)
                else:
                    text = f"üë§ {sender} ({timestamp}):\n{entry['message']}"
                    if is_callback:
                        await update.callback_query.message.reply_text(text)
                    else:
                        await update.message.reply_text(text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                try:
                    error_text = f"üë§ {sender} ({timestamp}):\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    if is_callback:
                        await update.callback_query.message.reply_text(error_text)
                    else:
                        await update.message.reply_text(error_text)
                except Exception as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(e2)}")

    async def show_sc_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –°–¶"""
        keyboard = [
            ["–ó–∞—è–≤–∫–∏ —Ü–µ–Ω—Ç—Ä–∞", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –¥–æ—Å—Ç–∞–≤–∫—É"],
            ["–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"],
            ["–î–æ–∫—É–º–µ–Ω—Ç—ã"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ú–µ–Ω—é –°–¶:",
            reply_markup=reply_markup
        )

    async def show_client_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞"""
        keyboard = [
            ["–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–ú–æ–∏ –∑–∞—è–≤–∫–∏"],
            ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–î–æ–∫—É–º–µ–Ω—Ç—ã"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=reply_markup
        )

    async def handle_start_dispute(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–ø–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ
        requests_data = load_requests()
        request_data = requests_data.get(request_id)
        if not request_data:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sc_id = request_data.get('assigned_sc')
        users_data = load_users()
        sc_user_id = next(
            (uid for uid, u_data in users_data.items() 
            if str(u_data.get('sc_id')) == str(sc_id) and u_data.get('role') == 'sc'),
            None
        )
        if not sc_user_id:
            await query.edit_message_text("‚ùå –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–æ—Ä–µ
        context.user_data['active_dispute'] = {
            'request_id': request_id,
            'sc_user_id': sc_user_id,
            'last_active': time.time()
        }
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É
        try:
            await context.bot.send_message(
                chat_id=int(sc_user_id),
                text=f"‚ö†Ô∏è *–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫—Ä—ã–ª —Å–ø–æ—Ä –ø–æ –∑–∞—è–≤–∫–µ #{request_id}*",
                parse_mode='Markdown'
            )   
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_chat_history(
                request_id,
                'system',
                f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫—Ä—ã–ª —Å–ø–æ—Ä –ø–æ –∑–∞—è–≤–∫–µ #{request_id}",
                datetime.now().strftime("%H:%M %d.%m.%Y")
            )
            await query.edit_message_text(
                "‚ö†Ô∏è –í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ø–æ—Ä –ø–æ –∑–∞—è–≤–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"client_reply_{request_id}")],
                    [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"close_dispute_{request_id}")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–æ—Ä–µ: {str(e)}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_close_dispute(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–æ—Ä–µ
        context.user_data.pop('active_dispute', None)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—É
        chat_data = context.user_data.get('active_dispute', {})
        sc_user_id = chat_data.get('sc_user_id')
        if sc_user_id:
            try:
                await context.bot.send_message(
                    chat_id=int(sc_user_id),
                    text=f"‚ÑπÔ∏è *–ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–ø–æ—Ä –ø–æ –∑–∞—è–≤–∫–µ #{request_id}*",
                    parse_mode='Markdown'
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.save_chat_history(
                    request_id,
                    'system',
                    f"–ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–ø–æ—Ä –ø–æ –∑–∞—è–≤–∫–µ #{request_id}",
                    datetime.now().strftime("%H:%M %d.%m.%Y")
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–ø–æ—Ä–∞: {str(e)}")
        await query.edit_message_text("‚úÖ –°–ø–æ—Ä –∑–∞–∫—Ä—ã—Ç")
