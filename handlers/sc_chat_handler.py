import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler
from handlers.sc_handler import SCHandler
from database import load_requests, load_chat_history, save_chat_history, load_users
import logging

logger = logging.getLogger(__name__)


class SCChatHandler(SCHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –º–µ–∂–¥—É –°–¶ –∏ –∫–ª–∏–µ–Ω—Ç–æ–º"""

    async def sc_to_user_chat(self, update: Update, context: CallbackContext):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        context.user_data['active_chat'] = {
            'request_id': request_id,
            'chat_type': 'sc_to_client',
            'participants': {
                'sc_user_id': update.effective_user.id,
                'client_id': None
            }
        }
        requests_data = load_requests()
        request_data = requests_data.get(request_id, {})
        client_id = request_data.get('user_id')
        if not client_id:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞")
            return ConversationHandler.END
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['active_chat']['participants']['client_id'] = client_id
        
        # –ö–Ω–æ–ø–∫–∏ Inline –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        inline_keyboard = [
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"close_chat_{request_id}")],
            [InlineKeyboardButton("üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=f"chat_history_{request_id}")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        reply_keyboard = [
            ["‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"], 
            ["üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏"]
        ]
        reply_markup_keyboard = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        
        await query.edit_message_text(
            text=f"üí¨ –ß–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ #{request_id}\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º:",
            reply_markup=reply_markup_keyboard
        )
        
        return 'HANDLE_SC_CHAT'

    async def handle_sc_chat(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –°–¶"""
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–¥–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if message.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç":
            context.user_data.pop('active_chat', None)
            await message.reply_text("–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç", reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END
        
        if message.text == "üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏":
            chat_data = context.user_data.get('active_chat', {})
            request_id = chat_data.get('request_id')
            if request_id:
                await self.show_chat_history_keyboard(update, context, request_id)
            return 'HANDLE_SC_CHAT'
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_data = context.user_data.get('active_chat', {})
        request_id = chat_data.get('request_id')
        client_id = chat_data['participants']['client_id']
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"client_reply_{request_id}")
        ]])
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –∫–Ω–æ–ø–∫–æ–π
            await context.bot.send_message(
                chat_id=int(client_id),
                text=f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–¶ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:*\n{message.text}",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            await message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_chat_history(
                request_id,
                'sc',
                message.text,
                datetime.now().strftime("%H:%M %d-%m-%Y")
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return 'HANDLE_SC_CHAT'

    async def handle_client_reply(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        context.user_data.pop('active_client_chat', None)
        request_id = query.data.split('_')[-1]
        requests_data = load_requests()
        request_data = requests_data.get(request_id, {})
        sc_id = request_data.get('assigned_sc')
        users_data = load_users()
        sc_user_id = next(
            (uid for uid, u_data in users_data.items() 
            if str(u_data.get('sc_id')) == str(sc_id) and u_data.get('role') == 'sc'),
            None
        )
        if not sc_user_id:
            await query.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return ConversationHandler.END
        
        context.user_data['active_client_chat'] = {
            'request_id': request_id,
            'sc_user_id': sc_user_id,
            'last_active': time.time()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        reply_keyboard = [
            ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É"]
        ]
        reply_markup_keyboard = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        
        # Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        inline_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_chat_{request_id}")]
        ])
        
        await query.message.reply_text(
            "üí¨ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=inline_markup
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup_keyboard
        )
        
        return 'HANDLE_CLIENT_REPLY'

    async def handle_client_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞"""
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
            context.user_data.pop('active_client_chat', None)
            await message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END
        
        chat_data = context.user_data.get('active_client_chat')
        if not chat_data or time.time() - chat_data.get('last_active', 0) > 300:
            await message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=ReplyKeyboardRemove())
            context.user_data.pop('active_client_chat', None)
            return ConversationHandler.END
        
        request_id = chat_data['request_id']
        sc_user_id = chat_data['sc_user_id']
        try:
            await context.bot.send_message(
                chat_id=int(sc_user_id),
                text=f"üì© *–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:*\n{message.text}",
                parse_mode='Markdown'
            )
            self.save_chat_history(
                request_id,
                'client',
                message.text,
                datetime.now().strftime("%H:%M %d-%m-%Y")
            )
            context.user_data['active_client_chat']['last_active'] = time.time()
            reply_markup = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ", 
                        callback_data=f"client_reply_{request_id}"
                    ),
                    InlineKeyboardButton(
                        "‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", 
                        callback_data=f"close_chat_{request_id}"
                    )
                ]
            ])
            await message.reply_text(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return 'HANDLE_CLIENT_REPLY'

    def save_chat_history(self, request_id, sender, message, timestamp):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
        chat_history = load_chat_history()
        entry = {
            'sender': sender,
            'message': message,
            'timestamp': timestamp
        }
        if request_id not in chat_history:
            chat_history[request_id] = []
        chat_history[request_id].append(entry)
        save_chat_history(chat_history)

    async def close_chat(self, update: Update, context: CallbackContext):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        context.user_data.pop('active_chat', None)
        await query.edit_message_text("–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç")
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END

    async def cancel_client_chat(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ —á–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        context.user_data.pop('active_client_chat', None)
        await query.edit_message_text("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END

    async def show_chat_history(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        chat_history = load_chat_history().get(request_id, [])
        if not chat_history:
            await query.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞.")
            return
        history_text = f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:\n\n"
        for entry in chat_history:
            sender = "–°–¶" if entry['sender'] == 'sc' else "–ö–ª–∏–µ–Ω—Ç"
            history_text += (
                f"üë§ {sender} ({entry['timestamp']}):\n"
                f"{entry['message']}\n\n"
            )
        await query.message.reply_text(history_text)

    async def show_chat_history_keyboard(self, update: Update, context: CallbackContext, request_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        chat_history = load_chat_history().get(request_id, [])
        if not chat_history:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞.")
            return
        history_text = f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:\n\n"
        for entry in chat_history:
            sender = "–°–¶" if entry['sender'] == 'sc' else "–ö–ª–∏–µ–Ω—Ç"
            history_text += (
                f"üë§ {sender} ({entry['timestamp']}):\n"
                f"{entry['message']}\n\n"
            )
        await update.message.reply_text(history_text) 