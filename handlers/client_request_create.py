import os
from datetime import datetime, timedelta
import locale

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

from config import (
    CREATE_REQUEST_DESC, CREATE_REQUEST_PHOTOS, CREATE_REQUEST_LOCATION,
    PHOTOS_DIR, CREATE_REQUEST_CATEGORY, CREATE_REQUEST_DATA,
    CREATE_REQUEST_ADDRESS, CREATE_REQUEST_CONFIRMATION, CREATE_REQUEST_COMMENT
)
from database import load_requests, load_users, save_requests
from utils import notify_admin, get_address_from_coords, format_location_for_display, prepare_location_for_storage
import logging
from handlers.client_handler import ClientHandler
from config import ADMIN_IDS

logger = logging.getLogger(__name__)


class RequestCreator(ClientHandler):
    category = [
        '–†–µ–º–æ–Ω—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', '–†–µ–º–æ–Ω—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤',
        '–†–µ–º–æ–Ω—Ç –æ–±—É–≤–∏', '–†–µ–º–æ–Ω—Ç –æ–¥–µ–∂–¥—ã', '–†–µ–º–æ–Ω—Ç –º–µ–±–µ–ª–∏',
        '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏', '–ü—Ä–æ—á–µ–µ'
    ]

    async def create_request(self, update: Update, context: CallbackContext):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
        user_id = str(update.effective_user.id)
        users_data = load_users()
        user = users_data.get(user_id, {})
        if user.get('blocked'):
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            )
            return ConversationHandler.END
        keyboard = [
            [InlineKeyboardButton(
                self.category[i], callback_data=f"category_{i}")
                ] for i in range(len(self.category))]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
        return CREATE_REQUEST_CATEGORY

    async def handle_category(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        if query.data == 'approve':
            await query.edit_message_text(text="–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            return ConversationHandler.END
        try:
            category_index = int(query.data.split('_')[1])
            context.user_data["category"] = self.category[category_index]
            await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {context.user_data['category']}")
            await query.message.reply_text("–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
            return CREATE_REQUEST_DESC
        except (ValueError, IndexError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END

    async def handle_request_desc(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."""
        context.user_data["description"] = update.message.text
        await update.message.reply_text(
            "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ).\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ\n\n/DONE"
        )
        context.user_data["photos"] = []
        return CREATE_REQUEST_PHOTOS

    async def handle_request_photos(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞—è–≤–∫–∏."""
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        file_name = f"{update.effective_user.id}_{len(context.user_data['photos'])}.jpg"
        file_path = os.path.join(PHOTOS_DIR, file_name)
        await file.download_to_drive(file_path)
        context.user_data["photos"].append(file_path)
        await update.message.reply_text(
            "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ\n\n/DONE"
        )
        return CREATE_REQUEST_PHOTOS

    async def done_photos(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞—è–≤–∫–∏"""
        if not context.user_data.get("photos") or len(context.user_data["photos"]) == 0:
            await update.message.reply_text(
                "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.\n"
                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ:\n\n/DONE"
            )
            return CREATE_REQUEST_PHOTOS
            
        keyboard = [
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
            [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            f"–ü–æ–ª—É—á–µ–Ω–æ {len(context.user_data['photos'])} —Ñ–æ—Ç–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é':",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_LOCATION

    async def handle_request_location(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
        try:
            if update.message.location:
                latitude = update.message.location.latitude
                longitude = update.message.location.longitude
                status_message = await update.message.reply_text(
                    "‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –∞–¥—Ä–µ—Å –ø–æ –ª–æ–∫–∞—Ü–∏–∏...",
                    reply_markup=ReplyKeyboardRemove()
                )
                address = await get_address_from_coords(latitude, longitude)
                try:
                    await status_message.delete()
                except:
                    pass
                context.user_data["location"] = {
                    "latitude": latitude,
                    "longitude": longitude,
                    "address": address
                }
                return await self.show_date_buttons(update.message)
            elif update.message.text == "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é":
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
                    reply_markup=ReplyKeyboardRemove()
                )
                return CREATE_REQUEST_ADDRESS
        except Exception as e:
            logger.error(f"Error handling location: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_LOCATION

    async def show_date_buttons(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        try:
            locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
        except locale.Error:
            try:
                locale.setlocale(locale.LC_TIME, 'ru_RU')
            except locale.Error:
                try:
                    locale.setlocale(locale.LC_TIME, 'Russian')
                except locale.Error:
                    pass
        keyboard = []
        current_date = datetime.now()
        for i in range(7):
            date = current_date + timedelta(days=i)
            date_display = date.strftime("%d.%m (%A)")
            date_value = date.strftime("%d.%m.%Y")
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÖ {date_display}",
                    callback_data=f"select_date_{date_value}"
                )
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_DATA

    async def handle_request_address(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é."""
        try:
            address = update.message.text.strip()
            if not address:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
                return CREATE_REQUEST_ADDRESS
                
            context.user_data["location"] = {
                "address": address
            }
            return await self.show_date_buttons(update.message)
        except Exception as e:
            logger.error(f"Error handling address: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_ADDRESS

    async def handle_date_selection(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        selected_date = query.data.split('_', 2)[2]
        context.user_data["selected_date"] = selected_date
        keyboard = []
        current_hour = 9
        while current_hour <= 20:
            time_str = f"{current_hour:02d}:00"
            keyboard.append([
                InlineKeyboardButton(
                    f"üïê {time_str}",
                    callback_data=f"select_time_{time_str}"
                )
            ])
            current_hour += 1
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )
        return CREATE_REQUEST_DATA

    async def handle_time_selection(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        query = update.callback_query
        await query.answer()
        selected_time = query.data.split('_', 2)[2]
        selected_date = context.user_data.get("selected_date")
        if not selected_date:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            return ConversationHandler.END
        try:
            date_obj = datetime.strptime(selected_date, "%d.%m.%Y")
            time_obj = datetime.strptime(selected_time, "%H:%M")
            final_datetime = date_obj.replace(
                hour=time_obj.hour,
                minute=time_obj.minute
            )
            context.user_data["desired_date"] = final_datetime
            if "selected_date" in context.user_data:
                del context.user_data["selected_date"]
            await query.message.delete()
            return await self.show_confirmation(query, context)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_DATA

    async def show_confirmation(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
        try:
            message = update.message if hasattr(update, 'message') else update.callback_query.message
            category = context.user_data.get("category", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            description = context.user_data.get("description", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            desired_date = context.user_data.get("desired_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            location = context.user_data.get("location", {})
            location_str = format_location_for_display(location)
            summary = (
                f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"–ê–¥—Ä–µ—Å: {location_str}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {desired_date.strftime('%H:%M %d.%m.%Y') if isinstance(desired_date, datetime) else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
            )
            keyboard = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if isinstance(update, CallbackQuery):
                try:
                    await update.edit_message_text(summary, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error editing message: {e}")
                    await update.message.reply_text(summary, reply_markup=reply_markup)
            else:
                await message.reply_text(summary, reply_markup=reply_markup)
            return CREATE_REQUEST_COMMENT
        except Exception as e:
            logger.error(f"Error in show_confirmation: {e}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            return ConversationHandler.END

    async def skip_comment(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        query = update.callback_query
        await query.answer()
        context.user_data["comment"] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        location = context.user_data.get("location", {})
        if isinstance(location, dict):
            if location.get("type") == "coordinates":
                address = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                location_str = f"{address} (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.get('latitude')}, {location.get('longitude')})"
            else:
                location_str = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
        else:
            location_str = str(location)
        desired_date = context.user_data.get("desired_date")
        date_str = desired_date.strftime('%H:%M %d.%m.%Y') if isinstance(desired_date, datetime) else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        summary = (
            "üìù –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ê–¥—Ä–µ—Å: {location_str}\n"
            f"–î–∞—Ç–∞: {date_str}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart_request")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await query.edit_message_text(summary, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error editing message in skip_comment: {e}")
            await query.message.reply_text(summary, reply_markup=reply_markup)
        return CREATE_REQUEST_CONFIRMATION

    async def handle_request_comment(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            context.user_data["comment"] = update.message.text
            location = context.user_data.get("location", {})
            if isinstance(location, dict):
                if location.get("type") == "coordinates":
                    address = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                    location_str = f"{address} (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.get('latitude')}, {location.get('longitude')})"
                else:
                    location_str = location.get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
            else:
                location_str = str(location)
            desired_date = context.user_data.get("desired_date")
            date_str = desired_date.strftime('%H:%M %d.%m.%Y') if isinstance(desired_date, datetime) else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            summary = (
                "üìù –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–ê–¥—Ä–µ—Å: {location_str}\n"
                f"–î–∞—Ç–∞: {date_str}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request")],
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart_request")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(summary, reply_markup=reply_markup)
            return CREATE_REQUEST_CONFIRMATION
        except Exception as e:
            logger.error(f"Error in handle_request_comment: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return CREATE_REQUEST_COMMENT

    async def handle_request_confirmation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏."""
        query = update.callback_query
        await query.answer()
        if query.data == "confirm_request": 
            return await self.create_request_final(query, context)
        elif query.data == "restart_request":
            await query.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
            return await self.create_request(update, context)

    async def create_request_final(self, query: CallbackQuery, context: CallbackContext):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏."""
        try:
            requests_data = load_requests()
            request_id = str(len(requests_data) + 1)
            user_id = str(query.from_user.id)
            users_data = load_users()
            user_name = users_data.get(user_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            location = context.user_data.get("location", {})
            location_display = format_location_for_display(location)
            location_link = ""
            if isinstance(location, dict) and location.get("type") == "coordinates":
                lat = location.get("latitude")
                lon = location.get("longitude")
                if lat and lon:
                    location_link = f"https://yandex.ru/maps/?pt={lon},{lat}&z=16&l=map"
            desired_date = context.user_data.get("desired_date")
            desired_date_str = desired_date.strftime("%H:%M %d.%m.%Y") if desired_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            requests_data[request_id] = {
                "id": request_id,
                "user_id": user_id,
                "user_name": user_name,
                "category": context.user_data.get("category"),
                "description": context.user_data.get("description"),
                "photos": context.user_data.get("photos", []),
                "location": prepare_location_for_storage(location),
                "location_display": location_display,
                "location_link": location_link,
                "status": "–ù–æ–≤–∞—è",
                "assigned_sc": None,
                "desired_date": desired_date_str,
                "comment": context.user_data.get("comment", "")
            }
            save_requests(requests_data)
            await query.message.reply_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —Å–æ–∑–¥–∞–Ω–∞\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
            )
            await self.show_client_menu(query, context)
            await notify_admin(context.bot, request_id, requests_data, ADMIN_IDS)
            for admin_id in ADMIN_IDS:
                for photo_path in context.user_data.get("photos", []):
                    try:
                        with open(photo_path, 'rb') as photo:
                            await context.bot.send_photo(
                                chat_id=admin_id, 
                                photo=photo,
                                caption=f"–§–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                            )
                    except Exception as e:
                        logger.error(f"Error sending photo to admin {admin_id}: {e}")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Error in create_request_final: {e}")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return ConversationHandler.END

    async def cancel_request(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
