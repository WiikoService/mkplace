from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from config import SC_IDS, ADMIN_IDS, ORDER_STATUS_IN_SC, CREATE_REQUEST_PHOTOS
from handlers.base_handler import BaseHandler
from database import load_requests, save_requests, load_users, load_delivery_tasks, save_delivery_tasks
from utils import notify_client
import logging

logger = logging.getLogger(__name__)


class SCHandler(BaseHandler):

    async def show_sc_menu(self, update: Update, context: CallbackContext):
        keyboard = [
            ["–ó–∞—è–≤–∫–∏ —Ü–µ–Ω—Ç—Ä–∞", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –¥–æ—Å—Ç–∞–≤–∫—É"],
            ["–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"],
            ["–î–æ–∫—É–º–µ–Ω—Ç—ã"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –°–¶:", reply_markup=reply_markup)

    async def set_sc_requests(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"""
        try:
            logger.info('set_sc_requests set_sc_requests set_sc_requests')
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_id = str(update.effective_user.id)
            users_data = load_users()
            current_user = users_data.get(user_id, {})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ –°–¶
            if current_user.get('role') != 'sc' or 'sc_id' not in current_user:
                await update.effective_message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
                return ConversationHandler.END

            sc_id = current_user['sc_id']

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏
            requests_data = load_requests()
            sc_requests = {
                req_id: req 
                for req_id, req in requests_data.items() 
                if str(req.get('assigned_sc')) == sc_id
            }

            if not sc_requests:
                await update.effective_message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞")
                return ConversationHandler.END

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['sc_requests'] = sc_requests

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton(
                    f"–ó–∞—è–≤–∫–∞ #{req_id} - {req['description'][:20]}...",
                    callback_data=f"sc_request_{req_id}"
                )]
                for req_id, req in sc_requests.items()
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.effective_message.reply_text(
                "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞:",
                reply_markup=reply_markup
            )

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–æ–∫ –°–¶: {e}")
            await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
            return ConversationHandler.END

    async def choose_requests(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏"""
        query = update.callback_query
        await query.answer()

        request_id = query.data.split('_')[-1]
        sc_requests = context.user_data.get('sc_requests', {})

        if request_id not in sc_requests:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        request_data = sc_requests[request_id]

        message_text = (
            f"üìå –ó–∞—è–≤–∫–∞ #{request_id}\n"
            f"üîß –°—Ç–∞—Ç—É—Å: {request_data['status']}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_data['user_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request_data.get('client_phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request_data['description']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {request_data['location_display']}"
        )

        keyboard = [
            [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"sc_chat_{request_id}")],
            [InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"sc_comment_{request_id}")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="sc_back_to_list")]
        ]

        await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def handle_back_to_list(self, update: Update, context: CallbackContext):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
        query = update.callback_query
        await query.answer()
        await self.set_sc_requests(update, context)

    async def assign_to_delivery():
        """
        –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –¥–æ—Å—Ç–∞–≤–∫—É
        TODO: –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–æ–≥—Ä–∏—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–æ–º—É, –Ω–∞–∑–Ω–∞—á–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –°–¶
        """
        pass

    async def call_to_admin():
        """
        –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º

        –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å (–Ω–µ —Å—Ä–æ—á–Ω–æ)
        """
        pass

    async def docs():
        """
        –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤ —Ü–µ–ª–æ–º
        """
        pass

    async def cancel(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
