import time
from datetime import datetime
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import CallbackContext, ConversationHandler
from config import ORDER_STATUS_IN_SC, SC_ASSIGN_REQUESTS, ADMIN_IDS
from handlers.base_handler import BaseHandler
from database import (
    load_requests, save_requests, load_users,
    load_delivery_tasks, save_delivery_tasks, load_chat_history,
    save_chat_history, load_service_centers
)
from utils import notify_client
import logging

logger = logging.getLogger(__name__)


class SCHandler(BaseHandler):

    async def show_sc_menu(self, update: Update, context: CallbackContext):
        keyboard = [
            ["–ó–∞—è–≤–∫–∏ —Ü–µ–Ω—Ç—Ä–∞", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –¥–æ—Å—Ç–∞–≤–∫—É"],
            ["–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"],
            ["–î–æ–∫—É–º–µ–Ω—Ç—ã"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ú–µ–Ω—é –°–¶:", reply_markup=reply_markup)

    async def set_sc_requests(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"""
        try:
            user_id = str(update.effective_user.id)
            users_data = load_users()
            current_user = users_data.get(user_id, {})
            if current_user.get('role') != 'sc' or 'sc_id' not in current_user:
                await update.effective_message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
                return ConversationHandler.END
            sc_id = current_user['sc_id']
            requests_data = load_requests()
            sc_requests = {
                req_id: req
                for req_id, req in requests_data.items()
                if str(req.get('assigned_sc')) == sc_id
            }
            if not sc_requests:
                await update.effective_message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞")
                return ConversationHandler.END
            context.user_data['sc_requests'] = sc_requests
            keyboard = [
                [InlineKeyboardButton(
                    f"–ó–∞—è–≤–∫–∞ #{req_id} - {req['description'][:20]}...",
                    callback_data=f"sc_request_{req_id}"
                )]
                for req_id, req in sc_requests.items()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.effective_message.reply_text(
                "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞:",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–æ–∫ –°–¶: {e}")
            await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
            return ConversationHandler.END

    async def choose_requests(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        sc_requests = context.user_data.get('sc_requests', {})
        if request_id not in sc_requests:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        request_data = sc_requests[request_id]
        message_text = (
            f"üìå –ó–∞—è–≤–∫–∞ #{request_id}\n"
            f"üîß –°—Ç–∞—Ç—É—Å: {request_data['status']}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_data['user_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request_data.get('client_phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request_data['description']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {request_data['location_display']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'comments' in request_data and request_data['comments']:
            message_text += "\n\nüìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            for comment in request_data['comments'][-3:]:
                message_text += f"- {comment['timestamp']} | {comment['user_name']}: {comment['text'][:50]}{'...' if len(comment['text']) > 50 else ''}\n"
            
            # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –±–æ–ª—å—à–µ 3, —É–∫–∞–∂–µ–º –æ–± —ç—Ç–æ–º
            if len(request_data['comments']) > 3:
                message_text += f"(–∏ –µ—â–µ {len(request_data['comments']) - 3} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)\n"
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"sc_chat_{request_id}")],
            [InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"sc_comment_{request_id}")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="sc_back_to_list")]
        ]
        await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def handle_back_to_list(self, update: Update, context: CallbackContext):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
        query = update.callback_query
        await query.answer()
        await self.set_sc_requests(update, context)

    async def sc_to_user_chat(self, update: Update, context: CallbackContext):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        context.user_data['active_chat'] = {
            'request_id': request_id,
            'chat_type': 'sc_to_client',
            'participants': {
                'sc_user_id': update.effective_user.id,
                'client_id': None
            }
        }
        requests_data = load_requests()
        request_data = requests_data.get(request_id, {})
        client_id = request_data.get('user_id')
        if not client_id:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞")
            return ConversationHandler.END
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['active_chat']['participants']['client_id'] = client_id
        keyboard = [
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"close_chat_{request_id}")],
            [InlineKeyboardButton("üì® –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=f"chat_history_{request_id}")]
        ]
        await query.edit_message_text(
            text=f"üí¨ –ß–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ #{request_id}\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return 'HANDLE_SC_CHAT'

    async def handle_sc_chat(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –°–¶"""
        message = update.message
        chat_data = context.user_data.get('active_chat', {})
        request_id = chat_data.get('request_id')
        client_id = chat_data['participants']['client_id']
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"client_reply_{request_id}")
        ]])
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –∫–Ω–æ–ø–∫–æ–π
            await context.bot.send_message(
                chat_id=int(client_id),
                text=f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–¶ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:*\n{message.text}",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            await message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_chat_history(
                request_id,
                'sc',
                message.text,
                datetime.now().strftime("%H:%M %d-%m-%Y")
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return 'HANDLE_SC_CHAT'

    async def handle_client_reply(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        context.user_data.pop('active_client_chat', None)
        
        request_id = query.data.split('_')[-1]
        requests_data = load_requests()
        request_data = requests_data.get(request_id, {})
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ SC
        sc_id = request_data.get('assigned_sc')
        users_data = load_users()
        sc_user_id = next(
            (uid for uid, u_data in users_data.items() 
            if str(u_data.get('sc_id')) == str(sc_id) and u_data.get('role') == 'sc'),
            None
        )
        
        if not sc_user_id:
            await query.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return ConversationHandler.END
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å timestamp
        context.user_data['active_client_chat'] = {
            'request_id': request_id,
            'sc_user_id': sc_user_id,
            'last_active': time.time()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –Ω–æ–≤—ã–º callback_data
        await query.message.reply_text(
            "üí¨ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_chat_{request_id}")]
            ])
        )
        return 'HANDLE_CLIENT_REPLY'

    async def handle_client_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞"""
        message = update.message
        chat_data = context.user_data.get('active_client_chat')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if not chat_data or time.time() - chat_data.get('last_active', 0) > 300:
            await message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
            context.user_data.pop('active_client_chat', None)
            return ConversationHandler.END
        
        request_id = chat_data['request_id']
        sc_user_id = chat_data['sc_user_id']
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await context.bot.send_message(
                chat_id=int(sc_user_id),
                text=f"üì© *–û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:*\n{message.text}",
                parse_mode='Markdown'
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            self.save_chat_history(
                request_id,
                'client',
                message.text,
                datetime.now().strftime("%H:%M %d-%m-%Y")
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            context.user_data['active_client_chat']['last_active'] = time.time()
            
            # –ö–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –≤—ã—Ö–æ–¥–∞
            reply_markup = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ", 
                        callback_data=f"client_reply_{request_id}"
                    ),
                    InlineKeyboardButton(
                        "‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", 
                        callback_data=f"close_chat_{request_id}"
                    )
                ]
            ])
            
            await message.reply_text(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        return 'HANDLE_CLIENT_REPLY'

    def save_chat_history(self, request_id, sender, message, timestamp):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
        chat_history = load_chat_history()
        entry = {
            'sender': sender,
            'message': message,
            'timestamp': timestamp
        }
        if request_id not in chat_history:
            chat_history[request_id] = []
        chat_history[request_id].append(entry)
        save_chat_history(chat_history)  # –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    async def close_chat(self, update: Update, context: CallbackContext):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        context.user_data.pop('active_chat', None)
        await query.edit_message_text("–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç")
        return ConversationHandler.END

    async def show_chat_history(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        chat_history = load_chat_history().get(request_id, [])
        if not chat_history:
            await query.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞.")
            return
        history_text = f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:\n\n"
        for entry in chat_history:
            sender = "–°–¶" if entry['sender'] == 'sc' else "–ö–ª–∏–µ–Ω—Ç"
            history_text += (
                f"üë§ {sender} ({entry['timestamp']}):\n"
                f"{entry['message']}\n\n"
            )
        await query.message.reply_text(history_text)

    async def sc_comment(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        query = update.callback_query
        await query.answer()
        request_id = query.data.split('_')[-1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
        context.user_data['current_request_id'] = request_id
        context.user_data['comment_message_id'] = query.message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏:")
        return 'HANDLE_SC_COMMENT'

    async def save_comment(self, update: Update, context: CallbackContext):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞—è–≤–∫—É"""
        user_comment = update.message.text
        request_id = context.user_data.get('current_request_id')
        message_id = context.user_data.get('comment_message_id')

        # –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        requests_data = load_requests()
        if request_id in requests_data:
            requests_data[request_id]['comment'] = user_comment
            save_requests(requests_data)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            request_data = requests_data[request_id]
            message_text = (
                f"üìå –ó–∞—è–≤–∫–∞ #{request_id}\n"
                f"üîß –°—Ç–∞—Ç—É—Å: {request_data['status']}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_data['user_name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request_data.get('client_phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request_data['description']}\n"
                f"üè† –ê–¥—Ä–µ—Å: {request_data['location_display']}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –°–¶: {user_comment}"
            )

            keyboard = [
                [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"sc_chat_{request_id}")],
                [InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"sc_comment_{request_id}")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="sc_back_to_list")]
            ]

            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=message_id,
                    text=message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await update.message.reply_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        return ConversationHandler.END

    async def assign_to_delivery(self, update: Update, context: CallbackContext):
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –°–¶"""
        users_data = load_users()
        user_id = str(update.effective_user.id)   
        requests_data = load_requests()
        if not requests_data:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É.")
            return ConversationHandler.END
        keyboard = []
        sc_id = users_data[user_id].get('sc_id')
        for req_id, req_data in requests_data.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –°–¶ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
            if (req_data.get('assigned_sc') == sc_id and 
                req_data.get('status') == ORDER_STATUS_IN_SC):
                desc = req_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:30] + '...'
                button_text = f"–ó–∞—è–≤–∫–∞ #{req_id} - {desc}"
                keyboard.append([InlineKeyboardButton(
                    button_text, 
                    callback_data=f"sc_delivery_{req_id}"
                )])
            
        if not keyboard:
            await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –¥–æ—Å—Ç–∞–≤–∫—É.")
            return ConversationHandler.END
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É:",
            reply_markup=reply_markup
        )
        return SC_ASSIGN_REQUESTS

    async def handle_sc_delivery_request(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–æ—Å—Ç–∞–≤–∫—É"""
        query = update.callback_query
        await query.answer()
        parts = query.data.split('_')
        request_id = parts[2]
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        requests_data = load_requests()
        request = requests_data.get(request_id, {})
        keyboard = [[
            InlineKeyboardButton(
                "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏", 
                callback_data=f"create_delivery_{request_id}"
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        admin_message = (
            f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç –°–¶\n\n"
            f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"–°—Ç–∞—Ç—É—Å: {request.get('status', '–°—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        await query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
        )
        return ConversationHandler.END

    async def call_to_admin(self, update: Update, context: CallbackContext):
        """–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        user_id = str(update.effective_user.id)
        users_data = load_users()
        service_centers = load_service_centers()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–¶
        sc_id = users_data[user_id].get('sc_id')
        sc_data = service_centers.get(sc_id, {})
        if not sc_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –°–¶ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            f"üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞\n\n"
            f"üè¢ –°–¶: {sc_data.get('name')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {sc_data.get('address')}\n"
            f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {sc_data.get('phone')}\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {users_data[user_id].get('name')}"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        await update.message.reply_text(
            "‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
        )

    async def docs(self, update: Update, context: CallbackContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤ —Ü–µ–ª–æ–º"""
        await update.message.reply_text("üìÑ –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")

    async def cancel(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    async def cancel_client_chat(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ —á–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        context.user_data.pop('active_client_chat', None)
        
        await query.edit_message_text("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END


