import logging
import random
import json
import os
from decimal import Decimal

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, ReplyKeyboardRemove
from telegram.ext import CallbackContext, ConversationHandler

from handlers.delivery_sc_handler import DeliverySCHandler
from config import (
    CREATE_REQUEST_PHOTOS, ENTER_CONFIRMATION_CODE, 
    WAITING_FINAL_PAYMENT, ORDER_STATUS_SC_TO_CLIENT,
    DEBUG, ADMIN_IDS, PAYMENT_API_URL
)
from database import load_requests, save_requests, load_delivery_tasks, save_delivery_tasks, load_users
from smsby import SMSBY
import aiohttp

logger = logging.getLogger(__name__)

class FinalPaymentHandler(DeliverySCHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É"""

    async def handle_deliver_to_client(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç—É' —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π SMS –∫–ª–∏–µ–Ω—Ç—É
        """
        query = update.callback_query
        await query.answer()
        try:
            request_id = query.data.split('_')[-1]
            context.user_data['current_request'] = request_id
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            users_data = load_users()
            if request_id not in requests_data:
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
            request = requests_data[request_id]
            client_id = request.get('user_id')
            client_data = users_data.get(str(client_id), {})
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            requests_data[request_id]['status'] = ORDER_STATUS_SC_TO_CLIENT
            save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            await self._update_delivery_task_status(request_id, ORDER_STATUS_SC_TO_CLIENT)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            if client_id:
                await self._notify_client_about_delivery(context, client_id, request_id, requests_data)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await self._notify_admins_about_delivery(context, update.effective_user.first_name, request_id)
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_code = ''.join(random.choices('0123456789', k=4))
            context.user_data['client_confirmation_code'] = confirmation_code
            requests_data[request_id]['confirmation_code'] = confirmation_code
            save_requests(requests_data)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π –∏–ª–∏ –±–æ–µ–≤–æ–π)
            if DEBUG:
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É
                await query.edit_message_text(
                    f"üî¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {confirmation_code}\n\n"
                    f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                )
                if client_id:
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                    )
            else:
                # –í –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–ª–∏–µ–Ω—Ç—É
                if client_id and client_data.get('phone'):
                    try:
                        success = await self._send_sms_confirmation(context, client_data, request_id, confirmation_code, requests_data)
                        if not success:
                            # –ï—Å–ª–∏ SMS –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                            await query.edit_message_text(
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: {confirmation_code}\n\n"
                                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                            )
                            if client_id:
                                await context.bot.send_message(
                                    chat_id=int(client_id),
                                    text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                                )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {str(e)}")
                        await query.edit_message_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: {confirmation_code}\n\n"
                            f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                        )
                        if client_id:
                            await context.bot.send_message(
                                chat_id=int(client_id),
                                text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                            )
                else:
                    # –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    await query.edit_message_text(
                        f"üî¢ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {confirmation_code}\n\n"
                        f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–æ—Ç–µ."
                    )
                    if client_id:
                        await context.bot.send_message(
                            chat_id=int(client_id),
                            text=f"üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–∑–≤–∞–ª –¥–æ—Å—Ç–∞–≤—â–∏–∫:"
                        )
            return ENTER_CONFIRMATION_CODE
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def _update_delivery_task_status(self, request_id, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        delivery_tasks = load_delivery_tasks()
        task_updated = False
        for task_id, task in delivery_tasks.items():
            if task.get('request_id') == request_id:
                task['status'] = status
                task_updated = True
                break
        if not task_updated:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
        save_delivery_tasks(delivery_tasks)

    async def _notify_client_about_delivery(self, context, client_id, request_id, requests_data):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º"""
        try:
            await context.bot.send_message(
                chat_id=int(client_id),
                text=f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ –ø—Ä–∏–±—ã–ª —Å –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ –≤–∞–º.\n"
                    f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {requests_data[request_id].get('location_display', '—É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∑–∞—è–≤–∫–µ')}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            photos = requests_data[request_id].get('sc_pickup_photos', [])
            for photo_path in photos:
                if os.path.exists(photo_path):
                    with open(photo_path, 'rb') as photo_file:
                        await context.bot.send_photo(
                            chat_id=int(client_id),
                            photo=photo_file,
                            caption=f"–§–æ—Ç–æ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞"
                        )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")

    async def _notify_admins_about_delivery(self, context, delivery_name, request_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—á–∞–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É"""
        admin_message = (
            f"üöö –î–æ—Å—Ç–∞–≤—â–∏–∫ {delivery_name} –ø—Ä–∏–±—ã–ª –∫ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞\n"
            f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {ORDER_STATUS_SC_TO_CLIENT}"
        )
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=int(admin_id),
                    text=admin_message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    async def _send_sms_confirmation(self, context, client_data, request_id, confirmation_code, requests_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            phone = client_data['phone'].replace('+', '')
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ –Ω–æ–º–µ—Ä: {phone}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SMS-–∫–ª–∏–µ–Ω—Ç
            from config import SMS_TOKEN
            sms_client = SMSBY(SMS_TOKEN, 'by')
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–∞—Ä–æ–ª—è...")
            password_response = sms_client.create_password_object('numbers', 4)
            logger.info(f"–û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: {password_response}")
            
            if 'result' in password_response and 'password_object_id' in password_response['result']:
                password_object_id = password_response['result']['password_object_id']
                logger.info(f"ID –æ–±—ä–µ–∫—Ç–∞ –ø–∞—Ä–æ–ª—è: {password_object_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ñ–∞-–∏–º–µ–Ω–∞
                alphanames = sms_client.get_alphanames()
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª—å—Ñ–∞-–∏–º–µ–Ω–∞: {alphanames}")
                
                if alphanames:
                    alphaname_id = next(iter(alphanames.keys()))
                    sms_message = f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: %CODE%"
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {sms_message}")
                    
                    sms_response = sms_client.send_sms_message_with_code(
                        password_object_id=password_object_id,
                        phone=phone,
                        message=sms_message,
                        alphaname_id=alphaname_id
                    )
                    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {sms_response}")
                    
                    if 'code' in sms_response:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏ SMS ID –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
                        requests_data[request_id]['sms_id'] = sms_response.get('sms_id')
                        requests_data[request_id]['confirmation_code'] = sms_response['code']
                        save_requests(requests_data)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
                        await context.bot.send_message(
                            chat_id=int(client_data['user_id']),
                            text=f"üì≤ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:"
                        )
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: –Ω–µ—Ç –∫–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS: –Ω–µ—Ç –∫–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω")
                    raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ñ–∞-–∏–º–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: {password_response}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –ø–∞—Ä–æ–ª—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –≤—Ä—É—á–Ω—É—é
            return False

    async def handle_client_confirmation_code(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        try:
            entered_code = update.message.text.strip()
            request_id = context.user_data.get('current_request')
            if not request_id:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.")
                return ConversationHandler.END
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            users_data = load_users()
            if request_id not in requests_data:
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
            request = requests_data[request_id]
            client_id = request.get('user_id')
            expected_code = request.get('confirmation_code')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –≤–≤–æ–¥–∏—Ç –∫–æ–¥ - –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫
            user_id = str(update.effective_user.id)
            # –ï—Å–ª–∏ –∫–æ–¥ –≤–≤–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç
            if client_id and user_id == str(client_id):
                if entered_code == expected_code:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ
                    final_price = Decimal(request.get('final_price', '0'))
                    repair_price = Decimal(request.get('repair_price', '0'))
                    # –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: final_price - (repair_price * 0.3 + 20)
                    prepayment = (repair_price * Decimal('0.3')) + Decimal('20')
                    amount_to_pay = final_price - prepayment if final_price > prepayment else Decimal('0')
                    if amount_to_pay > Decimal('0'):
                        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                        return await self._create_final_payment(update, context, request_id, request, amount_to_pay)
                    else:
                        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        return await self._request_delivery_photos(update, context, request_id, request)
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return ENTER_CONFIRMATION_CODE
            else:
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                return ENTER_CONFIRMATION_CODE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def _create_final_payment(self, update, context, request_id, request, amount_to_pay):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        client_id = request.get('user_id')
        payment_data = {
            'amount': float(amount_to_pay),
            'description': f"–û–ø–ª–∞—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}"
        }
        logger.info(f"üí≤ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: {payment_data}")
        try:
            async with aiohttp.ClientSession() as session:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –º–µ—Ç–æ–¥–µ
                payment_request_data = {'payment_request': json.dumps(payment_data)}
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {payment_request_data}")
                async with session.post(
                    PAYMENT_API_URL,
                    data=payment_request_data,
                    timeout=10
                ) as response:
                    status = response.status
                    logger.info(f"üì• –°—Ç–∞—Ç—É—Å HTTP-–æ—Ç–≤–µ—Ç–∞: {status}")
                    if status != 200:
                        response_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {status}, –æ—Ç–≤–µ—Ç: {response_text}")
                        raise Exception(f"HTTP error {status}: {response_text}")
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                    content_type = response.headers.get('Content-Type', 'unknown')
                    logger.info(f"üîç Content-Type –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {content_type}")
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    response_body = await response.text()
                    logger.info(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {response_body}")
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Content-Type
                    try:
                        result = json.loads(response_body)
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω JSON –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {result}")
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_body}")
                        raise Exception(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
                    logger.info(f"üîë –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(result.keys())}")
                    if not result.get('order_id') or not result.get('payment_url'):
                        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç API: {result}")
                        raise Exception(f"Invalid API response: {result}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
                    request['final_payment_order_id'] = result['order_id']
                    requests_data = load_requests()
                    requests_data[request_id] = request
                    save_requests(requests_data)
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω final_payment_order_id: {result['order_id']} –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç—É
                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url=result['payment_url'])],
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_final_payment_{request_id}")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_final_payment_{request_id}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É: {amount_to_pay:.2f} BYN\n"
                            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
                        reply_markup=reply_markup
                    )
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                    delivery_id = request.get('assigned_delivery')
                    if delivery_id:
                        await context.bot.send_message(
                            chat_id=int(delivery_id),
                            text=f"üîÑ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –¥–æ–ª–∂–µ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å {amount_to_pay:.2f} BYN. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
                        )
                    return WAITING_FINAL_PAYMENT
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
            logger.error(error_message)
            logger.exception(e)  # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫—Ç—Ä–µ–π—Å
            await context.bot.send_message(
                chat_id=int(client_id),
                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {str(e)}"
            )
            return ConversationHandler.END

    async def _request_delivery_photos(self, update, context, request_id, request):
        """–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —É –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º"""
        client_id = request.get('user_id')
        delivery_id = request.get('assigned_delivery')
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        await update.message.reply_text(
            "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ—Ä–Ω—ã–π! –î–æ—Å—Ç–∞–≤—â–∏–∫ —Å–¥–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞."
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if delivery_id:
            await context.bot.send_message(
                chat_id=int(delivery_id),
                text="‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö."
            )
        context.user_data['awaiting_delivery_photos'] = True
        return CREATE_REQUEST_PHOTOS

    async def check_final_payment(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º"""
        query = update.callback_query
        await query.answer()
        try:
            request_id = query.data.split('_')[-1]
            logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
            requests_data = load_requests()
            if request_id not in requests_data:
                logger.error(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
                await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ConversationHandler.END
            request = requests_data[request_id]
            order_id = request.get('final_payment_order_id')
            client_id = request.get('user_id')
            delivery_id = request.get('assigned_delivery')
            if not order_id:
                logger.error(f"‚ùå final_payment_order_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—è–≤–∫–µ #{request_id}")
                await query.edit_message_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return ConversationHandler.END
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            status_data = {'payment_status_order_id': order_id}
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {status_data}")
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    PAYMENT_API_URL,
                    data=status_data,
                    timeout=10
                ) as response:
                    status = response.status
                    logger.info(f"üì• –°—Ç–∞—Ç—É—Å HTTP-–æ—Ç–≤–µ—Ç–∞: {status}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    response_text = await response.text()
                    logger.info(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {response_text}")
                    
                    # –ò–∑—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                    content_type = response.headers.get('Content-Type', 'unknown')
                    logger.info(f"üîç Content-Type –æ—Ç–≤–µ—Ç–∞: {content_type}")
                    
                    if status != 200:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {status}, –æ—Ç–≤–µ—Ç: {response_text}")
                        raise Exception(f"HTTP error {status}: {response_text}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Content-Type
                    try:
                        result = json.loads(response_text)
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω JSON –æ—Ç–≤–µ—Ç–∞: {result}")
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")
                        raise Exception(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
                    logger.info(f"üîë –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(result.keys())}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –±–∞–Ω–∫–∞
                    if (result.get('errorCode') == '0' and 
                        result.get('orderStatus') == 2 and 
                        result.get('paymentAmountInfo', {}).get('paymentState') == 'DEPOSITED'):
                        # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
                        logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} —É—Å–ø–µ—à–µ–Ω!")
                        request['status'] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
                        request['payment_status'] = "paid"
                        save_requests(requests_data)
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                        await context.bot.send_message(
                            chat_id=int(client_id),
                            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                        )
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        if delivery_id:
                            await context.bot.send_message(
                                chat_id=int(delivery_id),
                                text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö."
                            )   
                        
                        context.user_data['awaiting_delivery_photos'] = True
                        return CREATE_REQUEST_PHOTOS
                    else:
                        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω
                        error_message = result.get('errorMessage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        payment_state = result.get('paymentAmountInfo', {}).get('paymentState', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        order_status = result.get('orderStatus', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        status_message = f"–°—Ç–∞—Ç—É—Å: {payment_state}, –ö–æ–¥: {order_status}, –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}"
                        logger.info(f"‚è≥ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω: {status_message}")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                        new_message = (
                            f"‚è≥ –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω: {error_message}\n"
                            f"–°—Ç–∞—Ç—É—Å: {payment_state}, –ö–æ–¥: {order_status}\n\n"
                            "–í–æ–∑–º–æ–∂–Ω–æ, –æ–ø–µ—Ä–∞—Ü–∏—è –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                        )
                        keyboard = [
                            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_final_payment_{request_id}")],
                            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_final_payment_{request_id}")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        current_text = query.message.text if query.message.text else ""
                        current_markup = query.message.reply_markup if query.message.reply_markup else InlineKeyboardMarkup([])
                        
                        if current_text != new_message or current_markup != reply_markup:
                            try:
                                await query.edit_message_text(new_message, reply_markup=reply_markup)
                            except Exception as edit_error:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                                await context.bot.send_message(
                                    chat_id=query.message.chat_id,
                                    text=new_message,
                                    reply_markup=reply_markup
                                )
                        else:
                            logger.info("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            await context.bot.answer_callback_query(
                                callback_query_id=query.id,
                                text="–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
                            )
                            
                        return WAITING_FINAL_PAYMENT
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
            logger.error(error_message)
            logger.exception(e)  # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫—Ç—Ä–µ–π—Å
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_final_payment_{request_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_final_payment_{request_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}",
                    reply_markup=reply_markup
                )
            except Exception as edit_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}",
                    reply_markup=reply_markup
                )
                
            return WAITING_FINAL_PAYMENT

    async def cancel_final_payment(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.callback_query
        await query.answer()
        try:
            request_id = query.data.split('_')[-1]
            client_id = update.effective_user.id
            delivery_id = None
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            requests_data = load_requests()
            if request_id in requests_data:
                request = requests_data[request_id]
                delivery_id = request.get('assigned_delivery')
            # –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ—Ç–º–µ–Ω–µ
            await query.edit_message_text(
                "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫—É."
            )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            if delivery_id:
                await context.bot.send_message(
                    chat_id=int(delivery_id),
                    text=f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}. –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏."
                )
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞.")
            return ConversationHandler.END

    async def handle_delivery_photo(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'delivery_photos' not in context.user_data:
                context.user_data['delivery_photos'] = []
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file = await context.bot.get_file(photo.file_id)
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
            request_id = context.user_data.get('current_request')
            photo_filename = f"delivery_to_client_{request_id}_{len(context.user_data['delivery_photos'])}.jpg"
            photo_path = os.path.join("photos", photo_filename)
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            await file.download_to_drive(photo_path)
            context.user_data['delivery_photos'].append(photo_path)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ #{len(context.user_data['delivery_photos'])} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ\n\n/DONE"
            )
            return CREATE_REQUEST_PHOTOS
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return CREATE_REQUEST_PHOTOS

    async def handle_delivery_photos_done(self, update: Update, context: CallbackContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            request_id = context.user_data.get('current_request')
            photos = context.user_data.get('delivery_photos', [])
            if not photos:
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
                return CREATE_REQUEST_PHOTOS
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            delivery_tasks = load_delivery_tasks()
            if request_id not in requests_data:
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            request = requests_data[request_id]
            request['status'] = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É"
            request['delivery_photos'] = photos
            save_requests(requests_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            for task_id, task in delivery_tasks.items():
                if task.get('request_id') == request_id:
                    task['status'] = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                    save_delivery_tasks(delivery_tasks)
                    break
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            await self._send_completion_notifications(update, context, request_id, photos)
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.pop('current_request', None)
            context.user_data.pop('delivery_photos', None)
            context.user_data.pop('awaiting_delivery_photos', None)
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END

    async def _send_completion_notifications(self, update, context, request_id, photos):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            requests_data = load_requests()
            if request_id not in requests_data:
                return
            request = requests_data[request_id]
            client_id = request.get('user_id')
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_message = (
                f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–ó–∞—è–≤–∫–∞: #{request_id}\n"
                f"–î–æ—Å—Ç–∞–≤—â–∏–∫: {update.effective_user.first_name}\n\n"
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=int(admin_id),
                        text=admin_message
                    )       
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    media_group = []
                    for photo_path in photos:
                        if os.path.exists(photo_path):
                            media_group.append(InputMediaPhoto(
                                media=open(photo_path, 'rb'),
                                caption=f"–ó–∞—è–≤–∫–∞ #{request_id}"
                            ))
                    if media_group:
                        await context.bot.send_media_group(
                            chat_id=int(admin_id),
                            media=media_group
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if client_id:
                try:
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!"
                    )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
                    keyboard = [[
                        InlineKeyboardButton(
                            "üåü –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", 
                            callback_data=f"rate_service_{request_id}"
                        )
                    ]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=int(client_id),
                        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞
            await update.message.reply_text(
                "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!",
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}") 